//
// This file is automatically generated at build time. DO NOT EDIT DIRECTLY.
//
use crate::{leb128::*, BrTableVec, WasmBlockType, WasmCompileErrorKind, WasmMemArg};
use core::fmt;

/// WebAssembly Opcode
#[non_exhaustive]
#[derive(Clone)]
pub enum WasmOpcode {
    /// 0x00 `unreachable` (MVP)
    Unreachable,
    /// 0x01 `nop` (MVP)
    Nop,
    /// 0x02 `block` bt (MVP)
    Block(WasmBlockType),
    /// 0x03 `loop` bt (MVP)
    Loop(WasmBlockType),
    /// 0x04 `if` bt (MVP)
    If(WasmBlockType),
    /// 0x05 `else` (MVP)
    Else,
    /// 0x0B `end` (MVP)
    End,
    /// 0x0C `br` u32 (MVP)
    Br(u32),
    /// 0x0D `br_if` u32 (MVP)
    BrIf(u32),
    /// 0x0E `br_table` br_table (MVP)
    BrTable(BrTableVec),
    /// 0x0F `return` (MVP)
    Return,
    /// 0x10 `call` u32 (MVP)
    Call(u32),
    /// 0x11 `call_indirect` u32 u32 (MVP)
    CallIndirect(u32, u32),
    /// 0x12 `return_call` (TailCall)
    ReturnCall,
    /// 0x13 `return_call_indirect` (TailCall)
    ReturnCallIndirect,
    /// 0x14 `call_ref` (TypedFunctionReferences)
    CallRef,
    /// 0x15 `return_call_ref` (TypedFunctionReferences)
    ReturnCallRef,
    /// 0x1A `drop` (MVP)
    Drop,
    /// 0x1B `select` (MVP)
    Select,
    /// 0x1C `select_t` u32 (ReferenceTypes)
    SelectT(u32),
    /// 0x20 `local.get` u32 (MVP)
    LocalGet(u32),
    /// 0x21 `local.set` u32 (MVP)
    LocalSet(u32),
    /// 0x22 `local.tee` u32 (MVP)
    LocalTee(u32),
    /// 0x23 `global.get` u32 (MVP)
    GlobalGet(u32),
    /// 0x24 `global.set` u32 (MVP)
    GlobalSet(u32),
    /// 0x25 `table.get` u32 (ReferenceTypes)
    TableGet(u32),
    /// 0x26 `table.set` u32 (ReferenceTypes)
    TableSet(u32),
    /// 0x28 `i32.load` memarg (MVP)
    I32Load(WasmMemArg),
    /// 0x29 `i64.load` memarg (MVP)
    I64Load(WasmMemArg),
    /// 0x2A `f32.load` memarg (MVP)
    F32Load(WasmMemArg),
    /// 0x2B `f64.load` memarg (MVP)
    F64Load(WasmMemArg),
    /// 0x2C `i32.load8_s` memarg (MVP)
    I32Load8S(WasmMemArg),
    /// 0x2D `i32.load8_u` memarg (MVP)
    I32Load8U(WasmMemArg),
    /// 0x2E `i32.load16_s` memarg (MVP)
    I32Load16S(WasmMemArg),
    /// 0x2F `i32.load16_u` memarg (MVP)
    I32Load16U(WasmMemArg),
    /// 0x30 `i64.load8_s` memarg (MVP)
    I64Load8S(WasmMemArg),
    /// 0x31 `i64.load8_u` memarg (MVP)
    I64Load8U(WasmMemArg),
    /// 0x32 `i64.load16_s` memarg (MVP)
    I64Load16S(WasmMemArg),
    /// 0x33 `i64.load16_u` memarg (MVP)
    I64Load16U(WasmMemArg),
    /// 0x34 `i64.load32_s` memarg (MVP)
    I64Load32S(WasmMemArg),
    /// 0x35 `i64.load32_u` memarg (MVP)
    I64Load32U(WasmMemArg),
    /// 0x36 `i32.store` memarg (MVP)
    I32Store(WasmMemArg),
    /// 0x37 `i64.store` memarg (MVP)
    I64Store(WasmMemArg),
    /// 0x38 `f32.store` memarg (MVP)
    F32Store(WasmMemArg),
    /// 0x39 `f64.store` memarg (MVP)
    F64Store(WasmMemArg),
    /// 0x3A `i32.store8` memarg (MVP)
    I32Store8(WasmMemArg),
    /// 0x3B `i32.store16` memarg (MVP)
    I32Store16(WasmMemArg),
    /// 0x3C `i64.store8` memarg (MVP)
    I64Store8(WasmMemArg),
    /// 0x3D `i64.store16` memarg (MVP)
    I64Store16(WasmMemArg),
    /// 0x3E `i64.store32` memarg (MVP)
    I64Store32(WasmMemArg),
    /// 0x3F `memory.size` u32 (MVP)
    MemorySize(u32),
    /// 0x40 `memory.grow` u32 (MVP)
    MemoryGrow(u32),
    /// 0x41 `i32.const` i32 (MVP)
    I32Const(i32),
    /// 0x42 `i64.const` i64 (MVP)
    I64Const(i64),
    /// 0x43 `f32.const` f32 (MVP)
    F32Const(f32),
    /// 0x44 `f64.const` f64 (MVP)
    F64Const(f64),
    /// 0x45 `i32.eqz` (MVP)
    I32Eqz,
    /// 0x46 `i32.eq` (MVP)
    I32Eq,
    /// 0x47 `i32.ne` (MVP)
    I32Ne,
    /// 0x48 `i32.lt_s` (MVP)
    I32LtS,
    /// 0x49 `i32.lt_u` (MVP)
    I32LtU,
    /// 0x4A `i32.gt_s` (MVP)
    I32GtS,
    /// 0x4B `i32.gt_u` (MVP)
    I32GtU,
    /// 0x4C `i32.le_s` (MVP)
    I32LeS,
    /// 0x4D `i32.le_u` (MVP)
    I32LeU,
    /// 0x4E `i32.ge_s` (MVP)
    I32GeS,
    /// 0x4F `i32.ge_u` (MVP)
    I32GeU,
    /// 0x50 `i64.eqz` (MVP)
    I64Eqz,
    /// 0x51 `i64.eq` (MVP)
    I64Eq,
    /// 0x52 `i64.ne` (MVP)
    I64Ne,
    /// 0x53 `i64.lt_s` (MVP)
    I64LtS,
    /// 0x54 `i64.lt_u` (MVP)
    I64LtU,
    /// 0x55 `i64.gt_s` (MVP)
    I64GtS,
    /// 0x56 `i64.gt_u` (MVP)
    I64GtU,
    /// 0x57 `i64.le_s` (MVP)
    I64LeS,
    /// 0x58 `i64.le_u` (MVP)
    I64LeU,
    /// 0x59 `i64.ge_s` (MVP)
    I64GeS,
    /// 0x5A `i64.ge_u` (MVP)
    I64GeU,
    /// 0x5B `f32.eq` (MVP)
    F32Eq,
    /// 0x5C `f32.ne` (MVP)
    F32Ne,
    /// 0x5D `f32.lt` (MVP)
    F32Lt,
    /// 0x5E `f32.gt` (MVP)
    F32Gt,
    /// 0x5F `f32.le` (MVP)
    F32Le,
    /// 0x60 `f32.ge` (MVP)
    F32Ge,
    /// 0x61 `f64.eq` (MVP)
    F64Eq,
    /// 0x62 `f64.ne` (MVP)
    F64Ne,
    /// 0x63 `f64.lt` (MVP)
    F64Lt,
    /// 0x64 `f64.gt` (MVP)
    F64Gt,
    /// 0x65 `f64.le` (MVP)
    F64Le,
    /// 0x66 `f64.ge` (MVP)
    F64Ge,
    /// 0x67 `i32.clz` (MVP)
    I32Clz,
    /// 0x68 `i32.ctz` (MVP)
    I32Ctz,
    /// 0x69 `i32.popcnt` (MVP)
    I32Popcnt,
    /// 0x6A `i32.add` (MVP)
    I32Add,
    /// 0x6B `i32.sub` (MVP)
    I32Sub,
    /// 0x6C `i32.mul` (MVP)
    I32Mul,
    /// 0x6D `i32.div_s` (MVP)
    I32DivS,
    /// 0x6E `i32.div_u` (MVP)
    I32DivU,
    /// 0x6F `i32.rem_s` (MVP)
    I32RemS,
    /// 0x70 `i32.rem_u` (MVP)
    I32RemU,
    /// 0x71 `i32.and` (MVP)
    I32And,
    /// 0x72 `i32.or` (MVP)
    I32Or,
    /// 0x73 `i32.xor` (MVP)
    I32Xor,
    /// 0x74 `i32.shl` (MVP)
    I32Shl,
    /// 0x75 `i32.shr_s` (MVP)
    I32ShrS,
    /// 0x76 `i32.shr_u` (MVP)
    I32ShrU,
    /// 0x77 `i32.rotl` (MVP)
    I32Rotl,
    /// 0x78 `i32.rotr` (MVP)
    I32Rotr,
    /// 0x79 `i64.clz` (MVP)
    I64Clz,
    /// 0x7A `i64.ctz` (MVP)
    I64Ctz,
    /// 0x7B `i64.popcnt` (MVP)
    I64Popcnt,
    /// 0x7C `i64.add` (MVP)
    I64Add,
    /// 0x7D `i64.sub` (MVP)
    I64Sub,
    /// 0x7E `i64.mul` (MVP)
    I64Mul,
    /// 0x7F `i64.div_s` (MVP)
    I64DivS,
    /// 0x80 `i64.div_u` (MVP)
    I64DivU,
    /// 0x81 `i64.rem_s` (MVP)
    I64RemS,
    /// 0x82 `i64.rem_u` (MVP)
    I64RemU,
    /// 0x83 `i64.and` (MVP)
    I64And,
    /// 0x84 `i64.or` (MVP)
    I64Or,
    /// 0x85 `i64.xor` (MVP)
    I64Xor,
    /// 0x86 `i64.shl` (MVP)
    I64Shl,
    /// 0x87 `i64.shr_s` (MVP)
    I64ShrS,
    /// 0x88 `i64.shr_u` (MVP)
    I64ShrU,
    /// 0x89 `i64.rotl` (MVP)
    I64Rotl,
    /// 0x8A `i64.rotr` (MVP)
    I64Rotr,
    /// 0x8B `f32.abs` (MVP)
    F32Abs,
    /// 0x8C `f32.neg` (MVP)
    F32Neg,
    /// 0x8D `f32.ceil` (MVP)
    F32Ceil,
    /// 0x8E `f32.floor` (MVP)
    F32Floor,
    /// 0x8F `f32.trunc` (MVP)
    F32Trunc,
    /// 0x90 `f32.nearest` (MVP)
    F32Nearest,
    /// 0x91 `f32.sqrt` (MVP)
    F32Sqrt,
    /// 0x92 `f32.add` (MVP)
    F32Add,
    /// 0x93 `f32.sub` (MVP)
    F32Sub,
    /// 0x94 `f32.mul` (MVP)
    F32Mul,
    /// 0x95 `f32.div` (MVP)
    F32Div,
    /// 0x96 `f32.min` (MVP)
    F32Min,
    /// 0x97 `f32.max` (MVP)
    F32Max,
    /// 0x98 `f32.copysign` (MVP)
    F32Copysign,
    /// 0x99 `f64.abs` (MVP)
    F64Abs,
    /// 0x9A `f64.neg` (MVP)
    F64Neg,
    /// 0x9B `f64.ceil` (MVP)
    F64Ceil,
    /// 0x9C `f64.floor` (MVP)
    F64Floor,
    /// 0x9D `f64.trunc` (MVP)
    F64Trunc,
    /// 0x9E `f64.nearest` (MVP)
    F64Nearest,
    /// 0x9F `f64.sqrt` (MVP)
    F64Sqrt,
    /// 0xA0 `f64.add` (MVP)
    F64Add,
    /// 0xA1 `f64.sub` (MVP)
    F64Sub,
    /// 0xA2 `f64.mul` (MVP)
    F64Mul,
    /// 0xA3 `f64.div` (MVP)
    F64Div,
    /// 0xA4 `f64.min` (MVP)
    F64Min,
    /// 0xA5 `f64.max` (MVP)
    F64Max,
    /// 0xA6 `f64.copysign` (MVP)
    F64Copysign,
    /// 0xA7 `i32.wrap_i64` (MVP)
    I32WrapI64,
    /// 0xA8 `i32.trunc_f32_s` (MVP)
    I32TruncF32S,
    /// 0xA9 `i32.trunc_f32_u` (MVP)
    I32TruncF32U,
    /// 0xAA `i32.trunc_f64_s` (MVP)
    I32TruncF64S,
    /// 0xAB `i32.trunc_f64_u` (MVP)
    I32TruncF64U,
    /// 0xAC `i64.extend_i32_s` (MVP)
    I64ExtendI32S,
    /// 0xAD `i64.extend_i32_u` (MVP)
    I64ExtendI32U,
    /// 0xAE `i64.trunc_f32_s` (MVP)
    I64TruncF32S,
    /// 0xAF `i64.trunc_f32_u` (MVP)
    I64TruncF32U,
    /// 0xB0 `i64.trunc_f64_s` (MVP)
    I64TruncF64S,
    /// 0xB1 `i64.trunc_f64_u` (MVP)
    I64TruncF64U,
    /// 0xB2 `f32.convert_i32_s` (MVP)
    F32ConvertI32S,
    /// 0xB3 `f32.convert_i32_u` (MVP)
    F32ConvertI32U,
    /// 0xB4 `f32.convert_i64_s` (MVP)
    F32ConvertI64S,
    /// 0xB5 `f32.convert_i64_u` (MVP)
    F32ConvertI64U,
    /// 0xB6 `f32.demote_f64` (MVP)
    F32DemoteF64,
    /// 0xB7 `f64.convert_i32_s` (MVP)
    F64ConvertI32S,
    /// 0xB8 `f64.convert_i32_u` (MVP)
    F64ConvertI32U,
    /// 0xB9 `f64.convert_i64_s` (MVP)
    F64ConvertI64S,
    /// 0xBA `f64.convert_i64_u` (MVP)
    F64ConvertI64U,
    /// 0xBB `f64.promote_f32` (MVP)
    F64PromoteF32,
    /// 0xBC `i32.reinterpret_f32` (MVP)
    I32ReinterpretF32,
    /// 0xBD `i64.reinterpret_f64` (MVP)
    I64ReinterpretF64,
    /// 0xBE `f32.reinterpret_i32` (MVP)
    F32ReinterpretI32,
    /// 0xBF `f64.reinterpret_i64` (MVP)
    F64ReinterpretI64,
    /// 0xC0 `i32.extend8_s` (SignExtension)
    I32Extend8S,
    /// 0xC1 `i32.extend16_s` (SignExtension)
    I32Extend16S,
    /// 0xC2 `i64.extend8_s` (SignExtension)
    I64Extend8S,
    /// 0xC3 `i64.extend16_s` (SignExtension)
    I64Extend16S,
    /// 0xC4 `i64.extend32_s` (SignExtension)
    I64Extend32S,
    /// 0xD0 `ref.null` u32 (ReferenceTypes)
    RefNull(u32),
    /// 0xD1 `ref.is_null` (ReferenceTypes)
    RefIsNull,
    /// 0xD2 `ref.func` u32 (ReferenceTypes)
    RefFunc(u32),
    /// 0xD3 `ref.as_non_null` (TypedFunctionReferences)
    RefAsNonNull,
    /// 0xD4 `br_on_null` (TypedFunctionReferences)
    BrOnNull,
    /// 0xD5 `ref.eq` u32 (TypedFunctionReferences)
    RefEq(u32),
    /// 0xD6 `br_on_non_null` u32 (TypedFunctionReferences)
    BrOnNonNull(u32),
    /// 0xFB 0x00 `struct.new` u32 (Gc)
    StructNew(u32),
    /// 0xFB 0x01 `struct.new_default` u32 (Gc)
    StructNewDefault(u32),
    /// 0xFB 0x02 `struct.get` u32 u32 (Gc)
    StructGet(u32, u32),
    /// 0xFB 0x03 `struct.get_s` u32 u32 (Gc)
    StructGetS(u32, u32),
    /// 0xFB 0x04 `struct.get_u` u32 u32 (Gc)
    StructGetU(u32, u32),
    /// 0xFB 0x05 `struct.set` u32 u32 (Gc)
    StructSet(u32, u32),
    /// 0xFB 0x06 `array.new` u32 (Gc)
    ArrayNew(u32),
    /// 0xFB 0x07 `array.new_default` u32 (Gc)
    ArrayNewDefault(u32),
    /// 0xFB 0x08 `array.new_fixed` u32 u32 (Gc)
    ArrayNewFixed(u32, u32),
    /// 0xFB 0x09 `array.new_data` u32 u32 (Gc)
    ArrayNewData(u32, u32),
    /// 0xFB 0x0A `array.new_elem` u32 u32 (Gc)
    ArrayNewElem(u32, u32),
    /// 0xFB 0x0B `array.get` u32 (Gc)
    ArrayGet(u32),
    /// 0xFB 0x0C `array.get_s` u32 (Gc)
    ArrayGetS(u32),
    /// 0xFB 0x0D `array.get_u` u32 (Gc)
    ArrayGetU(u32),
    /// 0xFB 0x0E `array.set` u32 (Gc)
    ArraySet(u32),
    /// 0xFB 0x0F `array.len` (Gc)
    ArrayLen,
    /// 0xFB 0x10 `array.fill` u32 (Gc)
    ArrayFill(u32),
    /// 0xFB 0x11 `array.copy` u32 u32 (Gc)
    ArrayCopy(u32, u32),
    /// 0xFB 0x12 `array.init_data` u32 u32 (Gc)
    ArrayInitData(u32, u32),
    /// 0xFB 0x13 `array.init_elem` u32 u32 (Gc)
    ArrayInitElem(u32, u32),
    /// 0xFB 0x14 `ref.test (ref ht)` u32 (Gc)
    RefTestRefHt(u32),
    /// 0xFB 0x15 `ref.test (ref null ht)` u32 (Gc)
    RefTestRefNullHt(u32),
    /// 0xFB 0x16 `ref.cast (ref ht)` u32 (Gc)
    RefCastRefHt(u32),
    /// 0xFB 0x17 `ref.cast (ref null ht)` u32 (Gc)
    RefCastRefNullHt(u32),
    /// 0xFB 0x18 `br_on_cast` u8 u32 (Gc)
    BrOnCast(u8, u32),
    /// 0xFB 0x19 `br_on_cast_fail` u8 u32 (Gc)
    BrOnCastFail(u8, u32),
    /// 0xFB 0x1A `any.convert_extern` (Gc)
    AnyConvertExtern,
    /// 0xFB 0x1B `extern.convert_any` (Gc)
    ExternConvertAny,
    /// 0xFB 0x1C `ref.i31` (Gc)
    RefI31,
    /// 0xFB 0x1D `i31.get_s` (Gc)
    I31GetS,
    /// 0xFB 0x1E `i31.get_u` (Gc)
    I31GetU,
    /// 0xFC 0x00 `i32.trunc_sat_f32_s` (NonTrappingFloatToIntConversion)
    I32TruncSatF32S,
    /// 0xFC 0x01 `i32.trunc_sat_f32_u` (NonTrappingFloatToIntConversion)
    I32TruncSatF32U,
    /// 0xFC 0x02 `i32.trunc_sat_f64_s` (NonTrappingFloatToIntConversion)
    I32TruncSatF64S,
    /// 0xFC 0x03 `i32.trunc_sat_f64_u` (NonTrappingFloatToIntConversion)
    I32TruncSatF64U,
    /// 0xFC 0x04 `i64.trunc_sat_f32_s` (NonTrappingFloatToIntConversion)
    I64TruncSatF32S,
    /// 0xFC 0x05 `i64.trunc_sat_f32_u` (NonTrappingFloatToIntConversion)
    I64TruncSatF32U,
    /// 0xFC 0x06 `i64.trunc_sat_f64_s` (NonTrappingFloatToIntConversion)
    I64TruncSatF64S,
    /// 0xFC 0x07 `i64.trunc_sat_f64_u` (NonTrappingFloatToIntConversion)
    I64TruncSatF64U,
    /// 0xFC 0x08 `memory.init` u32 (BulkMemoryOperations)
    MemoryInit(u32),
    /// 0xFC 0x09 `data.drop` u32 (BulkMemoryOperations)
    DataDrop(u32),
    /// 0xFC 0x0A `memory.copy` (BulkMemoryOperations)
    MemoryCopy,
    /// 0xFC 0x0B `memory.fill` (BulkMemoryOperations)
    MemoryFill,
    /// 0xFC 0x0C `table.init` u32 u32 (BulkMemoryOperations)
    TableInit(u32, u32),
    /// 0xFC 0x0D `elem.drop` u32 (BulkMemoryOperations)
    ElemDrop(u32),
    /// 0xFC 0x0E `table.copy` u32 u32 (BulkMemoryOperations)
    TableCopy(u32, u32),
    /// 0xFC 0x0F `table.grow` u32 (ReferenceTypes)
    TableGrow(u32),
    /// 0xFC 0x10 `table.size` u32 (ReferenceTypes)
    TableSize(u32),
    /// 0xFC 0x11 `table.fill` u32 (ReferenceTypes)
    TableFill(u32),
}

impl WasmOpcode {
    pub fn fetch(reader: &mut Leb128Reader) -> Result<Self, WasmCompileErrorKind> {
        let leading = reader.read_byte()?;
        match leading {
            // 0x00 `unreachable` (MVP)
            0x00 => Ok(Self::Unreachable),

            // 0x01 `nop` (MVP)
            0x01 => Ok(Self::Nop),

            // 0x02 `block` bt (MVP)
            0x02 => Ok(Self::Block(reader.read()?)),

            // 0x03 `loop` bt (MVP)
            0x03 => Ok(Self::Loop(reader.read()?)),

            // 0x04 `if` bt (MVP)
            0x04 => Ok(Self::If(reader.read()?)),

            // 0x05 `else` (MVP)
            0x05 => Ok(Self::Else),

            // 0x0B `end` (MVP)
            0x0B => Ok(Self::End),

            // 0x0C `br` u32 (MVP)
            0x0C => Ok(Self::Br(reader.read()?)),

            // 0x0D `br_if` u32 (MVP)
            0x0D => Ok(Self::BrIf(reader.read()?)),

            // 0x0E `br_table` br_table (MVP)
            0x0E => Ok(Self::BrTable(reader.read()?)),

            // 0x0F `return` (MVP)
            0x0F => Ok(Self::Return),

            // 0x10 `call` u32 (MVP)
            0x10 => Ok(Self::Call(reader.read()?)),

            // 0x11 `call_indirect` u32 u32 (MVP)
            0x11 => {
                let a1 = reader.read()?;
                let a2 = reader.read()?;
                Ok(Self::CallIndirect(a1, a2))
            }

            // 0x12 `return_call` (TailCall)
            0x12 => Ok(Self::ReturnCall),

            // 0x13 `return_call_indirect` (TailCall)
            0x13 => Ok(Self::ReturnCallIndirect),

            // 0x14 `call_ref` (TypedFunctionReferences)
            0x14 => Ok(Self::CallRef),

            // 0x15 `return_call_ref` (TypedFunctionReferences)
            0x15 => Ok(Self::ReturnCallRef),

            // 0x1A `drop` (MVP)
            0x1A => Ok(Self::Drop),

            // 0x1B `select` (MVP)
            0x1B => Ok(Self::Select),

            // 0x1C `select_t` u32 (ReferenceTypes)
            0x1C => Ok(Self::SelectT(reader.read()?)),

            // 0x20 `local.get` u32 (MVP)
            0x20 => Ok(Self::LocalGet(reader.read()?)),

            // 0x21 `local.set` u32 (MVP)
            0x21 => Ok(Self::LocalSet(reader.read()?)),

            // 0x22 `local.tee` u32 (MVP)
            0x22 => Ok(Self::LocalTee(reader.read()?)),

            // 0x23 `global.get` u32 (MVP)
            0x23 => Ok(Self::GlobalGet(reader.read()?)),

            // 0x24 `global.set` u32 (MVP)
            0x24 => Ok(Self::GlobalSet(reader.read()?)),

            // 0x25 `table.get` u32 (ReferenceTypes)
            0x25 => Ok(Self::TableGet(reader.read()?)),

            // 0x26 `table.set` u32 (ReferenceTypes)
            0x26 => Ok(Self::TableSet(reader.read()?)),

            // 0x28 `i32.load` memarg (MVP)
            0x28 => Ok(Self::I32Load(reader.read()?)),

            // 0x29 `i64.load` memarg (MVP)
            0x29 => Ok(Self::I64Load(reader.read()?)),

            // 0x2A `f32.load` memarg (MVP)
            0x2A => Ok(Self::F32Load(reader.read()?)),

            // 0x2B `f64.load` memarg (MVP)
            0x2B => Ok(Self::F64Load(reader.read()?)),

            // 0x2C `i32.load8_s` memarg (MVP)
            0x2C => Ok(Self::I32Load8S(reader.read()?)),

            // 0x2D `i32.load8_u` memarg (MVP)
            0x2D => Ok(Self::I32Load8U(reader.read()?)),

            // 0x2E `i32.load16_s` memarg (MVP)
            0x2E => Ok(Self::I32Load16S(reader.read()?)),

            // 0x2F `i32.load16_u` memarg (MVP)
            0x2F => Ok(Self::I32Load16U(reader.read()?)),

            // 0x30 `i64.load8_s` memarg (MVP)
            0x30 => Ok(Self::I64Load8S(reader.read()?)),

            // 0x31 `i64.load8_u` memarg (MVP)
            0x31 => Ok(Self::I64Load8U(reader.read()?)),

            // 0x32 `i64.load16_s` memarg (MVP)
            0x32 => Ok(Self::I64Load16S(reader.read()?)),

            // 0x33 `i64.load16_u` memarg (MVP)
            0x33 => Ok(Self::I64Load16U(reader.read()?)),

            // 0x34 `i64.load32_s` memarg (MVP)
            0x34 => Ok(Self::I64Load32S(reader.read()?)),

            // 0x35 `i64.load32_u` memarg (MVP)
            0x35 => Ok(Self::I64Load32U(reader.read()?)),

            // 0x36 `i32.store` memarg (MVP)
            0x36 => Ok(Self::I32Store(reader.read()?)),

            // 0x37 `i64.store` memarg (MVP)
            0x37 => Ok(Self::I64Store(reader.read()?)),

            // 0x38 `f32.store` memarg (MVP)
            0x38 => Ok(Self::F32Store(reader.read()?)),

            // 0x39 `f64.store` memarg (MVP)
            0x39 => Ok(Self::F64Store(reader.read()?)),

            // 0x3A `i32.store8` memarg (MVP)
            0x3A => Ok(Self::I32Store8(reader.read()?)),

            // 0x3B `i32.store16` memarg (MVP)
            0x3B => Ok(Self::I32Store16(reader.read()?)),

            // 0x3C `i64.store8` memarg (MVP)
            0x3C => Ok(Self::I64Store8(reader.read()?)),

            // 0x3D `i64.store16` memarg (MVP)
            0x3D => Ok(Self::I64Store16(reader.read()?)),

            // 0x3E `i64.store32` memarg (MVP)
            0x3E => Ok(Self::I64Store32(reader.read()?)),

            // 0x3F `memory.size` u32 (MVP)
            0x3F => Ok(Self::MemorySize(reader.read()?)),

            // 0x40 `memory.grow` u32 (MVP)
            0x40 => Ok(Self::MemoryGrow(reader.read()?)),

            // 0x41 `i32.const` i32 (MVP)
            0x41 => Ok(Self::I32Const(reader.read()?)),

            // 0x42 `i64.const` i64 (MVP)
            0x42 => Ok(Self::I64Const(reader.read()?)),

            // 0x43 `f32.const` f32 (MVP)
            0x43 => Ok(Self::F32Const(reader.read()?)),

            // 0x44 `f64.const` f64 (MVP)
            0x44 => Ok(Self::F64Const(reader.read()?)),

            // 0x45 `i32.eqz` (MVP)
            0x45 => Ok(Self::I32Eqz),

            // 0x46 `i32.eq` (MVP)
            0x46 => Ok(Self::I32Eq),

            // 0x47 `i32.ne` (MVP)
            0x47 => Ok(Self::I32Ne),

            // 0x48 `i32.lt_s` (MVP)
            0x48 => Ok(Self::I32LtS),

            // 0x49 `i32.lt_u` (MVP)
            0x49 => Ok(Self::I32LtU),

            // 0x4A `i32.gt_s` (MVP)
            0x4A => Ok(Self::I32GtS),

            // 0x4B `i32.gt_u` (MVP)
            0x4B => Ok(Self::I32GtU),

            // 0x4C `i32.le_s` (MVP)
            0x4C => Ok(Self::I32LeS),

            // 0x4D `i32.le_u` (MVP)
            0x4D => Ok(Self::I32LeU),

            // 0x4E `i32.ge_s` (MVP)
            0x4E => Ok(Self::I32GeS),

            // 0x4F `i32.ge_u` (MVP)
            0x4F => Ok(Self::I32GeU),

            // 0x50 `i64.eqz` (MVP)
            0x50 => Ok(Self::I64Eqz),

            // 0x51 `i64.eq` (MVP)
            0x51 => Ok(Self::I64Eq),

            // 0x52 `i64.ne` (MVP)
            0x52 => Ok(Self::I64Ne),

            // 0x53 `i64.lt_s` (MVP)
            0x53 => Ok(Self::I64LtS),

            // 0x54 `i64.lt_u` (MVP)
            0x54 => Ok(Self::I64LtU),

            // 0x55 `i64.gt_s` (MVP)
            0x55 => Ok(Self::I64GtS),

            // 0x56 `i64.gt_u` (MVP)
            0x56 => Ok(Self::I64GtU),

            // 0x57 `i64.le_s` (MVP)
            0x57 => Ok(Self::I64LeS),

            // 0x58 `i64.le_u` (MVP)
            0x58 => Ok(Self::I64LeU),

            // 0x59 `i64.ge_s` (MVP)
            0x59 => Ok(Self::I64GeS),

            // 0x5A `i64.ge_u` (MVP)
            0x5A => Ok(Self::I64GeU),

            // 0x5B `f32.eq` (MVP)
            0x5B => Ok(Self::F32Eq),

            // 0x5C `f32.ne` (MVP)
            0x5C => Ok(Self::F32Ne),

            // 0x5D `f32.lt` (MVP)
            0x5D => Ok(Self::F32Lt),

            // 0x5E `f32.gt` (MVP)
            0x5E => Ok(Self::F32Gt),

            // 0x5F `f32.le` (MVP)
            0x5F => Ok(Self::F32Le),

            // 0x60 `f32.ge` (MVP)
            0x60 => Ok(Self::F32Ge),

            // 0x61 `f64.eq` (MVP)
            0x61 => Ok(Self::F64Eq),

            // 0x62 `f64.ne` (MVP)
            0x62 => Ok(Self::F64Ne),

            // 0x63 `f64.lt` (MVP)
            0x63 => Ok(Self::F64Lt),

            // 0x64 `f64.gt` (MVP)
            0x64 => Ok(Self::F64Gt),

            // 0x65 `f64.le` (MVP)
            0x65 => Ok(Self::F64Le),

            // 0x66 `f64.ge` (MVP)
            0x66 => Ok(Self::F64Ge),

            // 0x67 `i32.clz` (MVP)
            0x67 => Ok(Self::I32Clz),

            // 0x68 `i32.ctz` (MVP)
            0x68 => Ok(Self::I32Ctz),

            // 0x69 `i32.popcnt` (MVP)
            0x69 => Ok(Self::I32Popcnt),

            // 0x6A `i32.add` (MVP)
            0x6A => Ok(Self::I32Add),

            // 0x6B `i32.sub` (MVP)
            0x6B => Ok(Self::I32Sub),

            // 0x6C `i32.mul` (MVP)
            0x6C => Ok(Self::I32Mul),

            // 0x6D `i32.div_s` (MVP)
            0x6D => Ok(Self::I32DivS),

            // 0x6E `i32.div_u` (MVP)
            0x6E => Ok(Self::I32DivU),

            // 0x6F `i32.rem_s` (MVP)
            0x6F => Ok(Self::I32RemS),

            // 0x70 `i32.rem_u` (MVP)
            0x70 => Ok(Self::I32RemU),

            // 0x71 `i32.and` (MVP)
            0x71 => Ok(Self::I32And),

            // 0x72 `i32.or` (MVP)
            0x72 => Ok(Self::I32Or),

            // 0x73 `i32.xor` (MVP)
            0x73 => Ok(Self::I32Xor),

            // 0x74 `i32.shl` (MVP)
            0x74 => Ok(Self::I32Shl),

            // 0x75 `i32.shr_s` (MVP)
            0x75 => Ok(Self::I32ShrS),

            // 0x76 `i32.shr_u` (MVP)
            0x76 => Ok(Self::I32ShrU),

            // 0x77 `i32.rotl` (MVP)
            0x77 => Ok(Self::I32Rotl),

            // 0x78 `i32.rotr` (MVP)
            0x78 => Ok(Self::I32Rotr),

            // 0x79 `i64.clz` (MVP)
            0x79 => Ok(Self::I64Clz),

            // 0x7A `i64.ctz` (MVP)
            0x7A => Ok(Self::I64Ctz),

            // 0x7B `i64.popcnt` (MVP)
            0x7B => Ok(Self::I64Popcnt),

            // 0x7C `i64.add` (MVP)
            0x7C => Ok(Self::I64Add),

            // 0x7D `i64.sub` (MVP)
            0x7D => Ok(Self::I64Sub),

            // 0x7E `i64.mul` (MVP)
            0x7E => Ok(Self::I64Mul),

            // 0x7F `i64.div_s` (MVP)
            0x7F => Ok(Self::I64DivS),

            // 0x80 `i64.div_u` (MVP)
            0x80 => Ok(Self::I64DivU),

            // 0x81 `i64.rem_s` (MVP)
            0x81 => Ok(Self::I64RemS),

            // 0x82 `i64.rem_u` (MVP)
            0x82 => Ok(Self::I64RemU),

            // 0x83 `i64.and` (MVP)
            0x83 => Ok(Self::I64And),

            // 0x84 `i64.or` (MVP)
            0x84 => Ok(Self::I64Or),

            // 0x85 `i64.xor` (MVP)
            0x85 => Ok(Self::I64Xor),

            // 0x86 `i64.shl` (MVP)
            0x86 => Ok(Self::I64Shl),

            // 0x87 `i64.shr_s` (MVP)
            0x87 => Ok(Self::I64ShrS),

            // 0x88 `i64.shr_u` (MVP)
            0x88 => Ok(Self::I64ShrU),

            // 0x89 `i64.rotl` (MVP)
            0x89 => Ok(Self::I64Rotl),

            // 0x8A `i64.rotr` (MVP)
            0x8A => Ok(Self::I64Rotr),

            // 0x8B `f32.abs` (MVP)
            0x8B => Ok(Self::F32Abs),

            // 0x8C `f32.neg` (MVP)
            0x8C => Ok(Self::F32Neg),

            // 0x8D `f32.ceil` (MVP)
            0x8D => Ok(Self::F32Ceil),

            // 0x8E `f32.floor` (MVP)
            0x8E => Ok(Self::F32Floor),

            // 0x8F `f32.trunc` (MVP)
            0x8F => Ok(Self::F32Trunc),

            // 0x90 `f32.nearest` (MVP)
            0x90 => Ok(Self::F32Nearest),

            // 0x91 `f32.sqrt` (MVP)
            0x91 => Ok(Self::F32Sqrt),

            // 0x92 `f32.add` (MVP)
            0x92 => Ok(Self::F32Add),

            // 0x93 `f32.sub` (MVP)
            0x93 => Ok(Self::F32Sub),

            // 0x94 `f32.mul` (MVP)
            0x94 => Ok(Self::F32Mul),

            // 0x95 `f32.div` (MVP)
            0x95 => Ok(Self::F32Div),

            // 0x96 `f32.min` (MVP)
            0x96 => Ok(Self::F32Min),

            // 0x97 `f32.max` (MVP)
            0x97 => Ok(Self::F32Max),

            // 0x98 `f32.copysign` (MVP)
            0x98 => Ok(Self::F32Copysign),

            // 0x99 `f64.abs` (MVP)
            0x99 => Ok(Self::F64Abs),

            // 0x9A `f64.neg` (MVP)
            0x9A => Ok(Self::F64Neg),

            // 0x9B `f64.ceil` (MVP)
            0x9B => Ok(Self::F64Ceil),

            // 0x9C `f64.floor` (MVP)
            0x9C => Ok(Self::F64Floor),

            // 0x9D `f64.trunc` (MVP)
            0x9D => Ok(Self::F64Trunc),

            // 0x9E `f64.nearest` (MVP)
            0x9E => Ok(Self::F64Nearest),

            // 0x9F `f64.sqrt` (MVP)
            0x9F => Ok(Self::F64Sqrt),

            // 0xA0 `f64.add` (MVP)
            0xA0 => Ok(Self::F64Add),

            // 0xA1 `f64.sub` (MVP)
            0xA1 => Ok(Self::F64Sub),

            // 0xA2 `f64.mul` (MVP)
            0xA2 => Ok(Self::F64Mul),

            // 0xA3 `f64.div` (MVP)
            0xA3 => Ok(Self::F64Div),

            // 0xA4 `f64.min` (MVP)
            0xA4 => Ok(Self::F64Min),

            // 0xA5 `f64.max` (MVP)
            0xA5 => Ok(Self::F64Max),

            // 0xA6 `f64.copysign` (MVP)
            0xA6 => Ok(Self::F64Copysign),

            // 0xA7 `i32.wrap_i64` (MVP)
            0xA7 => Ok(Self::I32WrapI64),

            // 0xA8 `i32.trunc_f32_s` (MVP)
            0xA8 => Ok(Self::I32TruncF32S),

            // 0xA9 `i32.trunc_f32_u` (MVP)
            0xA9 => Ok(Self::I32TruncF32U),

            // 0xAA `i32.trunc_f64_s` (MVP)
            0xAA => Ok(Self::I32TruncF64S),

            // 0xAB `i32.trunc_f64_u` (MVP)
            0xAB => Ok(Self::I32TruncF64U),

            // 0xAC `i64.extend_i32_s` (MVP)
            0xAC => Ok(Self::I64ExtendI32S),

            // 0xAD `i64.extend_i32_u` (MVP)
            0xAD => Ok(Self::I64ExtendI32U),

            // 0xAE `i64.trunc_f32_s` (MVP)
            0xAE => Ok(Self::I64TruncF32S),

            // 0xAF `i64.trunc_f32_u` (MVP)
            0xAF => Ok(Self::I64TruncF32U),

            // 0xB0 `i64.trunc_f64_s` (MVP)
            0xB0 => Ok(Self::I64TruncF64S),

            // 0xB1 `i64.trunc_f64_u` (MVP)
            0xB1 => Ok(Self::I64TruncF64U),

            // 0xB2 `f32.convert_i32_s` (MVP)
            0xB2 => Ok(Self::F32ConvertI32S),

            // 0xB3 `f32.convert_i32_u` (MVP)
            0xB3 => Ok(Self::F32ConvertI32U),

            // 0xB4 `f32.convert_i64_s` (MVP)
            0xB4 => Ok(Self::F32ConvertI64S),

            // 0xB5 `f32.convert_i64_u` (MVP)
            0xB5 => Ok(Self::F32ConvertI64U),

            // 0xB6 `f32.demote_f64` (MVP)
            0xB6 => Ok(Self::F32DemoteF64),

            // 0xB7 `f64.convert_i32_s` (MVP)
            0xB7 => Ok(Self::F64ConvertI32S),

            // 0xB8 `f64.convert_i32_u` (MVP)
            0xB8 => Ok(Self::F64ConvertI32U),

            // 0xB9 `f64.convert_i64_s` (MVP)
            0xB9 => Ok(Self::F64ConvertI64S),

            // 0xBA `f64.convert_i64_u` (MVP)
            0xBA => Ok(Self::F64ConvertI64U),

            // 0xBB `f64.promote_f32` (MVP)
            0xBB => Ok(Self::F64PromoteF32),

            // 0xBC `i32.reinterpret_f32` (MVP)
            0xBC => Ok(Self::I32ReinterpretF32),

            // 0xBD `i64.reinterpret_f64` (MVP)
            0xBD => Ok(Self::I64ReinterpretF64),

            // 0xBE `f32.reinterpret_i32` (MVP)
            0xBE => Ok(Self::F32ReinterpretI32),

            // 0xBF `f64.reinterpret_i64` (MVP)
            0xBF => Ok(Self::F64ReinterpretI64),

            // 0xC0 `i32.extend8_s` (SignExtension)
            0xC0 => Ok(Self::I32Extend8S),

            // 0xC1 `i32.extend16_s` (SignExtension)
            0xC1 => Ok(Self::I32Extend16S),

            // 0xC2 `i64.extend8_s` (SignExtension)
            0xC2 => Ok(Self::I64Extend8S),

            // 0xC3 `i64.extend16_s` (SignExtension)
            0xC3 => Ok(Self::I64Extend16S),

            // 0xC4 `i64.extend32_s` (SignExtension)
            0xC4 => Ok(Self::I64Extend32S),

            // 0xD0 `ref.null` u32 (ReferenceTypes)
            0xD0 => Ok(Self::RefNull(reader.read()?)),

            // 0xD1 `ref.is_null` (ReferenceTypes)
            0xD1 => Ok(Self::RefIsNull),

            // 0xD2 `ref.func` u32 (ReferenceTypes)
            0xD2 => Ok(Self::RefFunc(reader.read()?)),

            // 0xD3 `ref.as_non_null` (TypedFunctionReferences)
            0xD3 => Ok(Self::RefAsNonNull),

            // 0xD4 `br_on_null` (TypedFunctionReferences)
            0xD4 => Ok(Self::BrOnNull),

            // 0xD5 `ref.eq` u32 (TypedFunctionReferences)
            0xD5 => Ok(Self::RefEq(reader.read()?)),

            // 0xD6 `br_on_non_null` u32 (TypedFunctionReferences)
            0xD6 => Ok(Self::BrOnNonNull(reader.read()?)),

            0xFB => {
                let trailing: u32 = reader.read()?;
                match trailing {
                    // 0xFB 0x00 `struct.new` u32 (Gc)
                    0x00 => Ok(Self::StructNew(reader.read()?)),

                    // 0xFB 0x01 `struct.new_default` u32 (Gc)
                    0x01 => Ok(Self::StructNewDefault(reader.read()?)),

                    // 0xFB 0x02 `struct.get` u32 u32 (Gc)
                    0x02 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::StructGet(a1, a2))
                    }

                    // 0xFB 0x03 `struct.get_s` u32 u32 (Gc)
                    0x03 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::StructGetS(a1, a2))
                    }

                    // 0xFB 0x04 `struct.get_u` u32 u32 (Gc)
                    0x04 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::StructGetU(a1, a2))
                    }

                    // 0xFB 0x05 `struct.set` u32 u32 (Gc)
                    0x05 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::StructSet(a1, a2))
                    }

                    // 0xFB 0x06 `array.new` u32 (Gc)
                    0x06 => Ok(Self::ArrayNew(reader.read()?)),

                    // 0xFB 0x07 `array.new_default` u32 (Gc)
                    0x07 => Ok(Self::ArrayNewDefault(reader.read()?)),

                    // 0xFB 0x08 `array.new_fixed` u32 u32 (Gc)
                    0x08 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::ArrayNewFixed(a1, a2))
                    }

                    // 0xFB 0x09 `array.new_data` u32 u32 (Gc)
                    0x09 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::ArrayNewData(a1, a2))
                    }

                    // 0xFB 0x0A `array.new_elem` u32 u32 (Gc)
                    0x0a => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::ArrayNewElem(a1, a2))
                    }

                    // 0xFB 0x0B `array.get` u32 (Gc)
                    0x0b => Ok(Self::ArrayGet(reader.read()?)),

                    // 0xFB 0x0C `array.get_s` u32 (Gc)
                    0x0c => Ok(Self::ArrayGetS(reader.read()?)),

                    // 0xFB 0x0D `array.get_u` u32 (Gc)
                    0x0d => Ok(Self::ArrayGetU(reader.read()?)),

                    // 0xFB 0x0E `array.set` u32 (Gc)
                    0x0e => Ok(Self::ArraySet(reader.read()?)),

                    // 0xFB 0x0F `array.len` (Gc)
                    0x0f => Ok(Self::ArrayLen),

                    // 0xFB 0x10 `array.fill` u32 (Gc)
                    0x10 => Ok(Self::ArrayFill(reader.read()?)),

                    // 0xFB 0x11 `array.copy` u32 u32 (Gc)
                    0x11 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::ArrayCopy(a1, a2))
                    }

                    // 0xFB 0x12 `array.init_data` u32 u32 (Gc)
                    0x12 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::ArrayInitData(a1, a2))
                    }

                    // 0xFB 0x13 `array.init_elem` u32 u32 (Gc)
                    0x13 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::ArrayInitElem(a1, a2))
                    }

                    // 0xFB 0x14 `ref.test (ref ht)` u32 (Gc)
                    0x14 => Ok(Self::RefTestRefHt(reader.read()?)),

                    // 0xFB 0x15 `ref.test (ref null ht)` u32 (Gc)
                    0x15 => Ok(Self::RefTestRefNullHt(reader.read()?)),

                    // 0xFB 0x16 `ref.cast (ref ht)` u32 (Gc)
                    0x16 => Ok(Self::RefCastRefHt(reader.read()?)),

                    // 0xFB 0x17 `ref.cast (ref null ht)` u32 (Gc)
                    0x17 => Ok(Self::RefCastRefNullHt(reader.read()?)),

                    // 0xFB 0x18 `br_on_cast` u8 u32 (Gc)
                    0x18 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::BrOnCast(a1, a2))
                    }

                    // 0xFB 0x19 `br_on_cast_fail` u8 u32 (Gc)
                    0x19 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::BrOnCastFail(a1, a2))
                    }

                    // 0xFB 0x1A `any.convert_extern` (Gc)
                    0x1a => Ok(Self::AnyConvertExtern),

                    // 0xFB 0x1B `extern.convert_any` (Gc)
                    0x1b => Ok(Self::ExternConvertAny),

                    // 0xFB 0x1C `ref.i31` (Gc)
                    0x1c => Ok(Self::RefI31),

                    // 0xFB 0x1D `i31.get_s` (Gc)
                    0x1d => Ok(Self::I31GetS),

                    // 0xFB 0x1E `i31.get_u` (Gc)
                    0x1e => Ok(Self::I31GetU),

                    _ => Err(WasmCompileErrorKind::InvalidBytecode2(leading, trailing))
                }
            }
            0xFC => {
                let trailing: u32 = reader.read()?;
                match trailing {
                    // 0xFC 0x00 `i32.trunc_sat_f32_s` (NonTrappingFloatToIntConversion)
                    0x00 => Ok(Self::I32TruncSatF32S),

                    // 0xFC 0x01 `i32.trunc_sat_f32_u` (NonTrappingFloatToIntConversion)
                    0x01 => Ok(Self::I32TruncSatF32U),

                    // 0xFC 0x02 `i32.trunc_sat_f64_s` (NonTrappingFloatToIntConversion)
                    0x02 => Ok(Self::I32TruncSatF64S),

                    // 0xFC 0x03 `i32.trunc_sat_f64_u` (NonTrappingFloatToIntConversion)
                    0x03 => Ok(Self::I32TruncSatF64U),

                    // 0xFC 0x04 `i64.trunc_sat_f32_s` (NonTrappingFloatToIntConversion)
                    0x04 => Ok(Self::I64TruncSatF32S),

                    // 0xFC 0x05 `i64.trunc_sat_f32_u` (NonTrappingFloatToIntConversion)
                    0x05 => Ok(Self::I64TruncSatF32U),

                    // 0xFC 0x06 `i64.trunc_sat_f64_s` (NonTrappingFloatToIntConversion)
                    0x06 => Ok(Self::I64TruncSatF64S),

                    // 0xFC 0x07 `i64.trunc_sat_f64_u` (NonTrappingFloatToIntConversion)
                    0x07 => Ok(Self::I64TruncSatF64U),

                    // 0xFC 0x08 `memory.init` u32 (BulkMemoryOperations)
                    0x08 => Ok(Self::MemoryInit(reader.read()?)),

                    // 0xFC 0x09 `data.drop` u32 (BulkMemoryOperations)
                    0x09 => Ok(Self::DataDrop(reader.read()?)),

                    // 0xFC 0x0A `memory.copy` (BulkMemoryOperations)
                    0x0a => Ok(Self::MemoryCopy),

                    // 0xFC 0x0B `memory.fill` (BulkMemoryOperations)
                    0x0b => Ok(Self::MemoryFill),

                    // 0xFC 0x0C `table.init` u32 u32 (BulkMemoryOperations)
                    0x0c => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::TableInit(a1, a2))
                    }

                    // 0xFC 0x0D `elem.drop` u32 (BulkMemoryOperations)
                    0x0d => Ok(Self::ElemDrop(reader.read()?)),

                    // 0xFC 0x0E `table.copy` u32 u32 (BulkMemoryOperations)
                    0x0e => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::TableCopy(a1, a2))
                    }

                    // 0xFC 0x0F `table.grow` u32 (ReferenceTypes)
                    0x0f => Ok(Self::TableGrow(reader.read()?)),

                    // 0xFC 0x10 `table.size` u32 (ReferenceTypes)
                    0x10 => Ok(Self::TableSize(reader.read()?)),

                    // 0xFC 0x11 `table.fill` u32 (ReferenceTypes)
                    0x11 => Ok(Self::TableFill(reader.read()?)),

                    _ => Err(WasmCompileErrorKind::InvalidBytecode2(leading, trailing))
                }
            }
            _ => Err(WasmCompileErrorKind::InvalidBytecode(leading))
        }
    }

    #[inline]
    pub const fn as_str(&self) -> &'static str {
        self.mnemonic().as_str()
    }

    pub const fn mnemonic(&self) -> WasmMnemonic {
        match self {
            Self::AnyConvertExtern => WasmMnemonic::AnyConvertExtern,
            Self::ArrayCopy(_, _) => WasmMnemonic::ArrayCopy,
            Self::ArrayFill(_) => WasmMnemonic::ArrayFill,
            Self::ArrayGet(_) => WasmMnemonic::ArrayGet,
            Self::ArrayGetS(_) => WasmMnemonic::ArrayGetS,
            Self::ArrayGetU(_) => WasmMnemonic::ArrayGetU,
            Self::ArrayInitData(_, _) => WasmMnemonic::ArrayInitData,
            Self::ArrayInitElem(_, _) => WasmMnemonic::ArrayInitElem,
            Self::ArrayLen => WasmMnemonic::ArrayLen,
            Self::ArrayNew(_) => WasmMnemonic::ArrayNew,
            Self::ArrayNewData(_, _) => WasmMnemonic::ArrayNewData,
            Self::ArrayNewDefault(_) => WasmMnemonic::ArrayNewDefault,
            Self::ArrayNewElem(_, _) => WasmMnemonic::ArrayNewElem,
            Self::ArrayNewFixed(_, _) => WasmMnemonic::ArrayNewFixed,
            Self::ArraySet(_) => WasmMnemonic::ArraySet,
            Self::Block(_) => WasmMnemonic::Block,
            Self::Br(_) => WasmMnemonic::Br,
            Self::BrIf(_) => WasmMnemonic::BrIf,
            Self::BrOnCast(_, _) => WasmMnemonic::BrOnCast,
            Self::BrOnCastFail(_, _) => WasmMnemonic::BrOnCastFail,
            Self::BrOnNonNull(_) => WasmMnemonic::BrOnNonNull,
            Self::BrOnNull => WasmMnemonic::BrOnNull,
            Self::BrTable(_) => WasmMnemonic::BrTable,
            Self::Call(_) => WasmMnemonic::Call,
            Self::CallIndirect(_, _) => WasmMnemonic::CallIndirect,
            Self::CallRef => WasmMnemonic::CallRef,
            Self::DataDrop(_) => WasmMnemonic::DataDrop,
            Self::Drop => WasmMnemonic::Drop,
            Self::ElemDrop(_) => WasmMnemonic::ElemDrop,
            Self::Else => WasmMnemonic::Else,
            Self::End => WasmMnemonic::End,
            Self::ExternConvertAny => WasmMnemonic::ExternConvertAny,
            Self::F32Abs => WasmMnemonic::F32Abs,
            Self::F32Add => WasmMnemonic::F32Add,
            Self::F32Ceil => WasmMnemonic::F32Ceil,
            Self::F32Const(_) => WasmMnemonic::F32Const,
            Self::F32ConvertI32S => WasmMnemonic::F32ConvertI32S,
            Self::F32ConvertI32U => WasmMnemonic::F32ConvertI32U,
            Self::F32ConvertI64S => WasmMnemonic::F32ConvertI64S,
            Self::F32ConvertI64U => WasmMnemonic::F32ConvertI64U,
            Self::F32Copysign => WasmMnemonic::F32Copysign,
            Self::F32DemoteF64 => WasmMnemonic::F32DemoteF64,
            Self::F32Div => WasmMnemonic::F32Div,
            Self::F32Eq => WasmMnemonic::F32Eq,
            Self::F32Floor => WasmMnemonic::F32Floor,
            Self::F32Ge => WasmMnemonic::F32Ge,
            Self::F32Gt => WasmMnemonic::F32Gt,
            Self::F32Le => WasmMnemonic::F32Le,
            Self::F32Load(_) => WasmMnemonic::F32Load,
            Self::F32Lt => WasmMnemonic::F32Lt,
            Self::F32Max => WasmMnemonic::F32Max,
            Self::F32Min => WasmMnemonic::F32Min,
            Self::F32Mul => WasmMnemonic::F32Mul,
            Self::F32Ne => WasmMnemonic::F32Ne,
            Self::F32Nearest => WasmMnemonic::F32Nearest,
            Self::F32Neg => WasmMnemonic::F32Neg,
            Self::F32ReinterpretI32 => WasmMnemonic::F32ReinterpretI32,
            Self::F32Sqrt => WasmMnemonic::F32Sqrt,
            Self::F32Store(_) => WasmMnemonic::F32Store,
            Self::F32Sub => WasmMnemonic::F32Sub,
            Self::F32Trunc => WasmMnemonic::F32Trunc,
            Self::F64Abs => WasmMnemonic::F64Abs,
            Self::F64Add => WasmMnemonic::F64Add,
            Self::F64Ceil => WasmMnemonic::F64Ceil,
            Self::F64Const(_) => WasmMnemonic::F64Const,
            Self::F64ConvertI32S => WasmMnemonic::F64ConvertI32S,
            Self::F64ConvertI32U => WasmMnemonic::F64ConvertI32U,
            Self::F64ConvertI64S => WasmMnemonic::F64ConvertI64S,
            Self::F64ConvertI64U => WasmMnemonic::F64ConvertI64U,
            Self::F64Copysign => WasmMnemonic::F64Copysign,
            Self::F64Div => WasmMnemonic::F64Div,
            Self::F64Eq => WasmMnemonic::F64Eq,
            Self::F64Floor => WasmMnemonic::F64Floor,
            Self::F64Ge => WasmMnemonic::F64Ge,
            Self::F64Gt => WasmMnemonic::F64Gt,
            Self::F64Le => WasmMnemonic::F64Le,
            Self::F64Load(_) => WasmMnemonic::F64Load,
            Self::F64Lt => WasmMnemonic::F64Lt,
            Self::F64Max => WasmMnemonic::F64Max,
            Self::F64Min => WasmMnemonic::F64Min,
            Self::F64Mul => WasmMnemonic::F64Mul,
            Self::F64Ne => WasmMnemonic::F64Ne,
            Self::F64Nearest => WasmMnemonic::F64Nearest,
            Self::F64Neg => WasmMnemonic::F64Neg,
            Self::F64PromoteF32 => WasmMnemonic::F64PromoteF32,
            Self::F64ReinterpretI64 => WasmMnemonic::F64ReinterpretI64,
            Self::F64Sqrt => WasmMnemonic::F64Sqrt,
            Self::F64Store(_) => WasmMnemonic::F64Store,
            Self::F64Sub => WasmMnemonic::F64Sub,
            Self::F64Trunc => WasmMnemonic::F64Trunc,
            Self::GlobalGet(_) => WasmMnemonic::GlobalGet,
            Self::GlobalSet(_) => WasmMnemonic::GlobalSet,
            Self::I31GetS => WasmMnemonic::I31GetS,
            Self::I31GetU => WasmMnemonic::I31GetU,
            Self::I32Add => WasmMnemonic::I32Add,
            Self::I32And => WasmMnemonic::I32And,
            Self::I32Clz => WasmMnemonic::I32Clz,
            Self::I32Const(_) => WasmMnemonic::I32Const,
            Self::I32Ctz => WasmMnemonic::I32Ctz,
            Self::I32DivS => WasmMnemonic::I32DivS,
            Self::I32DivU => WasmMnemonic::I32DivU,
            Self::I32Eq => WasmMnemonic::I32Eq,
            Self::I32Eqz => WasmMnemonic::I32Eqz,
            Self::I32Extend16S => WasmMnemonic::I32Extend16S,
            Self::I32Extend8S => WasmMnemonic::I32Extend8S,
            Self::I32GeS => WasmMnemonic::I32GeS,
            Self::I32GeU => WasmMnemonic::I32GeU,
            Self::I32GtS => WasmMnemonic::I32GtS,
            Self::I32GtU => WasmMnemonic::I32GtU,
            Self::I32LeS => WasmMnemonic::I32LeS,
            Self::I32LeU => WasmMnemonic::I32LeU,
            Self::I32Load(_) => WasmMnemonic::I32Load,
            Self::I32Load16S(_) => WasmMnemonic::I32Load16S,
            Self::I32Load16U(_) => WasmMnemonic::I32Load16U,
            Self::I32Load8S(_) => WasmMnemonic::I32Load8S,
            Self::I32Load8U(_) => WasmMnemonic::I32Load8U,
            Self::I32LtS => WasmMnemonic::I32LtS,
            Self::I32LtU => WasmMnemonic::I32LtU,
            Self::I32Mul => WasmMnemonic::I32Mul,
            Self::I32Ne => WasmMnemonic::I32Ne,
            Self::I32Or => WasmMnemonic::I32Or,
            Self::I32Popcnt => WasmMnemonic::I32Popcnt,
            Self::I32ReinterpretF32 => WasmMnemonic::I32ReinterpretF32,
            Self::I32RemS => WasmMnemonic::I32RemS,
            Self::I32RemU => WasmMnemonic::I32RemU,
            Self::I32Rotl => WasmMnemonic::I32Rotl,
            Self::I32Rotr => WasmMnemonic::I32Rotr,
            Self::I32Shl => WasmMnemonic::I32Shl,
            Self::I32ShrS => WasmMnemonic::I32ShrS,
            Self::I32ShrU => WasmMnemonic::I32ShrU,
            Self::I32Store(_) => WasmMnemonic::I32Store,
            Self::I32Store16(_) => WasmMnemonic::I32Store16,
            Self::I32Store8(_) => WasmMnemonic::I32Store8,
            Self::I32Sub => WasmMnemonic::I32Sub,
            Self::I32TruncF32S => WasmMnemonic::I32TruncF32S,
            Self::I32TruncF32U => WasmMnemonic::I32TruncF32U,
            Self::I32TruncF64S => WasmMnemonic::I32TruncF64S,
            Self::I32TruncF64U => WasmMnemonic::I32TruncF64U,
            Self::I32TruncSatF32S => WasmMnemonic::I32TruncSatF32S,
            Self::I32TruncSatF32U => WasmMnemonic::I32TruncSatF32U,
            Self::I32TruncSatF64S => WasmMnemonic::I32TruncSatF64S,
            Self::I32TruncSatF64U => WasmMnemonic::I32TruncSatF64U,
            Self::I32WrapI64 => WasmMnemonic::I32WrapI64,
            Self::I32Xor => WasmMnemonic::I32Xor,
            Self::I64Add => WasmMnemonic::I64Add,
            Self::I64And => WasmMnemonic::I64And,
            Self::I64Clz => WasmMnemonic::I64Clz,
            Self::I64Const(_) => WasmMnemonic::I64Const,
            Self::I64Ctz => WasmMnemonic::I64Ctz,
            Self::I64DivS => WasmMnemonic::I64DivS,
            Self::I64DivU => WasmMnemonic::I64DivU,
            Self::I64Eq => WasmMnemonic::I64Eq,
            Self::I64Eqz => WasmMnemonic::I64Eqz,
            Self::I64Extend16S => WasmMnemonic::I64Extend16S,
            Self::I64Extend32S => WasmMnemonic::I64Extend32S,
            Self::I64Extend8S => WasmMnemonic::I64Extend8S,
            Self::I64ExtendI32S => WasmMnemonic::I64ExtendI32S,
            Self::I64ExtendI32U => WasmMnemonic::I64ExtendI32U,
            Self::I64GeS => WasmMnemonic::I64GeS,
            Self::I64GeU => WasmMnemonic::I64GeU,
            Self::I64GtS => WasmMnemonic::I64GtS,
            Self::I64GtU => WasmMnemonic::I64GtU,
            Self::I64LeS => WasmMnemonic::I64LeS,
            Self::I64LeU => WasmMnemonic::I64LeU,
            Self::I64Load(_) => WasmMnemonic::I64Load,
            Self::I64Load16S(_) => WasmMnemonic::I64Load16S,
            Self::I64Load16U(_) => WasmMnemonic::I64Load16U,
            Self::I64Load32S(_) => WasmMnemonic::I64Load32S,
            Self::I64Load32U(_) => WasmMnemonic::I64Load32U,
            Self::I64Load8S(_) => WasmMnemonic::I64Load8S,
            Self::I64Load8U(_) => WasmMnemonic::I64Load8U,
            Self::I64LtS => WasmMnemonic::I64LtS,
            Self::I64LtU => WasmMnemonic::I64LtU,
            Self::I64Mul => WasmMnemonic::I64Mul,
            Self::I64Ne => WasmMnemonic::I64Ne,
            Self::I64Or => WasmMnemonic::I64Or,
            Self::I64Popcnt => WasmMnemonic::I64Popcnt,
            Self::I64ReinterpretF64 => WasmMnemonic::I64ReinterpretF64,
            Self::I64RemS => WasmMnemonic::I64RemS,
            Self::I64RemU => WasmMnemonic::I64RemU,
            Self::I64Rotl => WasmMnemonic::I64Rotl,
            Self::I64Rotr => WasmMnemonic::I64Rotr,
            Self::I64Shl => WasmMnemonic::I64Shl,
            Self::I64ShrS => WasmMnemonic::I64ShrS,
            Self::I64ShrU => WasmMnemonic::I64ShrU,
            Self::I64Store(_) => WasmMnemonic::I64Store,
            Self::I64Store16(_) => WasmMnemonic::I64Store16,
            Self::I64Store32(_) => WasmMnemonic::I64Store32,
            Self::I64Store8(_) => WasmMnemonic::I64Store8,
            Self::I64Sub => WasmMnemonic::I64Sub,
            Self::I64TruncF32S => WasmMnemonic::I64TruncF32S,
            Self::I64TruncF32U => WasmMnemonic::I64TruncF32U,
            Self::I64TruncF64S => WasmMnemonic::I64TruncF64S,
            Self::I64TruncF64U => WasmMnemonic::I64TruncF64U,
            Self::I64TruncSatF32S => WasmMnemonic::I64TruncSatF32S,
            Self::I64TruncSatF32U => WasmMnemonic::I64TruncSatF32U,
            Self::I64TruncSatF64S => WasmMnemonic::I64TruncSatF64S,
            Self::I64TruncSatF64U => WasmMnemonic::I64TruncSatF64U,
            Self::I64Xor => WasmMnemonic::I64Xor,
            Self::If(_) => WasmMnemonic::If,
            Self::LocalGet(_) => WasmMnemonic::LocalGet,
            Self::LocalSet(_) => WasmMnemonic::LocalSet,
            Self::LocalTee(_) => WasmMnemonic::LocalTee,
            Self::Loop(_) => WasmMnemonic::Loop,
            Self::MemoryCopy => WasmMnemonic::MemoryCopy,
            Self::MemoryFill => WasmMnemonic::MemoryFill,
            Self::MemoryGrow(_) => WasmMnemonic::MemoryGrow,
            Self::MemoryInit(_) => WasmMnemonic::MemoryInit,
            Self::MemorySize(_) => WasmMnemonic::MemorySize,
            Self::Nop => WasmMnemonic::Nop,
            Self::RefAsNonNull => WasmMnemonic::RefAsNonNull,
            Self::RefCastRefHt(_) => WasmMnemonic::RefCastRefHt,
            Self::RefCastRefNullHt(_) => WasmMnemonic::RefCastRefNullHt,
            Self::RefEq(_) => WasmMnemonic::RefEq,
            Self::RefFunc(_) => WasmMnemonic::RefFunc,
            Self::RefI31 => WasmMnemonic::RefI31,
            Self::RefIsNull => WasmMnemonic::RefIsNull,
            Self::RefNull(_) => WasmMnemonic::RefNull,
            Self::RefTestRefHt(_) => WasmMnemonic::RefTestRefHt,
            Self::RefTestRefNullHt(_) => WasmMnemonic::RefTestRefNullHt,
            Self::Return => WasmMnemonic::Return,
            Self::ReturnCall => WasmMnemonic::ReturnCall,
            Self::ReturnCallIndirect => WasmMnemonic::ReturnCallIndirect,
            Self::ReturnCallRef => WasmMnemonic::ReturnCallRef,
            Self::Select => WasmMnemonic::Select,
            Self::SelectT(_) => WasmMnemonic::SelectT,
            Self::StructGet(_, _) => WasmMnemonic::StructGet,
            Self::StructGetS(_, _) => WasmMnemonic::StructGetS,
            Self::StructGetU(_, _) => WasmMnemonic::StructGetU,
            Self::StructNew(_) => WasmMnemonic::StructNew,
            Self::StructNewDefault(_) => WasmMnemonic::StructNewDefault,
            Self::StructSet(_, _) => WasmMnemonic::StructSet,
            Self::TableCopy(_, _) => WasmMnemonic::TableCopy,
            Self::TableFill(_) => WasmMnemonic::TableFill,
            Self::TableGet(_) => WasmMnemonic::TableGet,
            Self::TableGrow(_) => WasmMnemonic::TableGrow,
            Self::TableInit(_, _) => WasmMnemonic::TableInit,
            Self::TableSet(_) => WasmMnemonic::TableSet,
            Self::TableSize(_) => WasmMnemonic::TableSize,
            Self::Unreachable => WasmMnemonic::Unreachable,

        }
    }

}

impl fmt::Display for WasmOpcode {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            _ => f.write_str(self.as_str())
        }
    }
}

impl fmt::Debug for WasmOpcode {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            _ => f.write_str(self.as_str())
        }
    }
}

#[non_exhaustive]
#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]
pub enum WasmMnemonic {
    /// 0x00 `unreachable` (MVP)
    Unreachable,
    /// 0x01 `nop` (MVP)
    Nop,
    /// 0x02 `block` bt (MVP)
    Block,
    /// 0x03 `loop` bt (MVP)
    Loop,
    /// 0x04 `if` bt (MVP)
    If,
    /// 0x05 `else` (MVP)
    Else,
    /// 0x0B `end` (MVP)
    End,
    /// 0x0C `br` u32 (MVP)
    Br,
    /// 0x0D `br_if` u32 (MVP)
    BrIf,
    /// 0x0E `br_table` br_table (MVP)
    BrTable,
    /// 0x0F `return` (MVP)
    Return,
    /// 0x10 `call` u32 (MVP)
    Call,
    /// 0x11 `call_indirect` u32 u32 (MVP)
    CallIndirect,
    /// 0x12 `return_call` (TailCall)
    ReturnCall,
    /// 0x13 `return_call_indirect` (TailCall)
    ReturnCallIndirect,
    /// 0x14 `call_ref` (TypedFunctionReferences)
    CallRef,
    /// 0x15 `return_call_ref` (TypedFunctionReferences)
    ReturnCallRef,
    /// 0x1A `drop` (MVP)
    Drop,
    /// 0x1B `select` (MVP)
    Select,
    /// 0x1C `select_t` u32 (ReferenceTypes)
    SelectT,
    /// 0x20 `local.get` u32 (MVP)
    LocalGet,
    /// 0x21 `local.set` u32 (MVP)
    LocalSet,
    /// 0x22 `local.tee` u32 (MVP)
    LocalTee,
    /// 0x23 `global.get` u32 (MVP)
    GlobalGet,
    /// 0x24 `global.set` u32 (MVP)
    GlobalSet,
    /// 0x25 `table.get` u32 (ReferenceTypes)
    TableGet,
    /// 0x26 `table.set` u32 (ReferenceTypes)
    TableSet,
    /// 0x28 `i32.load` memarg (MVP)
    I32Load,
    /// 0x29 `i64.load` memarg (MVP)
    I64Load,
    /// 0x2A `f32.load` memarg (MVP)
    F32Load,
    /// 0x2B `f64.load` memarg (MVP)
    F64Load,
    /// 0x2C `i32.load8_s` memarg (MVP)
    I32Load8S,
    /// 0x2D `i32.load8_u` memarg (MVP)
    I32Load8U,
    /// 0x2E `i32.load16_s` memarg (MVP)
    I32Load16S,
    /// 0x2F `i32.load16_u` memarg (MVP)
    I32Load16U,
    /// 0x30 `i64.load8_s` memarg (MVP)
    I64Load8S,
    /// 0x31 `i64.load8_u` memarg (MVP)
    I64Load8U,
    /// 0x32 `i64.load16_s` memarg (MVP)
    I64Load16S,
    /// 0x33 `i64.load16_u` memarg (MVP)
    I64Load16U,
    /// 0x34 `i64.load32_s` memarg (MVP)
    I64Load32S,
    /// 0x35 `i64.load32_u` memarg (MVP)
    I64Load32U,
    /// 0x36 `i32.store` memarg (MVP)
    I32Store,
    /// 0x37 `i64.store` memarg (MVP)
    I64Store,
    /// 0x38 `f32.store` memarg (MVP)
    F32Store,
    /// 0x39 `f64.store` memarg (MVP)
    F64Store,
    /// 0x3A `i32.store8` memarg (MVP)
    I32Store8,
    /// 0x3B `i32.store16` memarg (MVP)
    I32Store16,
    /// 0x3C `i64.store8` memarg (MVP)
    I64Store8,
    /// 0x3D `i64.store16` memarg (MVP)
    I64Store16,
    /// 0x3E `i64.store32` memarg (MVP)
    I64Store32,
    /// 0x3F `memory.size` u32 (MVP)
    MemorySize,
    /// 0x40 `memory.grow` u32 (MVP)
    MemoryGrow,
    /// 0x41 `i32.const` i32 (MVP)
    I32Const,
    /// 0x42 `i64.const` i64 (MVP)
    I64Const,
    /// 0x43 `f32.const` f32 (MVP)
    F32Const,
    /// 0x44 `f64.const` f64 (MVP)
    F64Const,
    /// 0x45 `i32.eqz` (MVP)
    I32Eqz,
    /// 0x46 `i32.eq` (MVP)
    I32Eq,
    /// 0x47 `i32.ne` (MVP)
    I32Ne,
    /// 0x48 `i32.lt_s` (MVP)
    I32LtS,
    /// 0x49 `i32.lt_u` (MVP)
    I32LtU,
    /// 0x4A `i32.gt_s` (MVP)
    I32GtS,
    /// 0x4B `i32.gt_u` (MVP)
    I32GtU,
    /// 0x4C `i32.le_s` (MVP)
    I32LeS,
    /// 0x4D `i32.le_u` (MVP)
    I32LeU,
    /// 0x4E `i32.ge_s` (MVP)
    I32GeS,
    /// 0x4F `i32.ge_u` (MVP)
    I32GeU,
    /// 0x50 `i64.eqz` (MVP)
    I64Eqz,
    /// 0x51 `i64.eq` (MVP)
    I64Eq,
    /// 0x52 `i64.ne` (MVP)
    I64Ne,
    /// 0x53 `i64.lt_s` (MVP)
    I64LtS,
    /// 0x54 `i64.lt_u` (MVP)
    I64LtU,
    /// 0x55 `i64.gt_s` (MVP)
    I64GtS,
    /// 0x56 `i64.gt_u` (MVP)
    I64GtU,
    /// 0x57 `i64.le_s` (MVP)
    I64LeS,
    /// 0x58 `i64.le_u` (MVP)
    I64LeU,
    /// 0x59 `i64.ge_s` (MVP)
    I64GeS,
    /// 0x5A `i64.ge_u` (MVP)
    I64GeU,
    /// 0x5B `f32.eq` (MVP)
    F32Eq,
    /// 0x5C `f32.ne` (MVP)
    F32Ne,
    /// 0x5D `f32.lt` (MVP)
    F32Lt,
    /// 0x5E `f32.gt` (MVP)
    F32Gt,
    /// 0x5F `f32.le` (MVP)
    F32Le,
    /// 0x60 `f32.ge` (MVP)
    F32Ge,
    /// 0x61 `f64.eq` (MVP)
    F64Eq,
    /// 0x62 `f64.ne` (MVP)
    F64Ne,
    /// 0x63 `f64.lt` (MVP)
    F64Lt,
    /// 0x64 `f64.gt` (MVP)
    F64Gt,
    /// 0x65 `f64.le` (MVP)
    F64Le,
    /// 0x66 `f64.ge` (MVP)
    F64Ge,
    /// 0x67 `i32.clz` (MVP)
    I32Clz,
    /// 0x68 `i32.ctz` (MVP)
    I32Ctz,
    /// 0x69 `i32.popcnt` (MVP)
    I32Popcnt,
    /// 0x6A `i32.add` (MVP)
    I32Add,
    /// 0x6B `i32.sub` (MVP)
    I32Sub,
    /// 0x6C `i32.mul` (MVP)
    I32Mul,
    /// 0x6D `i32.div_s` (MVP)
    I32DivS,
    /// 0x6E `i32.div_u` (MVP)
    I32DivU,
    /// 0x6F `i32.rem_s` (MVP)
    I32RemS,
    /// 0x70 `i32.rem_u` (MVP)
    I32RemU,
    /// 0x71 `i32.and` (MVP)
    I32And,
    /// 0x72 `i32.or` (MVP)
    I32Or,
    /// 0x73 `i32.xor` (MVP)
    I32Xor,
    /// 0x74 `i32.shl` (MVP)
    I32Shl,
    /// 0x75 `i32.shr_s` (MVP)
    I32ShrS,
    /// 0x76 `i32.shr_u` (MVP)
    I32ShrU,
    /// 0x77 `i32.rotl` (MVP)
    I32Rotl,
    /// 0x78 `i32.rotr` (MVP)
    I32Rotr,
    /// 0x79 `i64.clz` (MVP)
    I64Clz,
    /// 0x7A `i64.ctz` (MVP)
    I64Ctz,
    /// 0x7B `i64.popcnt` (MVP)
    I64Popcnt,
    /// 0x7C `i64.add` (MVP)
    I64Add,
    /// 0x7D `i64.sub` (MVP)
    I64Sub,
    /// 0x7E `i64.mul` (MVP)
    I64Mul,
    /// 0x7F `i64.div_s` (MVP)
    I64DivS,
    /// 0x80 `i64.div_u` (MVP)
    I64DivU,
    /// 0x81 `i64.rem_s` (MVP)
    I64RemS,
    /// 0x82 `i64.rem_u` (MVP)
    I64RemU,
    /// 0x83 `i64.and` (MVP)
    I64And,
    /// 0x84 `i64.or` (MVP)
    I64Or,
    /// 0x85 `i64.xor` (MVP)
    I64Xor,
    /// 0x86 `i64.shl` (MVP)
    I64Shl,
    /// 0x87 `i64.shr_s` (MVP)
    I64ShrS,
    /// 0x88 `i64.shr_u` (MVP)
    I64ShrU,
    /// 0x89 `i64.rotl` (MVP)
    I64Rotl,
    /// 0x8A `i64.rotr` (MVP)
    I64Rotr,
    /// 0x8B `f32.abs` (MVP)
    F32Abs,
    /// 0x8C `f32.neg` (MVP)
    F32Neg,
    /// 0x8D `f32.ceil` (MVP)
    F32Ceil,
    /// 0x8E `f32.floor` (MVP)
    F32Floor,
    /// 0x8F `f32.trunc` (MVP)
    F32Trunc,
    /// 0x90 `f32.nearest` (MVP)
    F32Nearest,
    /// 0x91 `f32.sqrt` (MVP)
    F32Sqrt,
    /// 0x92 `f32.add` (MVP)
    F32Add,
    /// 0x93 `f32.sub` (MVP)
    F32Sub,
    /// 0x94 `f32.mul` (MVP)
    F32Mul,
    /// 0x95 `f32.div` (MVP)
    F32Div,
    /// 0x96 `f32.min` (MVP)
    F32Min,
    /// 0x97 `f32.max` (MVP)
    F32Max,
    /// 0x98 `f32.copysign` (MVP)
    F32Copysign,
    /// 0x99 `f64.abs` (MVP)
    F64Abs,
    /// 0x9A `f64.neg` (MVP)
    F64Neg,
    /// 0x9B `f64.ceil` (MVP)
    F64Ceil,
    /// 0x9C `f64.floor` (MVP)
    F64Floor,
    /// 0x9D `f64.trunc` (MVP)
    F64Trunc,
    /// 0x9E `f64.nearest` (MVP)
    F64Nearest,
    /// 0x9F `f64.sqrt` (MVP)
    F64Sqrt,
    /// 0xA0 `f64.add` (MVP)
    F64Add,
    /// 0xA1 `f64.sub` (MVP)
    F64Sub,
    /// 0xA2 `f64.mul` (MVP)
    F64Mul,
    /// 0xA3 `f64.div` (MVP)
    F64Div,
    /// 0xA4 `f64.min` (MVP)
    F64Min,
    /// 0xA5 `f64.max` (MVP)
    F64Max,
    /// 0xA6 `f64.copysign` (MVP)
    F64Copysign,
    /// 0xA7 `i32.wrap_i64` (MVP)
    I32WrapI64,
    /// 0xA8 `i32.trunc_f32_s` (MVP)
    I32TruncF32S,
    /// 0xA9 `i32.trunc_f32_u` (MVP)
    I32TruncF32U,
    /// 0xAA `i32.trunc_f64_s` (MVP)
    I32TruncF64S,
    /// 0xAB `i32.trunc_f64_u` (MVP)
    I32TruncF64U,
    /// 0xAC `i64.extend_i32_s` (MVP)
    I64ExtendI32S,
    /// 0xAD `i64.extend_i32_u` (MVP)
    I64ExtendI32U,
    /// 0xAE `i64.trunc_f32_s` (MVP)
    I64TruncF32S,
    /// 0xAF `i64.trunc_f32_u` (MVP)
    I64TruncF32U,
    /// 0xB0 `i64.trunc_f64_s` (MVP)
    I64TruncF64S,
    /// 0xB1 `i64.trunc_f64_u` (MVP)
    I64TruncF64U,
    /// 0xB2 `f32.convert_i32_s` (MVP)
    F32ConvertI32S,
    /// 0xB3 `f32.convert_i32_u` (MVP)
    F32ConvertI32U,
    /// 0xB4 `f32.convert_i64_s` (MVP)
    F32ConvertI64S,
    /// 0xB5 `f32.convert_i64_u` (MVP)
    F32ConvertI64U,
    /// 0xB6 `f32.demote_f64` (MVP)
    F32DemoteF64,
    /// 0xB7 `f64.convert_i32_s` (MVP)
    F64ConvertI32S,
    /// 0xB8 `f64.convert_i32_u` (MVP)
    F64ConvertI32U,
    /// 0xB9 `f64.convert_i64_s` (MVP)
    F64ConvertI64S,
    /// 0xBA `f64.convert_i64_u` (MVP)
    F64ConvertI64U,
    /// 0xBB `f64.promote_f32` (MVP)
    F64PromoteF32,
    /// 0xBC `i32.reinterpret_f32` (MVP)
    I32ReinterpretF32,
    /// 0xBD `i64.reinterpret_f64` (MVP)
    I64ReinterpretF64,
    /// 0xBE `f32.reinterpret_i32` (MVP)
    F32ReinterpretI32,
    /// 0xBF `f64.reinterpret_i64` (MVP)
    F64ReinterpretI64,
    /// 0xC0 `i32.extend8_s` (SignExtension)
    I32Extend8S,
    /// 0xC1 `i32.extend16_s` (SignExtension)
    I32Extend16S,
    /// 0xC2 `i64.extend8_s` (SignExtension)
    I64Extend8S,
    /// 0xC3 `i64.extend16_s` (SignExtension)
    I64Extend16S,
    /// 0xC4 `i64.extend32_s` (SignExtension)
    I64Extend32S,
    /// 0xD0 `ref.null` u32 (ReferenceTypes)
    RefNull,
    /// 0xD1 `ref.is_null` (ReferenceTypes)
    RefIsNull,
    /// 0xD2 `ref.func` u32 (ReferenceTypes)
    RefFunc,
    /// 0xD3 `ref.as_non_null` (TypedFunctionReferences)
    RefAsNonNull,
    /// 0xD4 `br_on_null` (TypedFunctionReferences)
    BrOnNull,
    /// 0xD5 `ref.eq` u32 (TypedFunctionReferences)
    RefEq,
    /// 0xD6 `br_on_non_null` u32 (TypedFunctionReferences)
    BrOnNonNull,
    /// 0xFB 0x00 `struct.new` u32 (Gc)
    StructNew,
    /// 0xFB 0x01 `struct.new_default` u32 (Gc)
    StructNewDefault,
    /// 0xFB 0x02 `struct.get` u32 u32 (Gc)
    StructGet,
    /// 0xFB 0x03 `struct.get_s` u32 u32 (Gc)
    StructGetS,
    /// 0xFB 0x04 `struct.get_u` u32 u32 (Gc)
    StructGetU,
    /// 0xFB 0x05 `struct.set` u32 u32 (Gc)
    StructSet,
    /// 0xFB 0x06 `array.new` u32 (Gc)
    ArrayNew,
    /// 0xFB 0x07 `array.new_default` u32 (Gc)
    ArrayNewDefault,
    /// 0xFB 0x08 `array.new_fixed` u32 u32 (Gc)
    ArrayNewFixed,
    /// 0xFB 0x09 `array.new_data` u32 u32 (Gc)
    ArrayNewData,
    /// 0xFB 0x0A `array.new_elem` u32 u32 (Gc)
    ArrayNewElem,
    /// 0xFB 0x0B `array.get` u32 (Gc)
    ArrayGet,
    /// 0xFB 0x0C `array.get_s` u32 (Gc)
    ArrayGetS,
    /// 0xFB 0x0D `array.get_u` u32 (Gc)
    ArrayGetU,
    /// 0xFB 0x0E `array.set` u32 (Gc)
    ArraySet,
    /// 0xFB 0x0F `array.len` (Gc)
    ArrayLen,
    /// 0xFB 0x10 `array.fill` u32 (Gc)
    ArrayFill,
    /// 0xFB 0x11 `array.copy` u32 u32 (Gc)
    ArrayCopy,
    /// 0xFB 0x12 `array.init_data` u32 u32 (Gc)
    ArrayInitData,
    /// 0xFB 0x13 `array.init_elem` u32 u32 (Gc)
    ArrayInitElem,
    /// 0xFB 0x14 `ref.test (ref ht)` u32 (Gc)
    RefTestRefHt,
    /// 0xFB 0x15 `ref.test (ref null ht)` u32 (Gc)
    RefTestRefNullHt,
    /// 0xFB 0x16 `ref.cast (ref ht)` u32 (Gc)
    RefCastRefHt,
    /// 0xFB 0x17 `ref.cast (ref null ht)` u32 (Gc)
    RefCastRefNullHt,
    /// 0xFB 0x18 `br_on_cast` u8 u32 (Gc)
    BrOnCast,
    /// 0xFB 0x19 `br_on_cast_fail` u8 u32 (Gc)
    BrOnCastFail,
    /// 0xFB 0x1A `any.convert_extern` (Gc)
    AnyConvertExtern,
    /// 0xFB 0x1B `extern.convert_any` (Gc)
    ExternConvertAny,
    /// 0xFB 0x1C `ref.i31` (Gc)
    RefI31,
    /// 0xFB 0x1D `i31.get_s` (Gc)
    I31GetS,
    /// 0xFB 0x1E `i31.get_u` (Gc)
    I31GetU,
    /// 0xFC 0x00 `i32.trunc_sat_f32_s` (NonTrappingFloatToIntConversion)
    I32TruncSatF32S,
    /// 0xFC 0x01 `i32.trunc_sat_f32_u` (NonTrappingFloatToIntConversion)
    I32TruncSatF32U,
    /// 0xFC 0x02 `i32.trunc_sat_f64_s` (NonTrappingFloatToIntConversion)
    I32TruncSatF64S,
    /// 0xFC 0x03 `i32.trunc_sat_f64_u` (NonTrappingFloatToIntConversion)
    I32TruncSatF64U,
    /// 0xFC 0x04 `i64.trunc_sat_f32_s` (NonTrappingFloatToIntConversion)
    I64TruncSatF32S,
    /// 0xFC 0x05 `i64.trunc_sat_f32_u` (NonTrappingFloatToIntConversion)
    I64TruncSatF32U,
    /// 0xFC 0x06 `i64.trunc_sat_f64_s` (NonTrappingFloatToIntConversion)
    I64TruncSatF64S,
    /// 0xFC 0x07 `i64.trunc_sat_f64_u` (NonTrappingFloatToIntConversion)
    I64TruncSatF64U,
    /// 0xFC 0x08 `memory.init` u32 (BulkMemoryOperations)
    MemoryInit,
    /// 0xFC 0x09 `data.drop` u32 (BulkMemoryOperations)
    DataDrop,
    /// 0xFC 0x0A `memory.copy` (BulkMemoryOperations)
    MemoryCopy,
    /// 0xFC 0x0B `memory.fill` (BulkMemoryOperations)
    MemoryFill,
    /// 0xFC 0x0C `table.init` u32 u32 (BulkMemoryOperations)
    TableInit,
    /// 0xFC 0x0D `elem.drop` u32 (BulkMemoryOperations)
    ElemDrop,
    /// 0xFC 0x0E `table.copy` u32 u32 (BulkMemoryOperations)
    TableCopy,
    /// 0xFC 0x0F `table.grow` u32 (ReferenceTypes)
    TableGrow,
    /// 0xFC 0x10 `table.size` u32 (ReferenceTypes)
    TableSize,
    /// 0xFC 0x11 `table.fill` u32 (ReferenceTypes)
    TableFill,
}

impl WasmMnemonic {
    pub const fn as_str(&self) -> &'static str {
        match self {
            Self::AnyConvertExtern => "any.convert_extern",
            Self::ArrayCopy => "array.copy",
            Self::ArrayFill => "array.fill",
            Self::ArrayGet => "array.get",
            Self::ArrayGetS => "array.get_s",
            Self::ArrayGetU => "array.get_u",
            Self::ArrayInitData => "array.init_data",
            Self::ArrayInitElem => "array.init_elem",
            Self::ArrayLen => "array.len",
            Self::ArrayNew => "array.new",
            Self::ArrayNewData => "array.new_data",
            Self::ArrayNewDefault => "array.new_default",
            Self::ArrayNewElem => "array.new_elem",
            Self::ArrayNewFixed => "array.new_fixed",
            Self::ArraySet => "array.set",
            Self::Block => "block",
            Self::Br => "br",
            Self::BrIf => "br_if",
            Self::BrOnCast => "br_on_cast",
            Self::BrOnCastFail => "br_on_cast_fail",
            Self::BrOnNonNull => "br_on_non_null",
            Self::BrOnNull => "br_on_null",
            Self::BrTable => "br_table",
            Self::Call => "call",
            Self::CallIndirect => "call_indirect",
            Self::CallRef => "call_ref",
            Self::DataDrop => "data.drop",
            Self::Drop => "drop",
            Self::ElemDrop => "elem.drop",
            Self::Else => "else",
            Self::End => "end",
            Self::ExternConvertAny => "extern.convert_any",
            Self::F32Abs => "f32.abs",
            Self::F32Add => "f32.add",
            Self::F32Ceil => "f32.ceil",
            Self::F32Const => "f32.const",
            Self::F32ConvertI32S => "f32.convert_i32_s",
            Self::F32ConvertI32U => "f32.convert_i32_u",
            Self::F32ConvertI64S => "f32.convert_i64_s",
            Self::F32ConvertI64U => "f32.convert_i64_u",
            Self::F32Copysign => "f32.copysign",
            Self::F32DemoteF64 => "f32.demote_f64",
            Self::F32Div => "f32.div",
            Self::F32Eq => "f32.eq",
            Self::F32Floor => "f32.floor",
            Self::F32Ge => "f32.ge",
            Self::F32Gt => "f32.gt",
            Self::F32Le => "f32.le",
            Self::F32Load => "f32.load",
            Self::F32Lt => "f32.lt",
            Self::F32Max => "f32.max",
            Self::F32Min => "f32.min",
            Self::F32Mul => "f32.mul",
            Self::F32Ne => "f32.ne",
            Self::F32Nearest => "f32.nearest",
            Self::F32Neg => "f32.neg",
            Self::F32ReinterpretI32 => "f32.reinterpret_i32",
            Self::F32Sqrt => "f32.sqrt",
            Self::F32Store => "f32.store",
            Self::F32Sub => "f32.sub",
            Self::F32Trunc => "f32.trunc",
            Self::F64Abs => "f64.abs",
            Self::F64Add => "f64.add",
            Self::F64Ceil => "f64.ceil",
            Self::F64Const => "f64.const",
            Self::F64ConvertI32S => "f64.convert_i32_s",
            Self::F64ConvertI32U => "f64.convert_i32_u",
            Self::F64ConvertI64S => "f64.convert_i64_s",
            Self::F64ConvertI64U => "f64.convert_i64_u",
            Self::F64Copysign => "f64.copysign",
            Self::F64Div => "f64.div",
            Self::F64Eq => "f64.eq",
            Self::F64Floor => "f64.floor",
            Self::F64Ge => "f64.ge",
            Self::F64Gt => "f64.gt",
            Self::F64Le => "f64.le",
            Self::F64Load => "f64.load",
            Self::F64Lt => "f64.lt",
            Self::F64Max => "f64.max",
            Self::F64Min => "f64.min",
            Self::F64Mul => "f64.mul",
            Self::F64Ne => "f64.ne",
            Self::F64Nearest => "f64.nearest",
            Self::F64Neg => "f64.neg",
            Self::F64PromoteF32 => "f64.promote_f32",
            Self::F64ReinterpretI64 => "f64.reinterpret_i64",
            Self::F64Sqrt => "f64.sqrt",
            Self::F64Store => "f64.store",
            Self::F64Sub => "f64.sub",
            Self::F64Trunc => "f64.trunc",
            Self::GlobalGet => "global.get",
            Self::GlobalSet => "global.set",
            Self::I31GetS => "i31.get_s",
            Self::I31GetU => "i31.get_u",
            Self::I32Add => "i32.add",
            Self::I32And => "i32.and",
            Self::I32Clz => "i32.clz",
            Self::I32Const => "i32.const",
            Self::I32Ctz => "i32.ctz",
            Self::I32DivS => "i32.div_s",
            Self::I32DivU => "i32.div_u",
            Self::I32Eq => "i32.eq",
            Self::I32Eqz => "i32.eqz",
            Self::I32Extend16S => "i32.extend16_s",
            Self::I32Extend8S => "i32.extend8_s",
            Self::I32GeS => "i32.ge_s",
            Self::I32GeU => "i32.ge_u",
            Self::I32GtS => "i32.gt_s",
            Self::I32GtU => "i32.gt_u",
            Self::I32LeS => "i32.le_s",
            Self::I32LeU => "i32.le_u",
            Self::I32Load => "i32.load",
            Self::I32Load16S => "i32.load16_s",
            Self::I32Load16U => "i32.load16_u",
            Self::I32Load8S => "i32.load8_s",
            Self::I32Load8U => "i32.load8_u",
            Self::I32LtS => "i32.lt_s",
            Self::I32LtU => "i32.lt_u",
            Self::I32Mul => "i32.mul",
            Self::I32Ne => "i32.ne",
            Self::I32Or => "i32.or",
            Self::I32Popcnt => "i32.popcnt",
            Self::I32ReinterpretF32 => "i32.reinterpret_f32",
            Self::I32RemS => "i32.rem_s",
            Self::I32RemU => "i32.rem_u",
            Self::I32Rotl => "i32.rotl",
            Self::I32Rotr => "i32.rotr",
            Self::I32Shl => "i32.shl",
            Self::I32ShrS => "i32.shr_s",
            Self::I32ShrU => "i32.shr_u",
            Self::I32Store => "i32.store",
            Self::I32Store16 => "i32.store16",
            Self::I32Store8 => "i32.store8",
            Self::I32Sub => "i32.sub",
            Self::I32TruncF32S => "i32.trunc_f32_s",
            Self::I32TruncF32U => "i32.trunc_f32_u",
            Self::I32TruncF64S => "i32.trunc_f64_s",
            Self::I32TruncF64U => "i32.trunc_f64_u",
            Self::I32TruncSatF32S => "i32.trunc_sat_f32_s",
            Self::I32TruncSatF32U => "i32.trunc_sat_f32_u",
            Self::I32TruncSatF64S => "i32.trunc_sat_f64_s",
            Self::I32TruncSatF64U => "i32.trunc_sat_f64_u",
            Self::I32WrapI64 => "i32.wrap_i64",
            Self::I32Xor => "i32.xor",
            Self::I64Add => "i64.add",
            Self::I64And => "i64.and",
            Self::I64Clz => "i64.clz",
            Self::I64Const => "i64.const",
            Self::I64Ctz => "i64.ctz",
            Self::I64DivS => "i64.div_s",
            Self::I64DivU => "i64.div_u",
            Self::I64Eq => "i64.eq",
            Self::I64Eqz => "i64.eqz",
            Self::I64Extend16S => "i64.extend16_s",
            Self::I64Extend32S => "i64.extend32_s",
            Self::I64Extend8S => "i64.extend8_s",
            Self::I64ExtendI32S => "i64.extend_i32_s",
            Self::I64ExtendI32U => "i64.extend_i32_u",
            Self::I64GeS => "i64.ge_s",
            Self::I64GeU => "i64.ge_u",
            Self::I64GtS => "i64.gt_s",
            Self::I64GtU => "i64.gt_u",
            Self::I64LeS => "i64.le_s",
            Self::I64LeU => "i64.le_u",
            Self::I64Load => "i64.load",
            Self::I64Load16S => "i64.load16_s",
            Self::I64Load16U => "i64.load16_u",
            Self::I64Load32S => "i64.load32_s",
            Self::I64Load32U => "i64.load32_u",
            Self::I64Load8S => "i64.load8_s",
            Self::I64Load8U => "i64.load8_u",
            Self::I64LtS => "i64.lt_s",
            Self::I64LtU => "i64.lt_u",
            Self::I64Mul => "i64.mul",
            Self::I64Ne => "i64.ne",
            Self::I64Or => "i64.or",
            Self::I64Popcnt => "i64.popcnt",
            Self::I64ReinterpretF64 => "i64.reinterpret_f64",
            Self::I64RemS => "i64.rem_s",
            Self::I64RemU => "i64.rem_u",
            Self::I64Rotl => "i64.rotl",
            Self::I64Rotr => "i64.rotr",
            Self::I64Shl => "i64.shl",
            Self::I64ShrS => "i64.shr_s",
            Self::I64ShrU => "i64.shr_u",
            Self::I64Store => "i64.store",
            Self::I64Store16 => "i64.store16",
            Self::I64Store32 => "i64.store32",
            Self::I64Store8 => "i64.store8",
            Self::I64Sub => "i64.sub",
            Self::I64TruncF32S => "i64.trunc_f32_s",
            Self::I64TruncF32U => "i64.trunc_f32_u",
            Self::I64TruncF64S => "i64.trunc_f64_s",
            Self::I64TruncF64U => "i64.trunc_f64_u",
            Self::I64TruncSatF32S => "i64.trunc_sat_f32_s",
            Self::I64TruncSatF32U => "i64.trunc_sat_f32_u",
            Self::I64TruncSatF64S => "i64.trunc_sat_f64_s",
            Self::I64TruncSatF64U => "i64.trunc_sat_f64_u",
            Self::I64Xor => "i64.xor",
            Self::If => "if",
            Self::LocalGet => "local.get",
            Self::LocalSet => "local.set",
            Self::LocalTee => "local.tee",
            Self::Loop => "loop",
            Self::MemoryCopy => "memory.copy",
            Self::MemoryFill => "memory.fill",
            Self::MemoryGrow => "memory.grow",
            Self::MemoryInit => "memory.init",
            Self::MemorySize => "memory.size",
            Self::Nop => "nop",
            Self::RefAsNonNull => "ref.as_non_null",
            Self::RefCastRefHt => "ref.cast (ref ht)",
            Self::RefCastRefNullHt => "ref.cast (ref null ht)",
            Self::RefEq => "ref.eq",
            Self::RefFunc => "ref.func",
            Self::RefI31 => "ref.i31",
            Self::RefIsNull => "ref.is_null",
            Self::RefNull => "ref.null",
            Self::RefTestRefHt => "ref.test (ref ht)",
            Self::RefTestRefNullHt => "ref.test (ref null ht)",
            Self::Return => "return",
            Self::ReturnCall => "return_call",
            Self::ReturnCallIndirect => "return_call_indirect",
            Self::ReturnCallRef => "return_call_ref",
            Self::Select => "select",
            Self::SelectT => "select_t",
            Self::StructGet => "struct.get",
            Self::StructGetS => "struct.get_s",
            Self::StructGetU => "struct.get_u",
            Self::StructNew => "struct.new",
            Self::StructNewDefault => "struct.new_default",
            Self::StructSet => "struct.set",
            Self::TableCopy => "table.copy",
            Self::TableFill => "table.fill",
            Self::TableGet => "table.get",
            Self::TableGrow => "table.grow",
            Self::TableInit => "table.init",
            Self::TableSet => "table.set",
            Self::TableSize => "table.size",
            Self::Unreachable => "unreachable",
        }
    }
    
    pub const fn proposal(&self) -> WasmProposal {
        match self {
            Self::AnyConvertExtern => WasmProposal::Gc,
            Self::ArrayCopy => WasmProposal::Gc,
            Self::ArrayFill => WasmProposal::Gc,
            Self::ArrayGet => WasmProposal::Gc,
            Self::ArrayGetS => WasmProposal::Gc,
            Self::ArrayGetU => WasmProposal::Gc,
            Self::ArrayInitData => WasmProposal::Gc,
            Self::ArrayInitElem => WasmProposal::Gc,
            Self::ArrayLen => WasmProposal::Gc,
            Self::ArrayNew => WasmProposal::Gc,
            Self::ArrayNewData => WasmProposal::Gc,
            Self::ArrayNewDefault => WasmProposal::Gc,
            Self::ArrayNewElem => WasmProposal::Gc,
            Self::ArrayNewFixed => WasmProposal::Gc,
            Self::ArraySet => WasmProposal::Gc,
            Self::BrOnCast => WasmProposal::Gc,
            Self::BrOnCastFail => WasmProposal::Gc,
            Self::BrOnNonNull => WasmProposal::TypedFunctionReferences,
            Self::BrOnNull => WasmProposal::TypedFunctionReferences,
            Self::CallRef => WasmProposal::TypedFunctionReferences,
            Self::DataDrop => WasmProposal::BulkMemoryOperations,
            Self::ElemDrop => WasmProposal::BulkMemoryOperations,
            Self::ExternConvertAny => WasmProposal::Gc,
            Self::I31GetS => WasmProposal::Gc,
            Self::I31GetU => WasmProposal::Gc,
            Self::I32Extend16S => WasmProposal::SignExtension,
            Self::I32Extend8S => WasmProposal::SignExtension,
            Self::I32TruncSatF32S => WasmProposal::NonTrappingFloatToIntConversion,
            Self::I32TruncSatF32U => WasmProposal::NonTrappingFloatToIntConversion,
            Self::I32TruncSatF64S => WasmProposal::NonTrappingFloatToIntConversion,
            Self::I32TruncSatF64U => WasmProposal::NonTrappingFloatToIntConversion,
            Self::I64Extend16S => WasmProposal::SignExtension,
            Self::I64Extend32S => WasmProposal::SignExtension,
            Self::I64Extend8S => WasmProposal::SignExtension,
            Self::I64TruncSatF32S => WasmProposal::NonTrappingFloatToIntConversion,
            Self::I64TruncSatF32U => WasmProposal::NonTrappingFloatToIntConversion,
            Self::I64TruncSatF64S => WasmProposal::NonTrappingFloatToIntConversion,
            Self::I64TruncSatF64U => WasmProposal::NonTrappingFloatToIntConversion,
            Self::MemoryCopy => WasmProposal::BulkMemoryOperations,
            Self::MemoryFill => WasmProposal::BulkMemoryOperations,
            Self::MemoryInit => WasmProposal::BulkMemoryOperations,
            Self::RefAsNonNull => WasmProposal::TypedFunctionReferences,
            Self::RefCastRefHt => WasmProposal::Gc,
            Self::RefCastRefNullHt => WasmProposal::Gc,
            Self::RefEq => WasmProposal::TypedFunctionReferences,
            Self::RefFunc => WasmProposal::ReferenceTypes,
            Self::RefI31 => WasmProposal::Gc,
            Self::RefIsNull => WasmProposal::ReferenceTypes,
            Self::RefNull => WasmProposal::ReferenceTypes,
            Self::RefTestRefHt => WasmProposal::Gc,
            Self::RefTestRefNullHt => WasmProposal::Gc,
            Self::ReturnCall => WasmProposal::TailCall,
            Self::ReturnCallIndirect => WasmProposal::TailCall,
            Self::ReturnCallRef => WasmProposal::TypedFunctionReferences,
            Self::SelectT => WasmProposal::ReferenceTypes,
            Self::StructGet => WasmProposal::Gc,
            Self::StructGetS => WasmProposal::Gc,
            Self::StructGetU => WasmProposal::Gc,
            Self::StructNew => WasmProposal::Gc,
            Self::StructNewDefault => WasmProposal::Gc,
            Self::StructSet => WasmProposal::Gc,
            Self::TableCopy => WasmProposal::BulkMemoryOperations,
            Self::TableFill => WasmProposal::ReferenceTypes,
            Self::TableGet => WasmProposal::ReferenceTypes,
            Self::TableGrow => WasmProposal::ReferenceTypes,
            Self::TableInit => WasmProposal::BulkMemoryOperations,
            Self::TableSet => WasmProposal::ReferenceTypes,
            Self::TableSize => WasmProposal::ReferenceTypes,
            _ => WasmProposal::Mvp,
        }
    }
}

impl fmt::Display for WasmMnemonic {
    #[inline]
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(self.as_str())
    }
}

impl fmt::Debug for WasmMnemonic {
    #[inline]
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(self.as_str())
    }
}

impl From<WasmOpcode> for WasmMnemonic {
    #[inline]
    fn from(val: WasmOpcode) -> WasmMnemonic {
        val.mnemonic()
    }
}

#[non_exhaustive]
#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]
pub enum WasmProposal {
    Mvp,
    BulkMemoryOperations,
    NonTrappingFloatToIntConversion,
    ReferenceTypes,
    SignExtension,
    Gc,
    TailCall,
    TypedFunctionReferences,
}
