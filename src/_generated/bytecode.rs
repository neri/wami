//
// This file is automatically generated at build time. DO NOT EDIT DIRECTLY.
//
use crate::{leb128::*, WasmDecodeErrorKind, WasmMemArg, WasmBlockType, BrTableVec};
use core::fmt;

/// WebAssembly Bytecode
#[non_exhaustive]
pub enum WasmBytecode {
    /// 0x00 `unreachable` (MVP)
    Unreachable,
    /// 0x01 `nop` (MVP)
    Nop,
    /// 0x02 `block` bt (MVP)
    Block(WasmBlockType),
    /// 0x03 `loop` bt (MVP)
    Loop(WasmBlockType),
    /// 0x04 `if` bt (MVP)
    If(WasmBlockType),
    /// 0x05 `else` (MVP)
    Else,
    /// 0x0B `end` (MVP)
    End,
    /// 0x0C `br` u32 (MVP)
    Br(u32),
    /// 0x0D `br_if` u32 (MVP)
    BrIf(u32),
    /// 0x0E `br_table` br_table (MVP)
    BrTable(BrTableVec),
    /// 0x0F `return` (MVP)
    Return,
    /// 0x10 `call` u32 (MVP)
    Call(u32),
    /// 0x11 `call_indirect` u32 u32 (MVP)
    CallIndirect(u32, u32),
    /// 0x12 `return_call` (TailCall)
    ReturnCall,
    /// 0x13 `return_call_indirect` (TailCall)
    ReturnCallIndirect,
    /// 0x14 `call_ref` (TypedFunctionReferences)
    CallRef,
    /// 0x15 `return_call_ref` (TypedFunctionReferences)
    ReturnCallRef,
    /// 0x1A `drop` (MVP)
    Drop,
    /// 0x1B `select` (MVP)
    Select,
    /// 0x1C `select_t` u32 (ReferenceTypes)
    SelectT(u32),
    /// 0x20 `local.get` u32 (MVP)
    LocalGet(u32),
    /// 0x21 `local.set` u32 (MVP)
    LocalSet(u32),
    /// 0x22 `local.tee` u32 (MVP)
    LocalTee(u32),
    /// 0x23 `global.get` u32 (MVP)
    GlobalGet(u32),
    /// 0x24 `global.set` u32 (MVP)
    GlobalSet(u32),
    /// 0x25 `table.get` u32 (ReferenceTypes)
    TableGet(u32),
    /// 0x26 `table.set` u32 (ReferenceTypes)
    TableSet(u32),
    /// 0x28 `i32.load` memarg (MVP)
    I32Load(WasmMemArg),
    /// 0x29 `i64.load` memarg (MVP)
    I64Load(WasmMemArg),
    /// 0x2A `f32.load` memarg (MVP)
    F32Load(WasmMemArg),
    /// 0x2B `f64.load` memarg (MVP)
    F64Load(WasmMemArg),
    /// 0x2C `i32.load8_s` memarg (MVP)
    I32Load8S(WasmMemArg),
    /// 0x2D `i32.load8_u` memarg (MVP)
    I32Load8U(WasmMemArg),
    /// 0x2E `i32.load16_s` memarg (MVP)
    I32Load16S(WasmMemArg),
    /// 0x2F `i32.load16_u` memarg (MVP)
    I32Load16U(WasmMemArg),
    /// 0x30 `i64.load8_s` memarg (MVP)
    I64Load8S(WasmMemArg),
    /// 0x31 `i64.load8_u` memarg (MVP)
    I64Load8U(WasmMemArg),
    /// 0x32 `i64.load16_s` memarg (MVP)
    I64Load16S(WasmMemArg),
    /// 0x33 `i64.load16_u` memarg (MVP)
    I64Load16U(WasmMemArg),
    /// 0x34 `i64.load32_s` memarg (MVP)
    I64Load32S(WasmMemArg),
    /// 0x35 `i64.load32_u` memarg (MVP)
    I64Load32U(WasmMemArg),
    /// 0x36 `i32.store` memarg (MVP)
    I32Store(WasmMemArg),
    /// 0x37 `i64.store` memarg (MVP)
    I64Store(WasmMemArg),
    /// 0x38 `f32.store` memarg (MVP)
    F32Store(WasmMemArg),
    /// 0x39 `f64.store` memarg (MVP)
    F64Store(WasmMemArg),
    /// 0x3A `i32.store8` memarg (MVP)
    I32Store8(WasmMemArg),
    /// 0x3B `i32.store16` memarg (MVP)
    I32Store16(WasmMemArg),
    /// 0x3C `i64.store8` memarg (MVP)
    I64Store8(WasmMemArg),
    /// 0x3D `i64.store16` memarg (MVP)
    I64Store16(WasmMemArg),
    /// 0x3E `i64.store32` memarg (MVP)
    I64Store32(WasmMemArg),
    /// 0x3F `memory.size` u32 (MVP)
    MemorySize(u32),
    /// 0x40 `memory.grow` u32 (MVP)
    MemoryGrow(u32),
    /// 0x41 `i32.const` i32 (MVP)
    I32Const(i32),
    /// 0x42 `i64.const` i64 (MVP)
    I64Const(i64),
    /// 0x43 `f32.const` f32 (MVP)
    F32Const(f32),
    /// 0x44 `f64.const` f64 (MVP)
    F64Const(f64),
    /// 0x45 `i32.eqz` (MVP)
    I32Eqz,
    /// 0x46 `i32.eq` (MVP)
    I32Eq,
    /// 0x47 `i32.ne` (MVP)
    I32Ne,
    /// 0x48 `i32.lt_s` (MVP)
    I32LtS,
    /// 0x49 `i32.lt_u` (MVP)
    I32LtU,
    /// 0x4A `i32.gt_s` (MVP)
    I32GtS,
    /// 0x4B `i32.gt_u` (MVP)
    I32GtU,
    /// 0x4C `i32.le_s` (MVP)
    I32LeS,
    /// 0x4D `i32.le_u` (MVP)
    I32LeU,
    /// 0x4E `i32.ge_s` (MVP)
    I32GeS,
    /// 0x4F `i32.ge_u` (MVP)
    I32GeU,
    /// 0x50 `i64.eqz` (MVP)
    I64Eqz,
    /// 0x51 `i64.eq` (MVP)
    I64Eq,
    /// 0x52 `i64.ne` (MVP)
    I64Ne,
    /// 0x53 `i64.lt_s` (MVP)
    I64LtS,
    /// 0x54 `i64.lt_u` (MVP)
    I64LtU,
    /// 0x55 `i64.gt_s` (MVP)
    I64GtS,
    /// 0x56 `i64.gt_u` (MVP)
    I64GtU,
    /// 0x57 `i64.le_s` (MVP)
    I64LeS,
    /// 0x58 `i64.le_u` (MVP)
    I64LeU,
    /// 0x59 `i64.ge_s` (MVP)
    I64GeS,
    /// 0x5A `i64.ge_u` (MVP)
    I64GeU,
    /// 0x5B `f32.eq` (MVP)
    F32Eq,
    /// 0x5C `f32.ne` (MVP)
    F32Ne,
    /// 0x5D `f32.lt` (MVP)
    F32Lt,
    /// 0x5E `f32.gt` (MVP)
    F32Gt,
    /// 0x5F `f32.le` (MVP)
    F32Le,
    /// 0x60 `f32.ge` (MVP)
    F32Ge,
    /// 0x61 `f64.eq` (MVP)
    F64Eq,
    /// 0x62 `f64.ne` (MVP)
    F64Ne,
    /// 0x63 `f64.lt` (MVP)
    F64Lt,
    /// 0x64 `f64.gt` (MVP)
    F64Gt,
    /// 0x65 `f64.le` (MVP)
    F64Le,
    /// 0x66 `f64.ge` (MVP)
    F64Ge,
    /// 0x67 `i32.clz` (MVP)
    I32Clz,
    /// 0x68 `i32.ctz` (MVP)
    I32Ctz,
    /// 0x69 `i32.popcnt` (MVP)
    I32Popcnt,
    /// 0x6A `i32.add` (MVP)
    I32Add,
    /// 0x6B `i32.sub` (MVP)
    I32Sub,
    /// 0x6C `i32.mul` (MVP)
    I32Mul,
    /// 0x6D `i32.div_s` (MVP)
    I32DivS,
    /// 0x6E `i32.div_u` (MVP)
    I32DivU,
    /// 0x6F `i32.rem_s` (MVP)
    I32RemS,
    /// 0x70 `i32.rem_u` (MVP)
    I32RemU,
    /// 0x71 `i32.and` (MVP)
    I32And,
    /// 0x72 `i32.or` (MVP)
    I32Or,
    /// 0x73 `i32.xor` (MVP)
    I32Xor,
    /// 0x74 `i32.shl` (MVP)
    I32Shl,
    /// 0x75 `i32.shr_s` (MVP)
    I32ShrS,
    /// 0x76 `i32.shr_u` (MVP)
    I32ShrU,
    /// 0x77 `i32.rotl` (MVP)
    I32Rotl,
    /// 0x78 `i32.rotr` (MVP)
    I32Rotr,
    /// 0x79 `i64.clz` (MVP)
    I64Clz,
    /// 0x7A `i64.ctz` (MVP)
    I64Ctz,
    /// 0x7B `i64.popcnt` (MVP)
    I64Popcnt,
    /// 0x7C `i64.add` (MVP)
    I64Add,
    /// 0x7D `i64.sub` (MVP)
    I64Sub,
    /// 0x7E `i64.mul` (MVP)
    I64Mul,
    /// 0x7F `i64.div_s` (MVP)
    I64DivS,
    /// 0x80 `i64.div_u` (MVP)
    I64DivU,
    /// 0x81 `i64.rem_s` (MVP)
    I64RemS,
    /// 0x82 `i64.rem_u` (MVP)
    I64RemU,
    /// 0x83 `i64.and` (MVP)
    I64And,
    /// 0x84 `i64.or` (MVP)
    I64Or,
    /// 0x85 `i64.xor` (MVP)
    I64Xor,
    /// 0x86 `i64.shl` (MVP)
    I64Shl,
    /// 0x87 `i64.shr_s` (MVP)
    I64ShrS,
    /// 0x88 `i64.shr_u` (MVP)
    I64ShrU,
    /// 0x89 `i64.rotl` (MVP)
    I64Rotl,
    /// 0x8A `i64.rotr` (MVP)
    I64Rotr,
    /// 0x8B `f32.abs` (MVP)
    F32Abs,
    /// 0x8C `f32.neg` (MVP)
    F32Neg,
    /// 0x8D `f32.ceil` (MVP)
    F32Ceil,
    /// 0x8E `f32.floor` (MVP)
    F32Floor,
    /// 0x8F `f32.trunc` (MVP)
    F32Trunc,
    /// 0x90 `f32.nearest` (MVP)
    F32Nearest,
    /// 0x91 `f32.sqrt` (MVP)
    F32Sqrt,
    /// 0x92 `f32.add` (MVP)
    F32Add,
    /// 0x93 `f32.sub` (MVP)
    F32Sub,
    /// 0x94 `f32.mul` (MVP)
    F32Mul,
    /// 0x95 `f32.div` (MVP)
    F32Div,
    /// 0x96 `f32.min` (MVP)
    F32Min,
    /// 0x97 `f32.max` (MVP)
    F32Max,
    /// 0x98 `f32.copysign` (MVP)
    F32Copysign,
    /// 0x99 `f64.abs` (MVP)
    F64Abs,
    /// 0x9A `f64.neg` (MVP)
    F64Neg,
    /// 0x9B `f64.ceil` (MVP)
    F64Ceil,
    /// 0x9C `f64.floor` (MVP)
    F64Floor,
    /// 0x9D `f64.trunc` (MVP)
    F64Trunc,
    /// 0x9E `f64.nearest` (MVP)
    F64Nearest,
    /// 0x9F `f64.sqrt` (MVP)
    F64Sqrt,
    /// 0xA0 `f64.add` (MVP)
    F64Add,
    /// 0xA1 `f64.sub` (MVP)
    F64Sub,
    /// 0xA2 `f64.mul` (MVP)
    F64Mul,
    /// 0xA3 `f64.div` (MVP)
    F64Div,
    /// 0xA4 `f64.min` (MVP)
    F64Min,
    /// 0xA5 `f64.max` (MVP)
    F64Max,
    /// 0xA6 `f64.copysign` (MVP)
    F64Copysign,
    /// 0xA7 `i32.wrap_i64` (MVP)
    I32WrapI64,
    /// 0xA8 `i32.trunc_f32_s` (MVP)
    I32TruncF32S,
    /// 0xA9 `i32.trunc_f32_u` (MVP)
    I32TruncF32U,
    /// 0xAA `i32.trunc_f64_s` (MVP)
    I32TruncF64S,
    /// 0xAB `i32.trunc_f64_u` (MVP)
    I32TruncF64U,
    /// 0xAC `i64.extend_i32_s` (MVP)
    I64ExtendI32S,
    /// 0xAD `i64.extend_i32_u` (MVP)
    I64ExtendI32U,
    /// 0xAE `i64.trunc_f32_s` (MVP)
    I64TruncF32S,
    /// 0xAF `i64.trunc_f32_u` (MVP)
    I64TruncF32U,
    /// 0xB0 `i64.trunc_f64_s` (MVP)
    I64TruncF64S,
    /// 0xB1 `i64.trunc_f64_u` (MVP)
    I64TruncF64U,
    /// 0xB2 `f32.convert_i32_s` (MVP)
    F32ConvertI32S,
    /// 0xB3 `f32.convert_i32_u` (MVP)
    F32ConvertI32U,
    /// 0xB4 `f32.convert_i64_s` (MVP)
    F32ConvertI64S,
    /// 0xB5 `f32.convert_i64_u` (MVP)
    F32ConvertI64U,
    /// 0xB6 `f32.demote_f64` (MVP)
    F32DemoteF64,
    /// 0xB7 `f64.convert_i32_s` (MVP)
    F64ConvertI32S,
    /// 0xB8 `f64.convert_i32_u` (MVP)
    F64ConvertI32U,
    /// 0xB9 `f64.convert_i64_s` (MVP)
    F64ConvertI64S,
    /// 0xBA `f64.convert_i64_u` (MVP)
    F64ConvertI64U,
    /// 0xBB `f64.promote_f32` (MVP)
    F64PromoteF32,
    /// 0xBC `i32.reinterpret_f32` (MVP)
    I32ReinterpretF32,
    /// 0xBD `i64.reinterpret_f64` (MVP)
    I64ReinterpretF64,
    /// 0xBE `f32.reinterpret_i32` (MVP)
    F32ReinterpretI32,
    /// 0xBF `f64.reinterpret_i64` (MVP)
    F64ReinterpretI64,
    /// 0xC0 `i32.extend8_s` (SignExtension)
    I32Extend8S,
    /// 0xC1 `i32.extend16_s` (SignExtension)
    I32Extend16S,
    /// 0xC2 `i64.extend8_s` (SignExtension)
    I64Extend8S,
    /// 0xC3 `i64.extend16_s` (SignExtension)
    I64Extend16S,
    /// 0xC4 `i64.extend32_s` (SignExtension)
    I64Extend32S,
    /// 0xD0 `ref.null` u32 (ReferenceTypes)
    RefNull(u32),
    /// 0xD1 `ref.is_null` (ReferenceTypes)
    RefIsNull,
    /// 0xD2 `ref.func` u32 (ReferenceTypes)
    RefFunc(u32),
    /// 0xD3 `ref.as_non_null` (TypedFunctionReferences)
    RefAsNonNull,
    /// 0xD4 `br_on_null` (TypedFunctionReferences)
    BrOnNull,
    /// 0xD5 `ref.eq` u32 (TypedFunctionReferences)
    RefEq(u32),
    /// 0xD6 `br_on_non_null` u32 (TypedFunctionReferences)
    BrOnNonNull(u32),
    /// 0xFB 0x00 `struct.new` u32 (Gc)
    StructNew(u32),
    /// 0xFB 0x01 `struct.new_default` u32 (Gc)
    StructNewDefault(u32),
    /// 0xFB 0x02 `struct.get` u32 u32 (Gc)
    StructGet(u32, u32),
    /// 0xFB 0x03 `struct.get_s` u32 u32 (Gc)
    StructGetS(u32, u32),
    /// 0xFB 0x04 `struct.get_u` u32 u32 (Gc)
    StructGetU(u32, u32),
    /// 0xFB 0x05 `struct.set` u32 u32 (Gc)
    StructSet(u32, u32),
    /// 0xFB 0x06 `array.new` u32 (Gc)
    ArrayNew(u32),
    /// 0xFB 0x07 `array.new_default` u32 (Gc)
    ArrayNewDefault(u32),
    /// 0xFB 0x08 `array.new_fixed` u32 u32 (Gc)
    ArrayNewFixed(u32, u32),
    /// 0xFB 0x09 `array.new_data` u32 u32 (Gc)
    ArrayNewData(u32, u32),
    /// 0xFB 0x0A `array.new_elem` u32 u32 (Gc)
    ArrayNewElem(u32, u32),
    /// 0xFB 0x0B `array.get` u32 (Gc)
    ArrayGet(u32),
    /// 0xFB 0x0C `array.get_s` u32 (Gc)
    ArrayGetS(u32),
    /// 0xFB 0x0D `array.get_u` u32 (Gc)
    ArrayGetU(u32),
    /// 0xFB 0x0E `array.set` u32 (Gc)
    ArraySet(u32),
    /// 0xFB 0x0F `array.len` (Gc)
    ArrayLen,
    /// 0xFB 0x10 `array.fill` u32 (Gc)
    ArrayFill(u32),
    /// 0xFB 0x11 `array.copy` u32 u32 (Gc)
    ArrayCopy(u32, u32),
    /// 0xFB 0x12 `array.init_data` u32 u32 (Gc)
    ArrayInitData(u32, u32),
    /// 0xFB 0x13 `array.init_elem` u32 u32 (Gc)
    ArrayInitElem(u32, u32),
    /// 0xFB 0x14 `ref.test (ref ht)` u32 (Gc)
    RefTestRefHt(u32),
    /// 0xFB 0x15 `ref.test (ref null ht)` u32 (Gc)
    RefTestRefNullHt(u32),
    /// 0xFB 0x16 `ref.cast (ref ht)` u32 (Gc)
    RefCastRefHt(u32),
    /// 0xFB 0x17 `ref.cast (ref null ht)` u32 (Gc)
    RefCastRefNullHt(u32),
    /// 0xFB 0x18 `br_on_cast` u8 u32 (Gc)
    BrOnCast(u8, u32),
    /// 0xFB 0x19 `br_on_cast_fail` u8 u32 (Gc)
    BrOnCastFail(u8, u32),
    /// 0xFB 0x1A `any.convert_extern` (Gc)
    AnyConvertExtern,
    /// 0xFB 0x1B `extern.convert_any` (Gc)
    ExternConvertAny,
    /// 0xFB 0x1C `ref.i31` (Gc)
    RefI31,
    /// 0xFB 0x1D `i31.get_s` (Gc)
    I31GetS,
    /// 0xFB 0x1E `i31.get_u` (Gc)
    I31GetU,
    /// 0xFC 0x00 `i32.trunc_sat_f32_s` (NonTrappingFloatToIntConversion)
    I32TruncSatF32S,
    /// 0xFC 0x01 `i32.trunc_sat_f32_u` (NonTrappingFloatToIntConversion)
    I32TruncSatF32U,
    /// 0xFC 0x02 `i32.trunc_sat_f64_s` (NonTrappingFloatToIntConversion)
    I32TruncSatF64S,
    /// 0xFC 0x03 `i32.trunc_sat_f64_u` (NonTrappingFloatToIntConversion)
    I32TruncSatF64U,
    /// 0xFC 0x04 `i64.trunc_sat_f32_s` (NonTrappingFloatToIntConversion)
    I64TruncSatF32S,
    /// 0xFC 0x05 `i64.trunc_sat_f32_u` (NonTrappingFloatToIntConversion)
    I64TruncSatF32U,
    /// 0xFC 0x06 `i64.trunc_sat_f64_s` (NonTrappingFloatToIntConversion)
    I64TruncSatF64S,
    /// 0xFC 0x07 `i64.trunc_sat_f64_u` (NonTrappingFloatToIntConversion)
    I64TruncSatF64U,
    /// 0xFC 0x08 `memory.init` u32 (BulkMemoryOperations)
    MemoryInit(u32),
    /// 0xFC 0x09 `data.drop` u32 (BulkMemoryOperations)
    DataDrop(u32),
    /// 0xFC 0x0A `memory.copy` (BulkMemoryOperations)
    MemoryCopy,
    /// 0xFC 0x0B `memory.fill` (BulkMemoryOperations)
    MemoryFill,
    /// 0xFC 0x0C `table.init` u32 u32 (BulkMemoryOperations)
    TableInit(u32, u32),
    /// 0xFC 0x0D `elem.drop` u32 (BulkMemoryOperations)
    ElemDrop(u32),
    /// 0xFC 0x0E `table.copy` u32 u32 (BulkMemoryOperations)
    TableCopy(u32, u32),
    /// 0xFC 0x0F `table.grow` u32 (ReferenceTypes)
    TableGrow(u32),
    /// 0xFC 0x10 `table.size` u32 (ReferenceTypes)
    TableSize(u32),
    /// 0xFC 0x11 `table.fill` u32 (ReferenceTypes)
    TableFill(u32),
    /// 0xFD 0x00 `v128.load` (Simd)
    V128Load,
    /// 0xFD 0x01 `v128.load8x8_s` (Simd)
    V128Load8x8S,
    /// 0xFD 0x02 `v128.load8x8_u` (Simd)
    V128Load8x8U,
    /// 0xFD 0x03 `v128.load16x4_s` (Simd)
    V128Load16x4S,
    /// 0xFD 0x04 `v128.load16x4_u` (Simd)
    V128Load16x4U,
    /// 0xFD 0x05 `v128.load32x2_s` (Simd)
    V128Load32x2S,
    /// 0xFD 0x06 `v128.load32x2_u` (Simd)
    V128Load32x2U,
    /// 0xFD 0x07 `v128.load8_splat` (Simd)
    V128Load8Splat,
    /// 0xFD 0x08 `v128.load16_splat` (Simd)
    V128Load16Splat,
    /// 0xFD 0x09 `v128.load32_splat` (Simd)
    V128Load32Splat,
    /// 0xFD 0x0A `v128.load64_splat` (Simd)
    V128Load64Splat,
    /// 0xFD 0x0B `v128.store` (Simd)
    V128Store,
    /// 0xFD 0x0C `v128.const` (Simd)
    V128Const,
    /// 0xFD 0x0D `i8x16.shuffle` (Simd)
    I8x16Shuffle,
    /// 0xFD 0x0E `i8x16.swizzle` (Simd)
    I8x16Swizzle,
    /// 0xFD 0x0F `i8x16.splat` (Simd)
    I8x16Splat,
    /// 0xFD 0x10 `i16x8.splat` (Simd)
    I16x8Splat,
    /// 0xFD 0x11 `i32x4.splat` (Simd)
    I32x4Splat,
    /// 0xFD 0x12 `i64x2.splat` (Simd)
    I64x2Splat,
    /// 0xFD 0x13 `f32x4.splat` (Simd)
    F32x4Splat,
    /// 0xFD 0x14 `f64x2.splat` (Simd)
    F64x2Splat,
    /// 0xFD 0x15 `i8x16.extract_lane_s` (Simd)
    I8x16ExtractLaneS,
    /// 0xFD 0x16 `i8x16.extract_lane_u` (Simd)
    I8x16ExtractLaneU,
    /// 0xFD 0x17 `i8x16.replace_lane` (Simd)
    I8x16ReplaceLane,
    /// 0xFD 0x18 `i16x8.extract_lane_s` (Simd)
    I16x8ExtractLaneS,
    /// 0xFD 0x19 `i16x8.extract_lane_u` (Simd)
    I16x8ExtractLaneU,
    /// 0xFD 0x1A `i16x8.replace_lane` (Simd)
    I16x8ReplaceLane,
    /// 0xFD 0x1B `i32x4.extract_lane` (Simd)
    I32x4ExtractLane,
    /// 0xFD 0x1C `i32x4.replace_lane` (Simd)
    I32x4ReplaceLane,
    /// 0xFD 0x1D `i64x2.extract_lane` (Simd)
    I64x2ExtractLane,
    /// 0xFD 0x1E `i64x2.replace_lane` (Simd)
    I64x2ReplaceLane,
    /// 0xFD 0x1F `f32x4.extract_lane` (Simd)
    F32x4ExtractLane,
    /// 0xFD 0x20 `f32x4.replace_lane` (Simd)
    F32x4ReplaceLane,
    /// 0xFD 0x21 `f64x2.extract_lane` (Simd)
    F64x2ExtractLane,
    /// 0xFD 0x22 `f64x2.replace_lane` (Simd)
    F64x2ReplaceLane,
    /// 0xFD 0x23 `i8x16.eq` (Simd)
    I8x16Eq,
    /// 0xFD 0x24 `i8x16.ne` (Simd)
    I8x16Ne,
    /// 0xFD 0x25 `i8x16.lt_s` (Simd)
    I8x16LtS,
    /// 0xFD 0x26 `i8x16.lt_u` (Simd)
    I8x16LtU,
    /// 0xFD 0x27 `i8x16.gt_s` (Simd)
    I8x16GtS,
    /// 0xFD 0x28 `i8x16.gt_u` (Simd)
    I8x16GtU,
    /// 0xFD 0x29 `i8x16.le_s` (Simd)
    I8x16LeS,
    /// 0xFD 0x2A `i8x16.le_u` (Simd)
    I8x16LeU,
    /// 0xFD 0x2B `i8x16.ge_s` (Simd)
    I8x16GeS,
    /// 0xFD 0x2C `i8x16.ge_u` (Simd)
    I8x16GeU,
    /// 0xFD 0x2D `i16x8.eq` (Simd)
    I16x8Eq,
    /// 0xFD 0x2E `i16x8.ne` (Simd)
    I16x8Ne,
    /// 0xFD 0x2F `i16x8.lt_s` (Simd)
    I16x8LtS,
    /// 0xFD 0x30 `i16x8.lt_u` (Simd)
    I16x8LtU,
    /// 0xFD 0x31 `i16x8.gt_s` (Simd)
    I16x8GtS,
    /// 0xFD 0x32 `i16x8.gt_u` (Simd)
    I16x8GtU,
    /// 0xFD 0x33 `i16x8.le_s` (Simd)
    I16x8LeS,
    /// 0xFD 0x34 `i16x8.le_u` (Simd)
    I16x8LeU,
    /// 0xFD 0x35 `i16x8.ge_s` (Simd)
    I16x8GeS,
    /// 0xFD 0x36 `i16x8.ge_u` (Simd)
    I16x8GeU,
    /// 0xFD 0x37 `i32x4.eq` (Simd)
    I32x4Eq,
    /// 0xFD 0x38 `i32x4.ne` (Simd)
    I32x4Ne,
    /// 0xFD 0x39 `i32x4.lt_s` (Simd)
    I32x4LtS,
    /// 0xFD 0x3A `i32x4.lt_u` (Simd)
    I32x4LtU,
    /// 0xFD 0x3B `i32x4.gt_s` (Simd)
    I32x4GtS,
    /// 0xFD 0x3C `i32x4.gt_u` (Simd)
    I32x4GtU,
    /// 0xFD 0x3D `i32x4.le_s` (Simd)
    I32x4LeS,
    /// 0xFD 0x3E `i32x4.le_u` (Simd)
    I32x4LeU,
    /// 0xFD 0x3F `i32x4.ge_s` (Simd)
    I32x4GeS,
    /// 0xFD 0x40 `i32x4.ge_u` (Simd)
    I32x4GeU,
    /// 0xFD 0x41 `f32x4.eq` (Simd)
    F32x4Eq,
    /// 0xFD 0x42 `f32x4.ne` (Simd)
    F32x4Ne,
    /// 0xFD 0x43 `f32x4.lt` (Simd)
    F32x4Lt,
    /// 0xFD 0x44 `f32x4.gt` (Simd)
    F32x4Gt,
    /// 0xFD 0x45 `f32x4.le` (Simd)
    F32x4Le,
    /// 0xFD 0x46 `f32x4.ge` (Simd)
    F32x4Ge,
    /// 0xFD 0x47 `f64x2.eq` (Simd)
    F64x2Eq,
    /// 0xFD 0x48 `f64x2.ne` (Simd)
    F64x2Ne,
    /// 0xFD 0x49 `f64x2.lt` (Simd)
    F64x2Lt,
    /// 0xFD 0x4A `f64x2.gt` (Simd)
    F64x2Gt,
    /// 0xFD 0x4B `f64x2.le` (Simd)
    F64x2Le,
    /// 0xFD 0x4C `f64x2.ge` (Simd)
    F64x2Ge,
    /// 0xFD 0x4D `v128.not` (Simd)
    V128Not,
    /// 0xFD 0x4E `v128.and` (Simd)
    V128And,
    /// 0xFD 0x4F `v128.andnot` (Simd)
    V128Andnot,
    /// 0xFD 0x50 `v128.or` (Simd)
    V128Or,
    /// 0xFD 0x51 `v128.xor` (Simd)
    V128Xor,
    /// 0xFD 0x52 `v128.bitselect` (Simd)
    V128Bitselect,
    /// 0xFD 0x53 `v128.any_true` (Simd)
    V128AnyTrue,
    /// 0xFD 0x54 `v128.load8_lane` (Simd)
    V128Load8Lane,
    /// 0xFD 0x55 `v128.load16_lane` (Simd)
    V128Load16Lane,
    /// 0xFD 0x56 `v128.load32_lane` (Simd)
    V128Load32Lane,
    /// 0xFD 0x57 `v128.load64_lane` (Simd)
    V128Load64Lane,
    /// 0xFD 0x58 `v128.store8_lane` (Simd)
    V128Store8Lane,
    /// 0xFD 0x59 `v128.store16_lane` (Simd)
    V128Store16Lane,
    /// 0xFD 0x5A `v128.store32_lane` (Simd)
    V128Store32Lane,
    /// 0xFD 0x5B `v128.store64_lane` (Simd)
    V128Store64Lane,
    /// 0xFD 0x5C `v128.load32_zero` (Simd)
    V128Load32Zero,
    /// 0xFD 0x5D `v128.load64_zero` (Simd)
    V128Load64Zero,
    /// 0xFD 0x5E `f32x4.demote_f64x2_zero` (Simd)
    F32x4DemoteF64x2Zero,
    /// 0xFD 0x5F `f64x2.promote_low_f32x4` (Simd)
    F64x2PromoteLowF32x4,
    /// 0xFD 0x60 `i8x16.abs` (Simd)
    I8x16Abs,
    /// 0xFD 0x61 `i8x16.neg` (Simd)
    I8x16Neg,
    /// 0xFD 0x62 `i8x16.popcnt` (Simd)
    I8x16Popcnt,
    /// 0xFD 0x63 `i8x16.all_true` (Simd)
    I8x16AllTrue,
    /// 0xFD 0x64 `i8x16.bitmask` (Simd)
    I8x16Bitmask,
    /// 0xFD 0x65 `i8x16.narrow_i16x8_s` (Simd)
    I8x16NarrowI16x8S,
    /// 0xFD 0x66 `i8x16.narrow_i16x8_u` (Simd)
    I8x16NarrowI16x8U,
    /// 0xFD 0x67 `f32x4.ceil` (Simd)
    F32x4Ceil,
    /// 0xFD 0x68 `f32x4.floor` (Simd)
    F32x4Floor,
    /// 0xFD 0x69 `f32x4.trunc` (Simd)
    F32x4Trunc,
    /// 0xFD 0x6A `f32x4.nearest` (Simd)
    F32x4Nearest,
    /// 0xFD 0x6B `i8x16.shl` (Simd)
    I8x16Shl,
    /// 0xFD 0x6C `i8x16.shr_s` (Simd)
    I8x16ShrS,
    /// 0xFD 0x6D `i8x16.shr_u` (Simd)
    I8x16ShrU,
    /// 0xFD 0x6E `i8x16.add` (Simd)
    I8x16Add,
    /// 0xFD 0x6F `i8x16.add_sat_s` (Simd)
    I8x16AddSatS,
    /// 0xFD 0x70 `i8x16.add_sat_u` (Simd)
    I8x16AddSatU,
    /// 0xFD 0x71 `i8x16.sub` (Simd)
    I8x16Sub,
    /// 0xFD 0x72 `i8x16.sub_sat_s` (Simd)
    I8x16SubSatS,
    /// 0xFD 0x73 `i8x16.sub_sat_u` (Simd)
    I8x16SubSatU,
    /// 0xFD 0x74 `f64x2.ceil` (Simd)
    F64x2Ceil,
    /// 0xFD 0x75 `f64x2.floor` (Simd)
    F64x2Floor,
    /// 0xFD 0x76 `i8x16.min_s` (Simd)
    I8x16MinS,
    /// 0xFD 0x77 `i8x16.min_u` (Simd)
    I8x16MinU,
    /// 0xFD 0x78 `i8x16.max_s` (Simd)
    I8x16MaxS,
    /// 0xFD 0x79 `i8x16.max_u` (Simd)
    I8x16MaxU,
    /// 0xFD 0x7A `f64x2.trunc` (Simd)
    F64x2Trunc,
    /// 0xFD 0x7B `i8x16.avgr_u` (Simd)
    I8x16AvgrU,
    /// 0xFD 0x7C `i16x8.extadd_pairwise_i8x16_s` (Simd)
    I16x8ExtaddPairwiseI8x16S,
    /// 0xFD 0x7D `i16x8.extadd_pairwise_i8x16_u` (Simd)
    I16x8ExtaddPairwiseI8x16U,
    /// 0xFD 0x7E `i32x4.extadd_pairwise_i16x8_s` (Simd)
    I32x4ExtaddPairwiseI16x8S,
    /// 0xFD 0x7F `i32x4.extadd_pairwise_i16x8_u` (Simd)
    I32x4ExtaddPairwiseI16x8U,
    /// 0xFD 0x80 `i16x8.abs` (Simd)
    I16x8Abs,
    /// 0xFD 0x81 `i16x8.neg` (Simd)
    I16x8Neg,
    /// 0xFD 0x82 `i16x8.q15mulr_sat_s` (Simd)
    I16x8Q15mulrSatS,
    /// 0xFD 0x83 `i16x8.all_true` (Simd)
    I16x8AllTrue,
    /// 0xFD 0x84 `i16x8.bitmask` (Simd)
    I16x8Bitmask,
    /// 0xFD 0x85 `i16x8.narrow_i32x4_s` (Simd)
    I16x8NarrowI32x4S,
    /// 0xFD 0x86 `i16x8.narrow_i32x4_u` (Simd)
    I16x8NarrowI32x4U,
    /// 0xFD 0x87 `i16x8.extend_low_i8x16_s` (Simd)
    I16x8ExtendLowI8x16S,
    /// 0xFD 0x88 `i16x8.extend_high_i8x16_s` (Simd)
    I16x8ExtendHighI8x16S,
    /// 0xFD 0x89 `i16x8.extend_low_i8x16_u` (Simd)
    I16x8ExtendLowI8x16U,
    /// 0xFD 0x8A `i16x8.extend_high_i8x16_u` (Simd)
    I16x8ExtendHighI8x16U,
    /// 0xFD 0x8B `i16x8.shl` (Simd)
    I16x8Shl,
    /// 0xFD 0x8C `i16x8.shr_s` (Simd)
    I16x8ShrS,
    /// 0xFD 0x8D `i16x8.shr_u` (Simd)
    I16x8ShrU,
    /// 0xFD 0x8E `i16x8.add` (Simd)
    I16x8Add,
    /// 0xFD 0x8F `i16x8.add_sat_s` (Simd)
    I16x8AddSatS,
    /// 0xFD 0x90 `i16x8.add_sat_u` (Simd)
    I16x8AddSatU,
    /// 0xFD 0x91 `i16x8.sub` (Simd)
    I16x8Sub,
    /// 0xFD 0x92 `i16x8.sub_sat_s` (Simd)
    I16x8SubSatS,
    /// 0xFD 0x93 `i16x8.sub_sat_u` (Simd)
    I16x8SubSatU,
    /// 0xFD 0x94 `f64x2.nearest` (Simd)
    F64x2Nearest,
    /// 0xFD 0x95 `i16x8.mul` (Simd)
    I16x8Mul,
    /// 0xFD 0x96 `i16x8.min_s` (Simd)
    I16x8MinS,
    /// 0xFD 0x97 `i16x8.min_u` (Simd)
    I16x8MinU,
    /// 0xFD 0x98 `i16x8.max_s` (Simd)
    I16x8MaxS,
    /// 0xFD 0x99 `i16x8.max_u` (Simd)
    I16x8MaxU,
    /// 0xFD 0x9B `i16x8.avgr_u` (Simd)
    I16x8AvgrU,
    /// 0xFD 0x9C `i16x8.extmul_low_i8x16_s` (Simd)
    I16x8ExtmulLowI8x16S,
    /// 0xFD 0x9D `i16x8.extmul_high_i8x16_s` (Simd)
    I16x8ExtmulHighI8x16S,
    /// 0xFD 0x9E `i16x8.extmul_low_i8x16_u` (Simd)
    I16x8ExtmulLowI8x16U,
    /// 0xFD 0x9F `i16x8.extmul_high_i8x16_u` (Simd)
    I16x8ExtmulHighI8x16U,
    /// 0xFD 0xA0 `i32x4.abs` (Simd)
    I32x4Abs,
    /// 0xFD 0xA1 `i32x4.neg` (Simd)
    I32x4Neg,
    /// 0xFD 0xA3 `i32x4.all_true` (Simd)
    I32x4AllTrue,
    /// 0xFD 0xA4 `i32x4.bitmask` (Simd)
    I32x4Bitmask,
    /// 0xFD 0xA7 `i32x4.extend_low_i16x8_s` (Simd)
    I32x4ExtendLowI16x8S,
    /// 0xFD 0xA8 `i32x4.extend_high_i16x8_s` (Simd)
    I32x4ExtendHighI16x8S,
    /// 0xFD 0xA9 `i32x4.extend_low_i16x8_u` (Simd)
    I32x4ExtendLowI16x8U,
    /// 0xFD 0xAA `i32x4.extend_high_i16x8_u` (Simd)
    I32x4ExtendHighI16x8U,
    /// 0xFD 0xAB `i32x4.shl` (Simd)
    I32x4Shl,
    /// 0xFD 0xAC `i32x4.shr_s` (Simd)
    I32x4ShrS,
    /// 0xFD 0xAD `i32x4.shr_u` (Simd)
    I32x4ShrU,
    /// 0xFD 0xAE `i32x4.add` (Simd)
    I32x4Add,
    /// 0xFD 0xB1 `i32x4.sub` (Simd)
    I32x4Sub,
    /// 0xFD 0xB5 `i32x4.mul` (Simd)
    I32x4Mul,
    /// 0xFD 0xB6 `i32x4.min_s` (Simd)
    I32x4MinS,
    /// 0xFD 0xB7 `i32x4.min_u` (Simd)
    I32x4MinU,
    /// 0xFD 0xB8 `i32x4.max_s` (Simd)
    I32x4MaxS,
    /// 0xFD 0xB9 `i32x4.max_u` (Simd)
    I32x4MaxU,
    /// 0xFD 0xBA `i32x4.dot_i16x8_s` (Simd)
    I32x4DotI16x8S,
    /// 0xFD 0xBC `i32x4.extmul_low_i16x8_s` (Simd)
    I32x4ExtmulLowI16x8S,
    /// 0xFD 0xBD `i32x4.extmul_high_i16x8_s` (Simd)
    I32x4ExtmulHighI16x8S,
    /// 0xFD 0xBE `i32x4.extmul_low_i16x8_u` (Simd)
    I32x4ExtmulLowI16x8U,
    /// 0xFD 0xBF `i32x4.extmul_high_i16x8_u` (Simd)
    I32x4ExtmulHighI16x8U,
    /// 0xFD 0xC0 `i64x2.abs` (Simd)
    I64x2Abs,
    /// 0xFD 0xC1 `i64x2.neg` (Simd)
    I64x2Neg,
    /// 0xFD 0xC3 `i64x2.all_true` (Simd)
    I64x2AllTrue,
    /// 0xFD 0xC4 `i64x2.bitmask` (Simd)
    I64x2Bitmask,
    /// 0xFD 0xC7 `i64x2.extend_low_i32x4_s` (Simd)
    I64x2ExtendLowI32x4S,
    /// 0xFD 0xC8 `i64x2.extend_high_i32x4_s` (Simd)
    I64x2ExtendHighI32x4S,
    /// 0xFD 0xC9 `i64x2.extend_low_i32x4_u` (Simd)
    I64x2ExtendLowI32x4U,
    /// 0xFD 0xCA `i64x2.extend_high_i32x4_u` (Simd)
    I64x2ExtendHighI32x4U,
    /// 0xFD 0xCB `i64x2.shl` (Simd)
    I64x2Shl,
    /// 0xFD 0xCC `i64x2.shr_s` (Simd)
    I64x2ShrS,
    /// 0xFD 0xCD `i64x2.shr_u` (Simd)
    I64x2ShrU,
    /// 0xFD 0xCE `i64x2.add` (Simd)
    I64x2Add,
    /// 0xFD 0xD1 `i64x2.sub` (Simd)
    I64x2Sub,
    /// 0xFD 0xD5 `i64x2.mul` (Simd)
    I64x2Mul,
    /// 0xFD 0xD6 `i64x2.eq` (Simd)
    I64x2Eq,
    /// 0xFD 0xD7 `i64x2.ne` (Simd)
    I64x2Ne,
    /// 0xFD 0xD8 `i64x2.lt_s` (Simd)
    I64x2LtS,
    /// 0xFD 0xD9 `i64x2.gt_s` (Simd)
    I64x2GtS,
    /// 0xFD 0xDA `i64x2.le_s` (Simd)
    I64x2LeS,
    /// 0xFD 0xDB `i64x2.ge_s` (Simd)
    I64x2GeS,
    /// 0xFD 0xDC `i64x2.extmul_low_i32x4_s` (Simd)
    I64x2ExtmulLowI32x4S,
    /// 0xFD 0xDD `i64x2.extmul_high_i32x4_s` (Simd)
    I64x2ExtmulHighI32x4S,
    /// 0xFD 0xDE `i64x2.extmul_low_i32x4_u` (Simd)
    I64x2ExtmulLowI32x4U,
    /// 0xFD 0xDF `i64x2.extmul_high_i32x4_u` (Simd)
    I64x2ExtmulHighI32x4U,
    /// 0xFD 0xE0 `f32x4.abs` (Simd)
    F32x4Abs,
    /// 0xFD 0xE1 `f32x4.neg` (Simd)
    F32x4Neg,
    /// 0xFD 0xE3 `f32x4.sqrt` (Simd)
    F32x4Sqrt,
    /// 0xFD 0xE4 `f32x4.add` (Simd)
    F32x4Add,
    /// 0xFD 0xE5 `f32x4.sub` (Simd)
    F32x4Sub,
    /// 0xFD 0xE6 `f32x4.mul` (Simd)
    F32x4Mul,
    /// 0xFD 0xE7 `f32x4.div` (Simd)
    F32x4Div,
    /// 0xFD 0xE8 `f32x4.min` (Simd)
    F32x4Min,
    /// 0xFD 0xE9 `f32x4.max` (Simd)
    F32x4Max,
    /// 0xFD 0xEA `f32x4.pmin` (Simd)
    F32x4Pmin,
    /// 0xFD 0xEB `f32x4.pmax` (Simd)
    F32x4Pmax,
    /// 0xFD 0xEC `f64x2.abs` (Simd)
    F64x2Abs,
    /// 0xFD 0xED `f64x2.neg` (Simd)
    F64x2Neg,
    /// 0xFD 0xEF `f64x2.sqrt` (Simd)
    F64x2Sqrt,
    /// 0xFD 0xF0 `f64x2.add` (Simd)
    F64x2Add,
    /// 0xFD 0xF1 `f64x2.sub` (Simd)
    F64x2Sub,
    /// 0xFD 0xF2 `f64x2.mul` (Simd)
    F64x2Mul,
    /// 0xFD 0xF3 `f64x2.div` (Simd)
    F64x2Div,
    /// 0xFD 0xF4 `f64x2.min` (Simd)
    F64x2Min,
    /// 0xFD 0xF5 `f64x2.max` (Simd)
    F64x2Max,
    /// 0xFD 0xF6 `f64x2.pmin` (Simd)
    F64x2Pmin,
    /// 0xFD 0xF7 `f64x2.pmax` (Simd)
    F64x2Pmax,
    /// 0xFD 0xF8 `i32x4.trunc_sat_f32x4_s` (Simd)
    I32x4TruncSatF32x4S,
    /// 0xFD 0xF9 `i32x4.trunc_sat_f32x4_u` (Simd)
    I32x4TruncSatF32x4U,
    /// 0xFD 0xFA `f32x4.convert_i32x4_s` (Simd)
    F32x4ConvertI32x4S,
    /// 0xFD 0xFB `f32x4.convert_i32x4_u` (Simd)
    F32x4ConvertI32x4U,
    /// 0xFD 0xFC `i32x4.trunc_sat_f64x2_s_zero` (Simd)
    I32x4TruncSatF64x2SZero,
    /// 0xFD 0xFD `i32x4.trunc_sat_f64x2_u_zero` (Simd)
    I32x4TruncSatF64x2UZero,
    /// 0xFD 0xFE `f64x2.convert_low_i32x4_s` (Simd)
    F64x2ConvertLowI32x4S,
    /// 0xFD 0xFF `f64x2.convert_low_i32x4_u` (Simd)
    F64x2ConvertLowI32x4U,
    /// 0xFD 0x100 `Zi8x16.relaxed_swizzle` (RelaxedSimd)
    Zi8x16RelaxedSwizzle,
    /// 0xFD 0x101 `Zi32x4.relaxed_trunc_f32x4_s` (RelaxedSimd)
    Zi32x4RelaxedTruncF32x4S,
    /// 0xFD 0x102 `i32x4.relaxed_trunc_f32x4_u` (RelaxedSimd)
    I32x4RelaxedTruncF32x4U,
    /// 0xFD 0x103 `i32x4.relaxed_trunc_f64x2_s_zero` (RelaxedSimd)
    I32x4RelaxedTruncF64x2SZero,
    /// 0xFD 0x104 `i32x4.relaxed_trunc_f64x2_u_zero` (RelaxedSimd)
    I32x4RelaxedTruncF64x2UZero,
    /// 0xFD 0x105 `f32x4.relaxed_madd` (RelaxedSimd)
    F32x4RelaxedMadd,
    /// 0xFD 0x106 `f32x4.relaxed_nmadd` (RelaxedSimd)
    F32x4RelaxedNmadd,
    /// 0xFD 0x107 `f64x2.relaxed_madd` (RelaxedSimd)
    F64x2RelaxedMadd,
    /// 0xFD 0x108 `f64x2.relaxed_nmadd` (RelaxedSimd)
    F64x2RelaxedNmadd,
    /// 0xFD 0x109 `i8x16.relaxed_laneselect` (RelaxedSimd)
    I8x16RelaxedLaneselect,
    /// 0xFD 0x10A `i16x8.relaxed_laneselect` (RelaxedSimd)
    I16x8RelaxedLaneselect,
    /// 0xFD 0x10B `i32x4.relaxed_laneselect` (RelaxedSimd)
    I32x4RelaxedLaneselect,
    /// 0xFD 0x10C `i64x2.relaxed_laneselect` (RelaxedSimd)
    I64x2RelaxedLaneselect,
    /// 0xFD 0x10D `f32x4.relaxed_min` (RelaxedSimd)
    F32x4RelaxedMin,
    /// 0xFD 0x10E `f32x4.relaxed_max` (RelaxedSimd)
    F32x4RelaxedMax,
    /// 0xFD 0x10F `f64x2.relaxed_min` (RelaxedSimd)
    F64x2RelaxedMin,
    /// 0xFD 0x110 `f64x2.relaxed_max` (RelaxedSimd)
    F64x2RelaxedMax,
    /// 0xFD 0x111 `i16x8.relaxed_q15mulr_s` (RelaxedSimd)
    I16x8RelaxedQ15mulrS,
    /// 0xFD 0x112 `i16x8.relaxed_dot_i8x16_i7x16_s` (RelaxedSimd)
    I16x8RelaxedDotI8x16I7x16S,
    /// 0xFD 0x113 `i32x4.relaxed_dot_i8x16_i7x16_add_s` (RelaxedSimd)
    I32x4RelaxedDotI8x16I7x16AddS,
    /// 0xFD 0x114 `f32x4.relaxed_dot_bf16x8_add_f32x4` (RelaxedSimd)
    F32x4RelaxedDotBf16x8AddF32x4,
    /// 0xFE 0x00 `memory.atomic.notify` (Threads)
    MemoryAtomicNotify,
    /// 0xFE 0x01 `memory.atomic.wait32` (Threads)
    MemoryAtomicWait32,
    /// 0xFE 0x02 `memory.atomic.wait64` (Threads)
    MemoryAtomicWait64,
    /// 0xFE 0x03 `atomic.fence` (Threads)
    AtomicFence,
    /// 0xFE 0x10 `i32.atomic.load` (Threads)
    I32AtomicLoad,
    /// 0xFE 0x11 `i64.atomic.load` (Threads)
    I64AtomicLoad,
    /// 0xFE 0x12 `i32.atomic.load8_u` (Threads)
    I32AtomicLoad8U,
    /// 0xFE 0x13 `i32.atomic.load16_u` (Threads)
    I32AtomicLoad16U,
    /// 0xFE 0x14 `i64.atomic.load8_u` (Threads)
    I64AtomicLoad8U,
    /// 0xFE 0x15 `i64.atomic.load16_u` (Threads)
    I64AtomicLoad16U,
    /// 0xFE 0x16 `i64.atomic.load32_u` (Threads)
    I64AtomicLoad32U,
    /// 0xFE 0x17 `i32.atomic.store` (Threads)
    I32AtomicStore,
    /// 0xFE 0x18 `i64.atomic.store` (Threads)
    I64AtomicStore,
    /// 0xFE 0x19 `i32.atomic.store8` (Threads)
    I32AtomicStore8,
    /// 0xFE 0x1A `i32.atomic.store16` (Threads)
    I32AtomicStore16,
    /// 0xFE 0x1B `i64.atomic.store8` (Threads)
    I64AtomicStore8,
    /// 0xFE 0x1C `i64.atomic.store16` (Threads)
    I64AtomicStore16,
    /// 0xFE 0x1D `i64.atomic.store32` (Threads)
    I64AtomicStore32,
    /// 0xFE 0x1E `i32.atomic.rmw.add` (Threads)
    I32AtomicRmwAdd,
    /// 0xFE 0x1F `i64.atomic.rmw.add` (Threads)
    I64AtomicRmwAdd,
    /// 0xFE 0x20 `i32.atomic.rmw8.add_u` (Threads)
    I32AtomicRmw8AddU,
    /// 0xFE 0x21 `i32.atomic.rmw16.add_u` (Threads)
    I32AtomicRmw16AddU,
    /// 0xFE 0x22 `i64.atomic.rmw8.add_u` (Threads)
    I64AtomicRmw8AddU,
    /// 0xFE 0x23 `i64.atomic.rmw16.add_u` (Threads)
    I64AtomicRmw16AddU,
    /// 0xFE 0x24 `i64.atomic.rmw32.add_u` (Threads)
    I64AtomicRmw32AddU,
    /// 0xFE 0x25 `i32.atomic.rmw.sub` (Threads)
    I32AtomicRmwSub,
    /// 0xFE 0x26 `i64.atomic.rmw.sub` (Threads)
    I64AtomicRmwSub,
    /// 0xFE 0x27 `i32.atomic.rmw8.sub_u` (Threads)
    I32AtomicRmw8SubU,
    /// 0xFE 0x28 `i32.atomic.rmw16.sub_u` (Threads)
    I32AtomicRmw16SubU,
    /// 0xFE 0x29 `i64.atomic.rmw8.sub_u` (Threads)
    I64AtomicRmw8SubU,
    /// 0xFE 0x2A `i64.atomic.rmw16.sub_u` (Threads)
    I64AtomicRmw16SubU,
    /// 0xFE 0x2B `i64.atomic.rmw32.sub_u` (Threads)
    I64AtomicRmw32SubU,
    /// 0xFE 0x2C `i32.atomic.rmw.and` (Threads)
    I32AtomicRmwAnd,
    /// 0xFE 0x2D `i64.atomic.rmw.and` (Threads)
    I64AtomicRmwAnd,
    /// 0xFE 0x2E `i32.atomic.rmw8.and_u` (Threads)
    I32AtomicRmw8AndU,
    /// 0xFE 0x2F `i32.atomic.rmw16.and_u` (Threads)
    I32AtomicRmw16AndU,
    /// 0xFE 0x30 `i64.atomic.rmw8.and_u` (Threads)
    I64AtomicRmw8AndU,
    /// 0xFE 0x31 `i64.atomic.rmw16.and_u` (Threads)
    I64AtomicRmw16AndU,
    /// 0xFE 0x32 `i64.atomic.rmw32.and_u` (Threads)
    I64AtomicRmw32AndU,
    /// 0xFE 0x33 `i32.atomic.rmw.or` (Threads)
    I32AtomicRmwOr,
    /// 0xFE 0x34 `i64.atomic.rmw.or` (Threads)
    I64AtomicRmwOr,
    /// 0xFE 0x35 `i32.atomic.rmw8.or_u` (Threads)
    I32AtomicRmw8OrU,
    /// 0xFE 0x36 `i32.atomic.rmw16.or_u` (Threads)
    I32AtomicRmw16OrU,
    /// 0xFE 0x37 `i64.atomic.rmw8.or_u` (Threads)
    I64AtomicRmw8OrU,
    /// 0xFE 0x38 `i64.atomic.rmw16.or_u` (Threads)
    I64AtomicRmw16OrU,
    /// 0xFE 0x39 `i64.atomic.rmw32.or_u` (Threads)
    I64AtomicRmw32OrU,
    /// 0xFE 0x3A `i32.atomic.rmw.xor` (Threads)
    I32AtomicRmwXor,
    /// 0xFE 0x3B `i64.atomic.rmw.xor` (Threads)
    I64AtomicRmwXor,
    /// 0xFE 0x3C `i32.atomic.rmw8.xor_u` (Threads)
    I32AtomicRmw8XorU,
    /// 0xFE 0x3D `i32.atomic.rmw16.xor_u` (Threads)
    I32AtomicRmw16XorU,
    /// 0xFE 0x3E `i64.atomic.rmw8.xor_u` (Threads)
    I64AtomicRmw8XorU,
    /// 0xFE 0x3F `i64.atomic.rmw16.xor_u` (Threads)
    I64AtomicRmw16XorU,
    /// 0xFE 0x40 `i64.atomic.rmw32.xor_u` (Threads)
    I64AtomicRmw32XorU,
    /// 0xFE 0x41 `i32.atomic.rmw.xchg` (Threads)
    I32AtomicRmwXchg,
    /// 0xFE 0x42 `i64.atomic.rmw.xchg` (Threads)
    I64AtomicRmwXchg,
    /// 0xFE 0x43 `i32.atomic.rmw8.xchg_u` (Threads)
    I32AtomicRmw8XchgU,
    /// 0xFE 0x44 `i32.atomic.rmw16.xchg_u` (Threads)
    I32AtomicRmw16XchgU,
    /// 0xFE 0x45 `i64.atomic.rmw8.xchg_u` (Threads)
    I64AtomicRmw8XchgU,
    /// 0xFE 0x46 `i64.atomic.rmw16.xchg_u` (Threads)
    I64AtomicRmw16XchgU,
    /// 0xFE 0x47 `i64.atomic.rmw32.xchg_u` (Threads)
    I64AtomicRmw32XchgU,
    /// 0xFE 0x48 `i32.atomic.rmw.cmpxchg` (Threads)
    I32AtomicRmwCmpxchg,
    /// 0xFE 0x49 `i64.atomic.rmw.cmpxchg` (Threads)
    I64AtomicRmwCmpxchg,
    /// 0xFE 0x4A `i32.atomic.rmw8.cmpxchg_u` (Threads)
    I32AtomicRmw8CmpxchgU,
    /// 0xFE 0x4B `i32.atomic.rmw16.cmpxchg_u` (Threads)
    I32AtomicRmw16CmpxchgU,
    /// 0xFE 0x4C `i64.atomic.rmw8.cmpxchg_u` (Threads)
    I64AtomicRmw8CmpxchgU,
    /// 0xFE 0x4D `i64.atomic.rmw16.cmpxchg_u` (Threads)
    I64AtomicRmw16CmpxchgU,
    /// 0xFE 0x4E `i64.atomic.rmw32.cmpxchg_u` (Threads)
    I64AtomicRmw32CmpxchgU,
}

impl WasmBytecode {
    pub fn fetch(reader: &mut Leb128Reader) -> Result<Self, WasmDecodeErrorKind> {
        let leading = reader.read_byte()?;
        match leading {
            // 0x00 `unreachable` (MVP)
            0x00 => {
                Ok(Self::Unreachable)
            }
            // 0x01 `nop` (MVP)
            0x01 => {
                Ok(Self::Nop)
            }
            // 0x02 `block` bt (MVP)
            0x02 => {
                let a1 = reader.read()?;
                Ok(Self::Block(a1))
            }
            // 0x03 `loop` bt (MVP)
            0x03 => {
                let a1 = reader.read()?;
                Ok(Self::Loop(a1))
            }
            // 0x04 `if` bt (MVP)
            0x04 => {
                let a1 = reader.read()?;
                Ok(Self::If(a1))
            }
            // 0x05 `else` (MVP)
            0x05 => {
                Ok(Self::Else)
            }
            // 0x0B `end` (MVP)
            0x0B => {
                Ok(Self::End)
            }
            // 0x0C `br` u32 (MVP)
            0x0C => {
                let a1 = reader.read()?;
                Ok(Self::Br(a1))
            }
            // 0x0D `br_if` u32 (MVP)
            0x0D => {
                let a1 = reader.read()?;
                Ok(Self::BrIf(a1))
            }
            // 0x0E `br_table` br_table (MVP)
            0x0E => {
                let a1 = reader.read()?;
                Ok(Self::BrTable(a1))
            }
            // 0x0F `return` (MVP)
            0x0F => {
                Ok(Self::Return)
            }
            // 0x10 `call` u32 (MVP)
            0x10 => {
                let a1 = reader.read()?;
                Ok(Self::Call(a1))
            }
            // 0x11 `call_indirect` u32 u32 (MVP)
            0x11 => {
                let a1 = reader.read()?;
                let a2 = reader.read()?;
                Ok(Self::CallIndirect(a1, a2))
            }
            // 0x12 `return_call` (TailCall)
            0x12 => {
                Ok(Self::ReturnCall)
            }
            // 0x13 `return_call_indirect` (TailCall)
            0x13 => {
                Ok(Self::ReturnCallIndirect)
            }
            // 0x14 `call_ref` (TypedFunctionReferences)
            0x14 => {
                Ok(Self::CallRef)
            }
            // 0x15 `return_call_ref` (TypedFunctionReferences)
            0x15 => {
                Ok(Self::ReturnCallRef)
            }
            // 0x1A `drop` (MVP)
            0x1A => {
                Ok(Self::Drop)
            }
            // 0x1B `select` (MVP)
            0x1B => {
                Ok(Self::Select)
            }
            // 0x1C `select_t` u32 (ReferenceTypes)
            0x1C => {
                let a1 = reader.read()?;
                Ok(Self::SelectT(a1))
            }
            // 0x20 `local.get` u32 (MVP)
            0x20 => {
                let a1 = reader.read()?;
                Ok(Self::LocalGet(a1))
            }
            // 0x21 `local.set` u32 (MVP)
            0x21 => {
                let a1 = reader.read()?;
                Ok(Self::LocalSet(a1))
            }
            // 0x22 `local.tee` u32 (MVP)
            0x22 => {
                let a1 = reader.read()?;
                Ok(Self::LocalTee(a1))
            }
            // 0x23 `global.get` u32 (MVP)
            0x23 => {
                let a1 = reader.read()?;
                Ok(Self::GlobalGet(a1))
            }
            // 0x24 `global.set` u32 (MVP)
            0x24 => {
                let a1 = reader.read()?;
                Ok(Self::GlobalSet(a1))
            }
            // 0x25 `table.get` u32 (ReferenceTypes)
            0x25 => {
                let a1 = reader.read()?;
                Ok(Self::TableGet(a1))
            }
            // 0x26 `table.set` u32 (ReferenceTypes)
            0x26 => {
                let a1 = reader.read()?;
                Ok(Self::TableSet(a1))
            }
            // 0x28 `i32.load` memarg (MVP)
            0x28 => {
                let a1 = reader.read()?;
                Ok(Self::I32Load(a1))
            }
            // 0x29 `i64.load` memarg (MVP)
            0x29 => {
                let a1 = reader.read()?;
                Ok(Self::I64Load(a1))
            }
            // 0x2A `f32.load` memarg (MVP)
            0x2A => {
                let a1 = reader.read()?;
                Ok(Self::F32Load(a1))
            }
            // 0x2B `f64.load` memarg (MVP)
            0x2B => {
                let a1 = reader.read()?;
                Ok(Self::F64Load(a1))
            }
            // 0x2C `i32.load8_s` memarg (MVP)
            0x2C => {
                let a1 = reader.read()?;
                Ok(Self::I32Load8S(a1))
            }
            // 0x2D `i32.load8_u` memarg (MVP)
            0x2D => {
                let a1 = reader.read()?;
                Ok(Self::I32Load8U(a1))
            }
            // 0x2E `i32.load16_s` memarg (MVP)
            0x2E => {
                let a1 = reader.read()?;
                Ok(Self::I32Load16S(a1))
            }
            // 0x2F `i32.load16_u` memarg (MVP)
            0x2F => {
                let a1 = reader.read()?;
                Ok(Self::I32Load16U(a1))
            }
            // 0x30 `i64.load8_s` memarg (MVP)
            0x30 => {
                let a1 = reader.read()?;
                Ok(Self::I64Load8S(a1))
            }
            // 0x31 `i64.load8_u` memarg (MVP)
            0x31 => {
                let a1 = reader.read()?;
                Ok(Self::I64Load8U(a1))
            }
            // 0x32 `i64.load16_s` memarg (MVP)
            0x32 => {
                let a1 = reader.read()?;
                Ok(Self::I64Load16S(a1))
            }
            // 0x33 `i64.load16_u` memarg (MVP)
            0x33 => {
                let a1 = reader.read()?;
                Ok(Self::I64Load16U(a1))
            }
            // 0x34 `i64.load32_s` memarg (MVP)
            0x34 => {
                let a1 = reader.read()?;
                Ok(Self::I64Load32S(a1))
            }
            // 0x35 `i64.load32_u` memarg (MVP)
            0x35 => {
                let a1 = reader.read()?;
                Ok(Self::I64Load32U(a1))
            }
            // 0x36 `i32.store` memarg (MVP)
            0x36 => {
                let a1 = reader.read()?;
                Ok(Self::I32Store(a1))
            }
            // 0x37 `i64.store` memarg (MVP)
            0x37 => {
                let a1 = reader.read()?;
                Ok(Self::I64Store(a1))
            }
            // 0x38 `f32.store` memarg (MVP)
            0x38 => {
                let a1 = reader.read()?;
                Ok(Self::F32Store(a1))
            }
            // 0x39 `f64.store` memarg (MVP)
            0x39 => {
                let a1 = reader.read()?;
                Ok(Self::F64Store(a1))
            }
            // 0x3A `i32.store8` memarg (MVP)
            0x3A => {
                let a1 = reader.read()?;
                Ok(Self::I32Store8(a1))
            }
            // 0x3B `i32.store16` memarg (MVP)
            0x3B => {
                let a1 = reader.read()?;
                Ok(Self::I32Store16(a1))
            }
            // 0x3C `i64.store8` memarg (MVP)
            0x3C => {
                let a1 = reader.read()?;
                Ok(Self::I64Store8(a1))
            }
            // 0x3D `i64.store16` memarg (MVP)
            0x3D => {
                let a1 = reader.read()?;
                Ok(Self::I64Store16(a1))
            }
            // 0x3E `i64.store32` memarg (MVP)
            0x3E => {
                let a1 = reader.read()?;
                Ok(Self::I64Store32(a1))
            }
            // 0x3F `memory.size` u32 (MVP)
            0x3F => {
                let a1 = reader.read()?;
                Ok(Self::MemorySize(a1))
            }
            // 0x40 `memory.grow` u32 (MVP)
            0x40 => {
                let a1 = reader.read()?;
                Ok(Self::MemoryGrow(a1))
            }
            // 0x41 `i32.const` i32 (MVP)
            0x41 => {
                let a1 = reader.read()?;
                Ok(Self::I32Const(a1))
            }
            // 0x42 `i64.const` i64 (MVP)
            0x42 => {
                let a1 = reader.read()?;
                Ok(Self::I64Const(a1))
            }
            // 0x43 `f32.const` f32 (MVP)
            0x43 => {
                let a1 = reader.read()?;
                Ok(Self::F32Const(a1))
            }
            // 0x44 `f64.const` f64 (MVP)
            0x44 => {
                let a1 = reader.read()?;
                Ok(Self::F64Const(a1))
            }
            // 0x45 `i32.eqz` (MVP)
            0x45 => {
                Ok(Self::I32Eqz)
            }
            // 0x46 `i32.eq` (MVP)
            0x46 => {
                Ok(Self::I32Eq)
            }
            // 0x47 `i32.ne` (MVP)
            0x47 => {
                Ok(Self::I32Ne)
            }
            // 0x48 `i32.lt_s` (MVP)
            0x48 => {
                Ok(Self::I32LtS)
            }
            // 0x49 `i32.lt_u` (MVP)
            0x49 => {
                Ok(Self::I32LtU)
            }
            // 0x4A `i32.gt_s` (MVP)
            0x4A => {
                Ok(Self::I32GtS)
            }
            // 0x4B `i32.gt_u` (MVP)
            0x4B => {
                Ok(Self::I32GtU)
            }
            // 0x4C `i32.le_s` (MVP)
            0x4C => {
                Ok(Self::I32LeS)
            }
            // 0x4D `i32.le_u` (MVP)
            0x4D => {
                Ok(Self::I32LeU)
            }
            // 0x4E `i32.ge_s` (MVP)
            0x4E => {
                Ok(Self::I32GeS)
            }
            // 0x4F `i32.ge_u` (MVP)
            0x4F => {
                Ok(Self::I32GeU)
            }
            // 0x50 `i64.eqz` (MVP)
            0x50 => {
                Ok(Self::I64Eqz)
            }
            // 0x51 `i64.eq` (MVP)
            0x51 => {
                Ok(Self::I64Eq)
            }
            // 0x52 `i64.ne` (MVP)
            0x52 => {
                Ok(Self::I64Ne)
            }
            // 0x53 `i64.lt_s` (MVP)
            0x53 => {
                Ok(Self::I64LtS)
            }
            // 0x54 `i64.lt_u` (MVP)
            0x54 => {
                Ok(Self::I64LtU)
            }
            // 0x55 `i64.gt_s` (MVP)
            0x55 => {
                Ok(Self::I64GtS)
            }
            // 0x56 `i64.gt_u` (MVP)
            0x56 => {
                Ok(Self::I64GtU)
            }
            // 0x57 `i64.le_s` (MVP)
            0x57 => {
                Ok(Self::I64LeS)
            }
            // 0x58 `i64.le_u` (MVP)
            0x58 => {
                Ok(Self::I64LeU)
            }
            // 0x59 `i64.ge_s` (MVP)
            0x59 => {
                Ok(Self::I64GeS)
            }
            // 0x5A `i64.ge_u` (MVP)
            0x5A => {
                Ok(Self::I64GeU)
            }
            // 0x5B `f32.eq` (MVP)
            0x5B => {
                Ok(Self::F32Eq)
            }
            // 0x5C `f32.ne` (MVP)
            0x5C => {
                Ok(Self::F32Ne)
            }
            // 0x5D `f32.lt` (MVP)
            0x5D => {
                Ok(Self::F32Lt)
            }
            // 0x5E `f32.gt` (MVP)
            0x5E => {
                Ok(Self::F32Gt)
            }
            // 0x5F `f32.le` (MVP)
            0x5F => {
                Ok(Self::F32Le)
            }
            // 0x60 `f32.ge` (MVP)
            0x60 => {
                Ok(Self::F32Ge)
            }
            // 0x61 `f64.eq` (MVP)
            0x61 => {
                Ok(Self::F64Eq)
            }
            // 0x62 `f64.ne` (MVP)
            0x62 => {
                Ok(Self::F64Ne)
            }
            // 0x63 `f64.lt` (MVP)
            0x63 => {
                Ok(Self::F64Lt)
            }
            // 0x64 `f64.gt` (MVP)
            0x64 => {
                Ok(Self::F64Gt)
            }
            // 0x65 `f64.le` (MVP)
            0x65 => {
                Ok(Self::F64Le)
            }
            // 0x66 `f64.ge` (MVP)
            0x66 => {
                Ok(Self::F64Ge)
            }
            // 0x67 `i32.clz` (MVP)
            0x67 => {
                Ok(Self::I32Clz)
            }
            // 0x68 `i32.ctz` (MVP)
            0x68 => {
                Ok(Self::I32Ctz)
            }
            // 0x69 `i32.popcnt` (MVP)
            0x69 => {
                Ok(Self::I32Popcnt)
            }
            // 0x6A `i32.add` (MVP)
            0x6A => {
                Ok(Self::I32Add)
            }
            // 0x6B `i32.sub` (MVP)
            0x6B => {
                Ok(Self::I32Sub)
            }
            // 0x6C `i32.mul` (MVP)
            0x6C => {
                Ok(Self::I32Mul)
            }
            // 0x6D `i32.div_s` (MVP)
            0x6D => {
                Ok(Self::I32DivS)
            }
            // 0x6E `i32.div_u` (MVP)
            0x6E => {
                Ok(Self::I32DivU)
            }
            // 0x6F `i32.rem_s` (MVP)
            0x6F => {
                Ok(Self::I32RemS)
            }
            // 0x70 `i32.rem_u` (MVP)
            0x70 => {
                Ok(Self::I32RemU)
            }
            // 0x71 `i32.and` (MVP)
            0x71 => {
                Ok(Self::I32And)
            }
            // 0x72 `i32.or` (MVP)
            0x72 => {
                Ok(Self::I32Or)
            }
            // 0x73 `i32.xor` (MVP)
            0x73 => {
                Ok(Self::I32Xor)
            }
            // 0x74 `i32.shl` (MVP)
            0x74 => {
                Ok(Self::I32Shl)
            }
            // 0x75 `i32.shr_s` (MVP)
            0x75 => {
                Ok(Self::I32ShrS)
            }
            // 0x76 `i32.shr_u` (MVP)
            0x76 => {
                Ok(Self::I32ShrU)
            }
            // 0x77 `i32.rotl` (MVP)
            0x77 => {
                Ok(Self::I32Rotl)
            }
            // 0x78 `i32.rotr` (MVP)
            0x78 => {
                Ok(Self::I32Rotr)
            }
            // 0x79 `i64.clz` (MVP)
            0x79 => {
                Ok(Self::I64Clz)
            }
            // 0x7A `i64.ctz` (MVP)
            0x7A => {
                Ok(Self::I64Ctz)
            }
            // 0x7B `i64.popcnt` (MVP)
            0x7B => {
                Ok(Self::I64Popcnt)
            }
            // 0x7C `i64.add` (MVP)
            0x7C => {
                Ok(Self::I64Add)
            }
            // 0x7D `i64.sub` (MVP)
            0x7D => {
                Ok(Self::I64Sub)
            }
            // 0x7E `i64.mul` (MVP)
            0x7E => {
                Ok(Self::I64Mul)
            }
            // 0x7F `i64.div_s` (MVP)
            0x7F => {
                Ok(Self::I64DivS)
            }
            // 0x80 `i64.div_u` (MVP)
            0x80 => {
                Ok(Self::I64DivU)
            }
            // 0x81 `i64.rem_s` (MVP)
            0x81 => {
                Ok(Self::I64RemS)
            }
            // 0x82 `i64.rem_u` (MVP)
            0x82 => {
                Ok(Self::I64RemU)
            }
            // 0x83 `i64.and` (MVP)
            0x83 => {
                Ok(Self::I64And)
            }
            // 0x84 `i64.or` (MVP)
            0x84 => {
                Ok(Self::I64Or)
            }
            // 0x85 `i64.xor` (MVP)
            0x85 => {
                Ok(Self::I64Xor)
            }
            // 0x86 `i64.shl` (MVP)
            0x86 => {
                Ok(Self::I64Shl)
            }
            // 0x87 `i64.shr_s` (MVP)
            0x87 => {
                Ok(Self::I64ShrS)
            }
            // 0x88 `i64.shr_u` (MVP)
            0x88 => {
                Ok(Self::I64ShrU)
            }
            // 0x89 `i64.rotl` (MVP)
            0x89 => {
                Ok(Self::I64Rotl)
            }
            // 0x8A `i64.rotr` (MVP)
            0x8A => {
                Ok(Self::I64Rotr)
            }
            // 0x8B `f32.abs` (MVP)
            0x8B => {
                Ok(Self::F32Abs)
            }
            // 0x8C `f32.neg` (MVP)
            0x8C => {
                Ok(Self::F32Neg)
            }
            // 0x8D `f32.ceil` (MVP)
            0x8D => {
                Ok(Self::F32Ceil)
            }
            // 0x8E `f32.floor` (MVP)
            0x8E => {
                Ok(Self::F32Floor)
            }
            // 0x8F `f32.trunc` (MVP)
            0x8F => {
                Ok(Self::F32Trunc)
            }
            // 0x90 `f32.nearest` (MVP)
            0x90 => {
                Ok(Self::F32Nearest)
            }
            // 0x91 `f32.sqrt` (MVP)
            0x91 => {
                Ok(Self::F32Sqrt)
            }
            // 0x92 `f32.add` (MVP)
            0x92 => {
                Ok(Self::F32Add)
            }
            // 0x93 `f32.sub` (MVP)
            0x93 => {
                Ok(Self::F32Sub)
            }
            // 0x94 `f32.mul` (MVP)
            0x94 => {
                Ok(Self::F32Mul)
            }
            // 0x95 `f32.div` (MVP)
            0x95 => {
                Ok(Self::F32Div)
            }
            // 0x96 `f32.min` (MVP)
            0x96 => {
                Ok(Self::F32Min)
            }
            // 0x97 `f32.max` (MVP)
            0x97 => {
                Ok(Self::F32Max)
            }
            // 0x98 `f32.copysign` (MVP)
            0x98 => {
                Ok(Self::F32Copysign)
            }
            // 0x99 `f64.abs` (MVP)
            0x99 => {
                Ok(Self::F64Abs)
            }
            // 0x9A `f64.neg` (MVP)
            0x9A => {
                Ok(Self::F64Neg)
            }
            // 0x9B `f64.ceil` (MVP)
            0x9B => {
                Ok(Self::F64Ceil)
            }
            // 0x9C `f64.floor` (MVP)
            0x9C => {
                Ok(Self::F64Floor)
            }
            // 0x9D `f64.trunc` (MVP)
            0x9D => {
                Ok(Self::F64Trunc)
            }
            // 0x9E `f64.nearest` (MVP)
            0x9E => {
                Ok(Self::F64Nearest)
            }
            // 0x9F `f64.sqrt` (MVP)
            0x9F => {
                Ok(Self::F64Sqrt)
            }
            // 0xA0 `f64.add` (MVP)
            0xA0 => {
                Ok(Self::F64Add)
            }
            // 0xA1 `f64.sub` (MVP)
            0xA1 => {
                Ok(Self::F64Sub)
            }
            // 0xA2 `f64.mul` (MVP)
            0xA2 => {
                Ok(Self::F64Mul)
            }
            // 0xA3 `f64.div` (MVP)
            0xA3 => {
                Ok(Self::F64Div)
            }
            // 0xA4 `f64.min` (MVP)
            0xA4 => {
                Ok(Self::F64Min)
            }
            // 0xA5 `f64.max` (MVP)
            0xA5 => {
                Ok(Self::F64Max)
            }
            // 0xA6 `f64.copysign` (MVP)
            0xA6 => {
                Ok(Self::F64Copysign)
            }
            // 0xA7 `i32.wrap_i64` (MVP)
            0xA7 => {
                Ok(Self::I32WrapI64)
            }
            // 0xA8 `i32.trunc_f32_s` (MVP)
            0xA8 => {
                Ok(Self::I32TruncF32S)
            }
            // 0xA9 `i32.trunc_f32_u` (MVP)
            0xA9 => {
                Ok(Self::I32TruncF32U)
            }
            // 0xAA `i32.trunc_f64_s` (MVP)
            0xAA => {
                Ok(Self::I32TruncF64S)
            }
            // 0xAB `i32.trunc_f64_u` (MVP)
            0xAB => {
                Ok(Self::I32TruncF64U)
            }
            // 0xAC `i64.extend_i32_s` (MVP)
            0xAC => {
                Ok(Self::I64ExtendI32S)
            }
            // 0xAD `i64.extend_i32_u` (MVP)
            0xAD => {
                Ok(Self::I64ExtendI32U)
            }
            // 0xAE `i64.trunc_f32_s` (MVP)
            0xAE => {
                Ok(Self::I64TruncF32S)
            }
            // 0xAF `i64.trunc_f32_u` (MVP)
            0xAF => {
                Ok(Self::I64TruncF32U)
            }
            // 0xB0 `i64.trunc_f64_s` (MVP)
            0xB0 => {
                Ok(Self::I64TruncF64S)
            }
            // 0xB1 `i64.trunc_f64_u` (MVP)
            0xB1 => {
                Ok(Self::I64TruncF64U)
            }
            // 0xB2 `f32.convert_i32_s` (MVP)
            0xB2 => {
                Ok(Self::F32ConvertI32S)
            }
            // 0xB3 `f32.convert_i32_u` (MVP)
            0xB3 => {
                Ok(Self::F32ConvertI32U)
            }
            // 0xB4 `f32.convert_i64_s` (MVP)
            0xB4 => {
                Ok(Self::F32ConvertI64S)
            }
            // 0xB5 `f32.convert_i64_u` (MVP)
            0xB5 => {
                Ok(Self::F32ConvertI64U)
            }
            // 0xB6 `f32.demote_f64` (MVP)
            0xB6 => {
                Ok(Self::F32DemoteF64)
            }
            // 0xB7 `f64.convert_i32_s` (MVP)
            0xB7 => {
                Ok(Self::F64ConvertI32S)
            }
            // 0xB8 `f64.convert_i32_u` (MVP)
            0xB8 => {
                Ok(Self::F64ConvertI32U)
            }
            // 0xB9 `f64.convert_i64_s` (MVP)
            0xB9 => {
                Ok(Self::F64ConvertI64S)
            }
            // 0xBA `f64.convert_i64_u` (MVP)
            0xBA => {
                Ok(Self::F64ConvertI64U)
            }
            // 0xBB `f64.promote_f32` (MVP)
            0xBB => {
                Ok(Self::F64PromoteF32)
            }
            // 0xBC `i32.reinterpret_f32` (MVP)
            0xBC => {
                Ok(Self::I32ReinterpretF32)
            }
            // 0xBD `i64.reinterpret_f64` (MVP)
            0xBD => {
                Ok(Self::I64ReinterpretF64)
            }
            // 0xBE `f32.reinterpret_i32` (MVP)
            0xBE => {
                Ok(Self::F32ReinterpretI32)
            }
            // 0xBF `f64.reinterpret_i64` (MVP)
            0xBF => {
                Ok(Self::F64ReinterpretI64)
            }
            // 0xC0 `i32.extend8_s` (SignExtension)
            0xC0 => {
                Ok(Self::I32Extend8S)
            }
            // 0xC1 `i32.extend16_s` (SignExtension)
            0xC1 => {
                Ok(Self::I32Extend16S)
            }
            // 0xC2 `i64.extend8_s` (SignExtension)
            0xC2 => {
                Ok(Self::I64Extend8S)
            }
            // 0xC3 `i64.extend16_s` (SignExtension)
            0xC3 => {
                Ok(Self::I64Extend16S)
            }
            // 0xC4 `i64.extend32_s` (SignExtension)
            0xC4 => {
                Ok(Self::I64Extend32S)
            }
            // 0xD0 `ref.null` u32 (ReferenceTypes)
            0xD0 => {
                let a1 = reader.read()?;
                Ok(Self::RefNull(a1))
            }
            // 0xD1 `ref.is_null` (ReferenceTypes)
            0xD1 => {
                Ok(Self::RefIsNull)
            }
            // 0xD2 `ref.func` u32 (ReferenceTypes)
            0xD2 => {
                let a1 = reader.read()?;
                Ok(Self::RefFunc(a1))
            }
            // 0xD3 `ref.as_non_null` (TypedFunctionReferences)
            0xD3 => {
                Ok(Self::RefAsNonNull)
            }
            // 0xD4 `br_on_null` (TypedFunctionReferences)
            0xD4 => {
                Ok(Self::BrOnNull)
            }
            // 0xD5 `ref.eq` u32 (TypedFunctionReferences)
            0xD5 => {
                let a1 = reader.read()?;
                Ok(Self::RefEq(a1))
            }
            // 0xD6 `br_on_non_null` u32 (TypedFunctionReferences)
            0xD6 => {
                let a1 = reader.read()?;
                Ok(Self::BrOnNonNull(a1))
            }
            0xFB => {
                let trailing: u32 = reader.read()?;
                match trailing {
                    // 0xFB 0x00 `struct.new` u32 (Gc)
                    0x00 => {
                        let a1 = reader.read()?;
                        Ok(Self::StructNew(a1))
                    },
                    // 0xFB 0x01 `struct.new_default` u32 (Gc)
                    0x01 => {
                        let a1 = reader.read()?;
                        Ok(Self::StructNewDefault(a1))
                    },
                    // 0xFB 0x02 `struct.get` u32 u32 (Gc)
                    0x02 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::StructGet(a1, a2))
                    },
                    // 0xFB 0x03 `struct.get_s` u32 u32 (Gc)
                    0x03 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::StructGetS(a1, a2))
                    },
                    // 0xFB 0x04 `struct.get_u` u32 u32 (Gc)
                    0x04 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::StructGetU(a1, a2))
                    },
                    // 0xFB 0x05 `struct.set` u32 u32 (Gc)
                    0x05 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::StructSet(a1, a2))
                    },
                    // 0xFB 0x06 `array.new` u32 (Gc)
                    0x06 => {
                        let a1 = reader.read()?;
                        Ok(Self::ArrayNew(a1))
                    },
                    // 0xFB 0x07 `array.new_default` u32 (Gc)
                    0x07 => {
                        let a1 = reader.read()?;
                        Ok(Self::ArrayNewDefault(a1))
                    },
                    // 0xFB 0x08 `array.new_fixed` u32 u32 (Gc)
                    0x08 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::ArrayNewFixed(a1, a2))
                    },
                    // 0xFB 0x09 `array.new_data` u32 u32 (Gc)
                    0x09 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::ArrayNewData(a1, a2))
                    },
                    // 0xFB 0x0A `array.new_elem` u32 u32 (Gc)
                    0x0a => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::ArrayNewElem(a1, a2))
                    },
                    // 0xFB 0x0B `array.get` u32 (Gc)
                    0x0b => {
                        let a1 = reader.read()?;
                        Ok(Self::ArrayGet(a1))
                    },
                    // 0xFB 0x0C `array.get_s` u32 (Gc)
                    0x0c => {
                        let a1 = reader.read()?;
                        Ok(Self::ArrayGetS(a1))
                    },
                    // 0xFB 0x0D `array.get_u` u32 (Gc)
                    0x0d => {
                        let a1 = reader.read()?;
                        Ok(Self::ArrayGetU(a1))
                    },
                    // 0xFB 0x0E `array.set` u32 (Gc)
                    0x0e => {
                        let a1 = reader.read()?;
                        Ok(Self::ArraySet(a1))
                    },
                    // 0xFB 0x0F `array.len` (Gc)
                    0x0f => {
                        Ok(Self::ArrayLen)
                    },
                    // 0xFB 0x10 `array.fill` u32 (Gc)
                    0x10 => {
                        let a1 = reader.read()?;
                        Ok(Self::ArrayFill(a1))
                    },
                    // 0xFB 0x11 `array.copy` u32 u32 (Gc)
                    0x11 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::ArrayCopy(a1, a2))
                    },
                    // 0xFB 0x12 `array.init_data` u32 u32 (Gc)
                    0x12 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::ArrayInitData(a1, a2))
                    },
                    // 0xFB 0x13 `array.init_elem` u32 u32 (Gc)
                    0x13 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::ArrayInitElem(a1, a2))
                    },
                    // 0xFB 0x14 `ref.test (ref ht)` u32 (Gc)
                    0x14 => {
                        let a1 = reader.read()?;
                        Ok(Self::RefTestRefHt(a1))
                    },
                    // 0xFB 0x15 `ref.test (ref null ht)` u32 (Gc)
                    0x15 => {
                        let a1 = reader.read()?;
                        Ok(Self::RefTestRefNullHt(a1))
                    },
                    // 0xFB 0x16 `ref.cast (ref ht)` u32 (Gc)
                    0x16 => {
                        let a1 = reader.read()?;
                        Ok(Self::RefCastRefHt(a1))
                    },
                    // 0xFB 0x17 `ref.cast (ref null ht)` u32 (Gc)
                    0x17 => {
                        let a1 = reader.read()?;
                        Ok(Self::RefCastRefNullHt(a1))
                    },
                    // 0xFB 0x18 `br_on_cast` u8 u32 (Gc)
                    0x18 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::BrOnCast(a1, a2))
                    },
                    // 0xFB 0x19 `br_on_cast_fail` u8 u32 (Gc)
                    0x19 => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::BrOnCastFail(a1, a2))
                    },
                    // 0xFB 0x1A `any.convert_extern` (Gc)
                    0x1a => {
                        Ok(Self::AnyConvertExtern)
                    },
                    // 0xFB 0x1B `extern.convert_any` (Gc)
                    0x1b => {
                        Ok(Self::ExternConvertAny)
                    },
                    // 0xFB 0x1C `ref.i31` (Gc)
                    0x1c => {
                        Ok(Self::RefI31)
                    },
                    // 0xFB 0x1D `i31.get_s` (Gc)
                    0x1d => {
                        Ok(Self::I31GetS)
                    },
                    // 0xFB 0x1E `i31.get_u` (Gc)
                    0x1e => {
                        Ok(Self::I31GetU)
                    },
                    _ => Err(WasmDecodeErrorKind::InvalidBytecode2(leading, trailing))
                }
            }
            0xFC => {
                let trailing: u32 = reader.read()?;
                match trailing {
                    // 0xFC 0x00 `i32.trunc_sat_f32_s` (NonTrappingFloatToIntConversion)
                    0x00 => {
                        Ok(Self::I32TruncSatF32S)
                    },
                    // 0xFC 0x01 `i32.trunc_sat_f32_u` (NonTrappingFloatToIntConversion)
                    0x01 => {
                        Ok(Self::I32TruncSatF32U)
                    },
                    // 0xFC 0x02 `i32.trunc_sat_f64_s` (NonTrappingFloatToIntConversion)
                    0x02 => {
                        Ok(Self::I32TruncSatF64S)
                    },
                    // 0xFC 0x03 `i32.trunc_sat_f64_u` (NonTrappingFloatToIntConversion)
                    0x03 => {
                        Ok(Self::I32TruncSatF64U)
                    },
                    // 0xFC 0x04 `i64.trunc_sat_f32_s` (NonTrappingFloatToIntConversion)
                    0x04 => {
                        Ok(Self::I64TruncSatF32S)
                    },
                    // 0xFC 0x05 `i64.trunc_sat_f32_u` (NonTrappingFloatToIntConversion)
                    0x05 => {
                        Ok(Self::I64TruncSatF32U)
                    },
                    // 0xFC 0x06 `i64.trunc_sat_f64_s` (NonTrappingFloatToIntConversion)
                    0x06 => {
                        Ok(Self::I64TruncSatF64S)
                    },
                    // 0xFC 0x07 `i64.trunc_sat_f64_u` (NonTrappingFloatToIntConversion)
                    0x07 => {
                        Ok(Self::I64TruncSatF64U)
                    },
                    // 0xFC 0x08 `memory.init` u32 (BulkMemoryOperations)
                    0x08 => {
                        let a1 = reader.read()?;
                        Ok(Self::MemoryInit(a1))
                    },
                    // 0xFC 0x09 `data.drop` u32 (BulkMemoryOperations)
                    0x09 => {
                        let a1 = reader.read()?;
                        Ok(Self::DataDrop(a1))
                    },
                    // 0xFC 0x0A `memory.copy` (BulkMemoryOperations)
                    0x0a => {
                        Ok(Self::MemoryCopy)
                    },
                    // 0xFC 0x0B `memory.fill` (BulkMemoryOperations)
                    0x0b => {
                        Ok(Self::MemoryFill)
                    },
                    // 0xFC 0x0C `table.init` u32 u32 (BulkMemoryOperations)
                    0x0c => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::TableInit(a1, a2))
                    },
                    // 0xFC 0x0D `elem.drop` u32 (BulkMemoryOperations)
                    0x0d => {
                        let a1 = reader.read()?;
                        Ok(Self::ElemDrop(a1))
                    },
                    // 0xFC 0x0E `table.copy` u32 u32 (BulkMemoryOperations)
                    0x0e => {
                        let a1 = reader.read()?;
                        let a2 = reader.read()?;
                        Ok(Self::TableCopy(a1, a2))
                    },
                    // 0xFC 0x0F `table.grow` u32 (ReferenceTypes)
                    0x0f => {
                        let a1 = reader.read()?;
                        Ok(Self::TableGrow(a1))
                    },
                    // 0xFC 0x10 `table.size` u32 (ReferenceTypes)
                    0x10 => {
                        let a1 = reader.read()?;
                        Ok(Self::TableSize(a1))
                    },
                    // 0xFC 0x11 `table.fill` u32 (ReferenceTypes)
                    0x11 => {
                        let a1 = reader.read()?;
                        Ok(Self::TableFill(a1))
                    },
                    _ => Err(WasmDecodeErrorKind::InvalidBytecode2(leading, trailing))
                }
            }
            0xFD => {
                let trailing: u32 = reader.read()?;
                match trailing {
                    // 0xFD 0x00 `v128.load` (Simd)
                    0x00 => {
                        Ok(Self::V128Load)
                    },
                    // 0xFD 0x01 `v128.load8x8_s` (Simd)
                    0x01 => {
                        Ok(Self::V128Load8x8S)
                    },
                    // 0xFD 0x02 `v128.load8x8_u` (Simd)
                    0x02 => {
                        Ok(Self::V128Load8x8U)
                    },
                    // 0xFD 0x03 `v128.load16x4_s` (Simd)
                    0x03 => {
                        Ok(Self::V128Load16x4S)
                    },
                    // 0xFD 0x04 `v128.load16x4_u` (Simd)
                    0x04 => {
                        Ok(Self::V128Load16x4U)
                    },
                    // 0xFD 0x05 `v128.load32x2_s` (Simd)
                    0x05 => {
                        Ok(Self::V128Load32x2S)
                    },
                    // 0xFD 0x06 `v128.load32x2_u` (Simd)
                    0x06 => {
                        Ok(Self::V128Load32x2U)
                    },
                    // 0xFD 0x07 `v128.load8_splat` (Simd)
                    0x07 => {
                        Ok(Self::V128Load8Splat)
                    },
                    // 0xFD 0x08 `v128.load16_splat` (Simd)
                    0x08 => {
                        Ok(Self::V128Load16Splat)
                    },
                    // 0xFD 0x09 `v128.load32_splat` (Simd)
                    0x09 => {
                        Ok(Self::V128Load32Splat)
                    },
                    // 0xFD 0x0A `v128.load64_splat` (Simd)
                    0x0a => {
                        Ok(Self::V128Load64Splat)
                    },
                    // 0xFD 0x0B `v128.store` (Simd)
                    0x0b => {
                        Ok(Self::V128Store)
                    },
                    // 0xFD 0x0C `v128.const` (Simd)
                    0x0c => {
                        Ok(Self::V128Const)
                    },
                    // 0xFD 0x0D `i8x16.shuffle` (Simd)
                    0x0d => {
                        Ok(Self::I8x16Shuffle)
                    },
                    // 0xFD 0x0E `i8x16.swizzle` (Simd)
                    0x0e => {
                        Ok(Self::I8x16Swizzle)
                    },
                    // 0xFD 0x0F `i8x16.splat` (Simd)
                    0x0f => {
                        Ok(Self::I8x16Splat)
                    },
                    // 0xFD 0x10 `i16x8.splat` (Simd)
                    0x10 => {
                        Ok(Self::I16x8Splat)
                    },
                    // 0xFD 0x11 `i32x4.splat` (Simd)
                    0x11 => {
                        Ok(Self::I32x4Splat)
                    },
                    // 0xFD 0x12 `i64x2.splat` (Simd)
                    0x12 => {
                        Ok(Self::I64x2Splat)
                    },
                    // 0xFD 0x13 `f32x4.splat` (Simd)
                    0x13 => {
                        Ok(Self::F32x4Splat)
                    },
                    // 0xFD 0x14 `f64x2.splat` (Simd)
                    0x14 => {
                        Ok(Self::F64x2Splat)
                    },
                    // 0xFD 0x15 `i8x16.extract_lane_s` (Simd)
                    0x15 => {
                        Ok(Self::I8x16ExtractLaneS)
                    },
                    // 0xFD 0x16 `i8x16.extract_lane_u` (Simd)
                    0x16 => {
                        Ok(Self::I8x16ExtractLaneU)
                    },
                    // 0xFD 0x17 `i8x16.replace_lane` (Simd)
                    0x17 => {
                        Ok(Self::I8x16ReplaceLane)
                    },
                    // 0xFD 0x18 `i16x8.extract_lane_s` (Simd)
                    0x18 => {
                        Ok(Self::I16x8ExtractLaneS)
                    },
                    // 0xFD 0x19 `i16x8.extract_lane_u` (Simd)
                    0x19 => {
                        Ok(Self::I16x8ExtractLaneU)
                    },
                    // 0xFD 0x1A `i16x8.replace_lane` (Simd)
                    0x1a => {
                        Ok(Self::I16x8ReplaceLane)
                    },
                    // 0xFD 0x1B `i32x4.extract_lane` (Simd)
                    0x1b => {
                        Ok(Self::I32x4ExtractLane)
                    },
                    // 0xFD 0x1C `i32x4.replace_lane` (Simd)
                    0x1c => {
                        Ok(Self::I32x4ReplaceLane)
                    },
                    // 0xFD 0x1D `i64x2.extract_lane` (Simd)
                    0x1d => {
                        Ok(Self::I64x2ExtractLane)
                    },
                    // 0xFD 0x1E `i64x2.replace_lane` (Simd)
                    0x1e => {
                        Ok(Self::I64x2ReplaceLane)
                    },
                    // 0xFD 0x1F `f32x4.extract_lane` (Simd)
                    0x1f => {
                        Ok(Self::F32x4ExtractLane)
                    },
                    // 0xFD 0x20 `f32x4.replace_lane` (Simd)
                    0x20 => {
                        Ok(Self::F32x4ReplaceLane)
                    },
                    // 0xFD 0x21 `f64x2.extract_lane` (Simd)
                    0x21 => {
                        Ok(Self::F64x2ExtractLane)
                    },
                    // 0xFD 0x22 `f64x2.replace_lane` (Simd)
                    0x22 => {
                        Ok(Self::F64x2ReplaceLane)
                    },
                    // 0xFD 0x23 `i8x16.eq` (Simd)
                    0x23 => {
                        Ok(Self::I8x16Eq)
                    },
                    // 0xFD 0x24 `i8x16.ne` (Simd)
                    0x24 => {
                        Ok(Self::I8x16Ne)
                    },
                    // 0xFD 0x25 `i8x16.lt_s` (Simd)
                    0x25 => {
                        Ok(Self::I8x16LtS)
                    },
                    // 0xFD 0x26 `i8x16.lt_u` (Simd)
                    0x26 => {
                        Ok(Self::I8x16LtU)
                    },
                    // 0xFD 0x27 `i8x16.gt_s` (Simd)
                    0x27 => {
                        Ok(Self::I8x16GtS)
                    },
                    // 0xFD 0x28 `i8x16.gt_u` (Simd)
                    0x28 => {
                        Ok(Self::I8x16GtU)
                    },
                    // 0xFD 0x29 `i8x16.le_s` (Simd)
                    0x29 => {
                        Ok(Self::I8x16LeS)
                    },
                    // 0xFD 0x2A `i8x16.le_u` (Simd)
                    0x2a => {
                        Ok(Self::I8x16LeU)
                    },
                    // 0xFD 0x2B `i8x16.ge_s` (Simd)
                    0x2b => {
                        Ok(Self::I8x16GeS)
                    },
                    // 0xFD 0x2C `i8x16.ge_u` (Simd)
                    0x2c => {
                        Ok(Self::I8x16GeU)
                    },
                    // 0xFD 0x2D `i16x8.eq` (Simd)
                    0x2d => {
                        Ok(Self::I16x8Eq)
                    },
                    // 0xFD 0x2E `i16x8.ne` (Simd)
                    0x2e => {
                        Ok(Self::I16x8Ne)
                    },
                    // 0xFD 0x2F `i16x8.lt_s` (Simd)
                    0x2f => {
                        Ok(Self::I16x8LtS)
                    },
                    // 0xFD 0x30 `i16x8.lt_u` (Simd)
                    0x30 => {
                        Ok(Self::I16x8LtU)
                    },
                    // 0xFD 0x31 `i16x8.gt_s` (Simd)
                    0x31 => {
                        Ok(Self::I16x8GtS)
                    },
                    // 0xFD 0x32 `i16x8.gt_u` (Simd)
                    0x32 => {
                        Ok(Self::I16x8GtU)
                    },
                    // 0xFD 0x33 `i16x8.le_s` (Simd)
                    0x33 => {
                        Ok(Self::I16x8LeS)
                    },
                    // 0xFD 0x34 `i16x8.le_u` (Simd)
                    0x34 => {
                        Ok(Self::I16x8LeU)
                    },
                    // 0xFD 0x35 `i16x8.ge_s` (Simd)
                    0x35 => {
                        Ok(Self::I16x8GeS)
                    },
                    // 0xFD 0x36 `i16x8.ge_u` (Simd)
                    0x36 => {
                        Ok(Self::I16x8GeU)
                    },
                    // 0xFD 0x37 `i32x4.eq` (Simd)
                    0x37 => {
                        Ok(Self::I32x4Eq)
                    },
                    // 0xFD 0x38 `i32x4.ne` (Simd)
                    0x38 => {
                        Ok(Self::I32x4Ne)
                    },
                    // 0xFD 0x39 `i32x4.lt_s` (Simd)
                    0x39 => {
                        Ok(Self::I32x4LtS)
                    },
                    // 0xFD 0x3A `i32x4.lt_u` (Simd)
                    0x3a => {
                        Ok(Self::I32x4LtU)
                    },
                    // 0xFD 0x3B `i32x4.gt_s` (Simd)
                    0x3b => {
                        Ok(Self::I32x4GtS)
                    },
                    // 0xFD 0x3C `i32x4.gt_u` (Simd)
                    0x3c => {
                        Ok(Self::I32x4GtU)
                    },
                    // 0xFD 0x3D `i32x4.le_s` (Simd)
                    0x3d => {
                        Ok(Self::I32x4LeS)
                    },
                    // 0xFD 0x3E `i32x4.le_u` (Simd)
                    0x3e => {
                        Ok(Self::I32x4LeU)
                    },
                    // 0xFD 0x3F `i32x4.ge_s` (Simd)
                    0x3f => {
                        Ok(Self::I32x4GeS)
                    },
                    // 0xFD 0x40 `i32x4.ge_u` (Simd)
                    0x40 => {
                        Ok(Self::I32x4GeU)
                    },
                    // 0xFD 0x41 `f32x4.eq` (Simd)
                    0x41 => {
                        Ok(Self::F32x4Eq)
                    },
                    // 0xFD 0x42 `f32x4.ne` (Simd)
                    0x42 => {
                        Ok(Self::F32x4Ne)
                    },
                    // 0xFD 0x43 `f32x4.lt` (Simd)
                    0x43 => {
                        Ok(Self::F32x4Lt)
                    },
                    // 0xFD 0x44 `f32x4.gt` (Simd)
                    0x44 => {
                        Ok(Self::F32x4Gt)
                    },
                    // 0xFD 0x45 `f32x4.le` (Simd)
                    0x45 => {
                        Ok(Self::F32x4Le)
                    },
                    // 0xFD 0x46 `f32x4.ge` (Simd)
                    0x46 => {
                        Ok(Self::F32x4Ge)
                    },
                    // 0xFD 0x47 `f64x2.eq` (Simd)
                    0x47 => {
                        Ok(Self::F64x2Eq)
                    },
                    // 0xFD 0x48 `f64x2.ne` (Simd)
                    0x48 => {
                        Ok(Self::F64x2Ne)
                    },
                    // 0xFD 0x49 `f64x2.lt` (Simd)
                    0x49 => {
                        Ok(Self::F64x2Lt)
                    },
                    // 0xFD 0x4A `f64x2.gt` (Simd)
                    0x4a => {
                        Ok(Self::F64x2Gt)
                    },
                    // 0xFD 0x4B `f64x2.le` (Simd)
                    0x4b => {
                        Ok(Self::F64x2Le)
                    },
                    // 0xFD 0x4C `f64x2.ge` (Simd)
                    0x4c => {
                        Ok(Self::F64x2Ge)
                    },
                    // 0xFD 0x4D `v128.not` (Simd)
                    0x4d => {
                        Ok(Self::V128Not)
                    },
                    // 0xFD 0x4E `v128.and` (Simd)
                    0x4e => {
                        Ok(Self::V128And)
                    },
                    // 0xFD 0x4F `v128.andnot` (Simd)
                    0x4f => {
                        Ok(Self::V128Andnot)
                    },
                    // 0xFD 0x50 `v128.or` (Simd)
                    0x50 => {
                        Ok(Self::V128Or)
                    },
                    // 0xFD 0x51 `v128.xor` (Simd)
                    0x51 => {
                        Ok(Self::V128Xor)
                    },
                    // 0xFD 0x52 `v128.bitselect` (Simd)
                    0x52 => {
                        Ok(Self::V128Bitselect)
                    },
                    // 0xFD 0x53 `v128.any_true` (Simd)
                    0x53 => {
                        Ok(Self::V128AnyTrue)
                    },
                    // 0xFD 0x54 `v128.load8_lane` (Simd)
                    0x54 => {
                        Ok(Self::V128Load8Lane)
                    },
                    // 0xFD 0x55 `v128.load16_lane` (Simd)
                    0x55 => {
                        Ok(Self::V128Load16Lane)
                    },
                    // 0xFD 0x56 `v128.load32_lane` (Simd)
                    0x56 => {
                        Ok(Self::V128Load32Lane)
                    },
                    // 0xFD 0x57 `v128.load64_lane` (Simd)
                    0x57 => {
                        Ok(Self::V128Load64Lane)
                    },
                    // 0xFD 0x58 `v128.store8_lane` (Simd)
                    0x58 => {
                        Ok(Self::V128Store8Lane)
                    },
                    // 0xFD 0x59 `v128.store16_lane` (Simd)
                    0x59 => {
                        Ok(Self::V128Store16Lane)
                    },
                    // 0xFD 0x5A `v128.store32_lane` (Simd)
                    0x5a => {
                        Ok(Self::V128Store32Lane)
                    },
                    // 0xFD 0x5B `v128.store64_lane` (Simd)
                    0x5b => {
                        Ok(Self::V128Store64Lane)
                    },
                    // 0xFD 0x5C `v128.load32_zero` (Simd)
                    0x5c => {
                        Ok(Self::V128Load32Zero)
                    },
                    // 0xFD 0x5D `v128.load64_zero` (Simd)
                    0x5d => {
                        Ok(Self::V128Load64Zero)
                    },
                    // 0xFD 0x5E `f32x4.demote_f64x2_zero` (Simd)
                    0x5e => {
                        Ok(Self::F32x4DemoteF64x2Zero)
                    },
                    // 0xFD 0x5F `f64x2.promote_low_f32x4` (Simd)
                    0x5f => {
                        Ok(Self::F64x2PromoteLowF32x4)
                    },
                    // 0xFD 0x60 `i8x16.abs` (Simd)
                    0x60 => {
                        Ok(Self::I8x16Abs)
                    },
                    // 0xFD 0x61 `i8x16.neg` (Simd)
                    0x61 => {
                        Ok(Self::I8x16Neg)
                    },
                    // 0xFD 0x62 `i8x16.popcnt` (Simd)
                    0x62 => {
                        Ok(Self::I8x16Popcnt)
                    },
                    // 0xFD 0x63 `i8x16.all_true` (Simd)
                    0x63 => {
                        Ok(Self::I8x16AllTrue)
                    },
                    // 0xFD 0x64 `i8x16.bitmask` (Simd)
                    0x64 => {
                        Ok(Self::I8x16Bitmask)
                    },
                    // 0xFD 0x65 `i8x16.narrow_i16x8_s` (Simd)
                    0x65 => {
                        Ok(Self::I8x16NarrowI16x8S)
                    },
                    // 0xFD 0x66 `i8x16.narrow_i16x8_u` (Simd)
                    0x66 => {
                        Ok(Self::I8x16NarrowI16x8U)
                    },
                    // 0xFD 0x67 `f32x4.ceil` (Simd)
                    0x67 => {
                        Ok(Self::F32x4Ceil)
                    },
                    // 0xFD 0x68 `f32x4.floor` (Simd)
                    0x68 => {
                        Ok(Self::F32x4Floor)
                    },
                    // 0xFD 0x69 `f32x4.trunc` (Simd)
                    0x69 => {
                        Ok(Self::F32x4Trunc)
                    },
                    // 0xFD 0x6A `f32x4.nearest` (Simd)
                    0x6a => {
                        Ok(Self::F32x4Nearest)
                    },
                    // 0xFD 0x6B `i8x16.shl` (Simd)
                    0x6b => {
                        Ok(Self::I8x16Shl)
                    },
                    // 0xFD 0x6C `i8x16.shr_s` (Simd)
                    0x6c => {
                        Ok(Self::I8x16ShrS)
                    },
                    // 0xFD 0x6D `i8x16.shr_u` (Simd)
                    0x6d => {
                        Ok(Self::I8x16ShrU)
                    },
                    // 0xFD 0x6E `i8x16.add` (Simd)
                    0x6e => {
                        Ok(Self::I8x16Add)
                    },
                    // 0xFD 0x6F `i8x16.add_sat_s` (Simd)
                    0x6f => {
                        Ok(Self::I8x16AddSatS)
                    },
                    // 0xFD 0x70 `i8x16.add_sat_u` (Simd)
                    0x70 => {
                        Ok(Self::I8x16AddSatU)
                    },
                    // 0xFD 0x71 `i8x16.sub` (Simd)
                    0x71 => {
                        Ok(Self::I8x16Sub)
                    },
                    // 0xFD 0x72 `i8x16.sub_sat_s` (Simd)
                    0x72 => {
                        Ok(Self::I8x16SubSatS)
                    },
                    // 0xFD 0x73 `i8x16.sub_sat_u` (Simd)
                    0x73 => {
                        Ok(Self::I8x16SubSatU)
                    },
                    // 0xFD 0x74 `f64x2.ceil` (Simd)
                    0x74 => {
                        Ok(Self::F64x2Ceil)
                    },
                    // 0xFD 0x75 `f64x2.floor` (Simd)
                    0x75 => {
                        Ok(Self::F64x2Floor)
                    },
                    // 0xFD 0x76 `i8x16.min_s` (Simd)
                    0x76 => {
                        Ok(Self::I8x16MinS)
                    },
                    // 0xFD 0x77 `i8x16.min_u` (Simd)
                    0x77 => {
                        Ok(Self::I8x16MinU)
                    },
                    // 0xFD 0x78 `i8x16.max_s` (Simd)
                    0x78 => {
                        Ok(Self::I8x16MaxS)
                    },
                    // 0xFD 0x79 `i8x16.max_u` (Simd)
                    0x79 => {
                        Ok(Self::I8x16MaxU)
                    },
                    // 0xFD 0x7A `f64x2.trunc` (Simd)
                    0x7a => {
                        Ok(Self::F64x2Trunc)
                    },
                    // 0xFD 0x7B `i8x16.avgr_u` (Simd)
                    0x7b => {
                        Ok(Self::I8x16AvgrU)
                    },
                    // 0xFD 0x7C `i16x8.extadd_pairwise_i8x16_s` (Simd)
                    0x7c => {
                        Ok(Self::I16x8ExtaddPairwiseI8x16S)
                    },
                    // 0xFD 0x7D `i16x8.extadd_pairwise_i8x16_u` (Simd)
                    0x7d => {
                        Ok(Self::I16x8ExtaddPairwiseI8x16U)
                    },
                    // 0xFD 0x7E `i32x4.extadd_pairwise_i16x8_s` (Simd)
                    0x7e => {
                        Ok(Self::I32x4ExtaddPairwiseI16x8S)
                    },
                    // 0xFD 0x7F `i32x4.extadd_pairwise_i16x8_u` (Simd)
                    0x7f => {
                        Ok(Self::I32x4ExtaddPairwiseI16x8U)
                    },
                    // 0xFD 0x80 `i16x8.abs` (Simd)
                    0x80 => {
                        Ok(Self::I16x8Abs)
                    },
                    // 0xFD 0x81 `i16x8.neg` (Simd)
                    0x81 => {
                        Ok(Self::I16x8Neg)
                    },
                    // 0xFD 0x82 `i16x8.q15mulr_sat_s` (Simd)
                    0x82 => {
                        Ok(Self::I16x8Q15mulrSatS)
                    },
                    // 0xFD 0x83 `i16x8.all_true` (Simd)
                    0x83 => {
                        Ok(Self::I16x8AllTrue)
                    },
                    // 0xFD 0x84 `i16x8.bitmask` (Simd)
                    0x84 => {
                        Ok(Self::I16x8Bitmask)
                    },
                    // 0xFD 0x85 `i16x8.narrow_i32x4_s` (Simd)
                    0x85 => {
                        Ok(Self::I16x8NarrowI32x4S)
                    },
                    // 0xFD 0x86 `i16x8.narrow_i32x4_u` (Simd)
                    0x86 => {
                        Ok(Self::I16x8NarrowI32x4U)
                    },
                    // 0xFD 0x87 `i16x8.extend_low_i8x16_s` (Simd)
                    0x87 => {
                        Ok(Self::I16x8ExtendLowI8x16S)
                    },
                    // 0xFD 0x88 `i16x8.extend_high_i8x16_s` (Simd)
                    0x88 => {
                        Ok(Self::I16x8ExtendHighI8x16S)
                    },
                    // 0xFD 0x89 `i16x8.extend_low_i8x16_u` (Simd)
                    0x89 => {
                        Ok(Self::I16x8ExtendLowI8x16U)
                    },
                    // 0xFD 0x8A `i16x8.extend_high_i8x16_u` (Simd)
                    0x8a => {
                        Ok(Self::I16x8ExtendHighI8x16U)
                    },
                    // 0xFD 0x8B `i16x8.shl` (Simd)
                    0x8b => {
                        Ok(Self::I16x8Shl)
                    },
                    // 0xFD 0x8C `i16x8.shr_s` (Simd)
                    0x8c => {
                        Ok(Self::I16x8ShrS)
                    },
                    // 0xFD 0x8D `i16x8.shr_u` (Simd)
                    0x8d => {
                        Ok(Self::I16x8ShrU)
                    },
                    // 0xFD 0x8E `i16x8.add` (Simd)
                    0x8e => {
                        Ok(Self::I16x8Add)
                    },
                    // 0xFD 0x8F `i16x8.add_sat_s` (Simd)
                    0x8f => {
                        Ok(Self::I16x8AddSatS)
                    },
                    // 0xFD 0x90 `i16x8.add_sat_u` (Simd)
                    0x90 => {
                        Ok(Self::I16x8AddSatU)
                    },
                    // 0xFD 0x91 `i16x8.sub` (Simd)
                    0x91 => {
                        Ok(Self::I16x8Sub)
                    },
                    // 0xFD 0x92 `i16x8.sub_sat_s` (Simd)
                    0x92 => {
                        Ok(Self::I16x8SubSatS)
                    },
                    // 0xFD 0x93 `i16x8.sub_sat_u` (Simd)
                    0x93 => {
                        Ok(Self::I16x8SubSatU)
                    },
                    // 0xFD 0x94 `f64x2.nearest` (Simd)
                    0x94 => {
                        Ok(Self::F64x2Nearest)
                    },
                    // 0xFD 0x95 `i16x8.mul` (Simd)
                    0x95 => {
                        Ok(Self::I16x8Mul)
                    },
                    // 0xFD 0x96 `i16x8.min_s` (Simd)
                    0x96 => {
                        Ok(Self::I16x8MinS)
                    },
                    // 0xFD 0x97 `i16x8.min_u` (Simd)
                    0x97 => {
                        Ok(Self::I16x8MinU)
                    },
                    // 0xFD 0x98 `i16x8.max_s` (Simd)
                    0x98 => {
                        Ok(Self::I16x8MaxS)
                    },
                    // 0xFD 0x99 `i16x8.max_u` (Simd)
                    0x99 => {
                        Ok(Self::I16x8MaxU)
                    },
                    // 0xFD 0x9B `i16x8.avgr_u` (Simd)
                    0x9b => {
                        Ok(Self::I16x8AvgrU)
                    },
                    // 0xFD 0x9C `i16x8.extmul_low_i8x16_s` (Simd)
                    0x9c => {
                        Ok(Self::I16x8ExtmulLowI8x16S)
                    },
                    // 0xFD 0x9D `i16x8.extmul_high_i8x16_s` (Simd)
                    0x9d => {
                        Ok(Self::I16x8ExtmulHighI8x16S)
                    },
                    // 0xFD 0x9E `i16x8.extmul_low_i8x16_u` (Simd)
                    0x9e => {
                        Ok(Self::I16x8ExtmulLowI8x16U)
                    },
                    // 0xFD 0x9F `i16x8.extmul_high_i8x16_u` (Simd)
                    0x9f => {
                        Ok(Self::I16x8ExtmulHighI8x16U)
                    },
                    // 0xFD 0xA0 `i32x4.abs` (Simd)
                    0xa0 => {
                        Ok(Self::I32x4Abs)
                    },
                    // 0xFD 0xA1 `i32x4.neg` (Simd)
                    0xa1 => {
                        Ok(Self::I32x4Neg)
                    },
                    // 0xFD 0xA3 `i32x4.all_true` (Simd)
                    0xa3 => {
                        Ok(Self::I32x4AllTrue)
                    },
                    // 0xFD 0xA4 `i32x4.bitmask` (Simd)
                    0xa4 => {
                        Ok(Self::I32x4Bitmask)
                    },
                    // 0xFD 0xA7 `i32x4.extend_low_i16x8_s` (Simd)
                    0xa7 => {
                        Ok(Self::I32x4ExtendLowI16x8S)
                    },
                    // 0xFD 0xA8 `i32x4.extend_high_i16x8_s` (Simd)
                    0xa8 => {
                        Ok(Self::I32x4ExtendHighI16x8S)
                    },
                    // 0xFD 0xA9 `i32x4.extend_low_i16x8_u` (Simd)
                    0xa9 => {
                        Ok(Self::I32x4ExtendLowI16x8U)
                    },
                    // 0xFD 0xAA `i32x4.extend_high_i16x8_u` (Simd)
                    0xaa => {
                        Ok(Self::I32x4ExtendHighI16x8U)
                    },
                    // 0xFD 0xAB `i32x4.shl` (Simd)
                    0xab => {
                        Ok(Self::I32x4Shl)
                    },
                    // 0xFD 0xAC `i32x4.shr_s` (Simd)
                    0xac => {
                        Ok(Self::I32x4ShrS)
                    },
                    // 0xFD 0xAD `i32x4.shr_u` (Simd)
                    0xad => {
                        Ok(Self::I32x4ShrU)
                    },
                    // 0xFD 0xAE `i32x4.add` (Simd)
                    0xae => {
                        Ok(Self::I32x4Add)
                    },
                    // 0xFD 0xB1 `i32x4.sub` (Simd)
                    0xb1 => {
                        Ok(Self::I32x4Sub)
                    },
                    // 0xFD 0xB5 `i32x4.mul` (Simd)
                    0xb5 => {
                        Ok(Self::I32x4Mul)
                    },
                    // 0xFD 0xB6 `i32x4.min_s` (Simd)
                    0xb6 => {
                        Ok(Self::I32x4MinS)
                    },
                    // 0xFD 0xB7 `i32x4.min_u` (Simd)
                    0xb7 => {
                        Ok(Self::I32x4MinU)
                    },
                    // 0xFD 0xB8 `i32x4.max_s` (Simd)
                    0xb8 => {
                        Ok(Self::I32x4MaxS)
                    },
                    // 0xFD 0xB9 `i32x4.max_u` (Simd)
                    0xb9 => {
                        Ok(Self::I32x4MaxU)
                    },
                    // 0xFD 0xBA `i32x4.dot_i16x8_s` (Simd)
                    0xba => {
                        Ok(Self::I32x4DotI16x8S)
                    },
                    // 0xFD 0xBC `i32x4.extmul_low_i16x8_s` (Simd)
                    0xbc => {
                        Ok(Self::I32x4ExtmulLowI16x8S)
                    },
                    // 0xFD 0xBD `i32x4.extmul_high_i16x8_s` (Simd)
                    0xbd => {
                        Ok(Self::I32x4ExtmulHighI16x8S)
                    },
                    // 0xFD 0xBE `i32x4.extmul_low_i16x8_u` (Simd)
                    0xbe => {
                        Ok(Self::I32x4ExtmulLowI16x8U)
                    },
                    // 0xFD 0xBF `i32x4.extmul_high_i16x8_u` (Simd)
                    0xbf => {
                        Ok(Self::I32x4ExtmulHighI16x8U)
                    },
                    // 0xFD 0xC0 `i64x2.abs` (Simd)
                    0xc0 => {
                        Ok(Self::I64x2Abs)
                    },
                    // 0xFD 0xC1 `i64x2.neg` (Simd)
                    0xc1 => {
                        Ok(Self::I64x2Neg)
                    },
                    // 0xFD 0xC3 `i64x2.all_true` (Simd)
                    0xc3 => {
                        Ok(Self::I64x2AllTrue)
                    },
                    // 0xFD 0xC4 `i64x2.bitmask` (Simd)
                    0xc4 => {
                        Ok(Self::I64x2Bitmask)
                    },
                    // 0xFD 0xC7 `i64x2.extend_low_i32x4_s` (Simd)
                    0xc7 => {
                        Ok(Self::I64x2ExtendLowI32x4S)
                    },
                    // 0xFD 0xC8 `i64x2.extend_high_i32x4_s` (Simd)
                    0xc8 => {
                        Ok(Self::I64x2ExtendHighI32x4S)
                    },
                    // 0xFD 0xC9 `i64x2.extend_low_i32x4_u` (Simd)
                    0xc9 => {
                        Ok(Self::I64x2ExtendLowI32x4U)
                    },
                    // 0xFD 0xCA `i64x2.extend_high_i32x4_u` (Simd)
                    0xca => {
                        Ok(Self::I64x2ExtendHighI32x4U)
                    },
                    // 0xFD 0xCB `i64x2.shl` (Simd)
                    0xcb => {
                        Ok(Self::I64x2Shl)
                    },
                    // 0xFD 0xCC `i64x2.shr_s` (Simd)
                    0xcc => {
                        Ok(Self::I64x2ShrS)
                    },
                    // 0xFD 0xCD `i64x2.shr_u` (Simd)
                    0xcd => {
                        Ok(Self::I64x2ShrU)
                    },
                    // 0xFD 0xCE `i64x2.add` (Simd)
                    0xce => {
                        Ok(Self::I64x2Add)
                    },
                    // 0xFD 0xD1 `i64x2.sub` (Simd)
                    0xd1 => {
                        Ok(Self::I64x2Sub)
                    },
                    // 0xFD 0xD5 `i64x2.mul` (Simd)
                    0xd5 => {
                        Ok(Self::I64x2Mul)
                    },
                    // 0xFD 0xD6 `i64x2.eq` (Simd)
                    0xd6 => {
                        Ok(Self::I64x2Eq)
                    },
                    // 0xFD 0xD7 `i64x2.ne` (Simd)
                    0xd7 => {
                        Ok(Self::I64x2Ne)
                    },
                    // 0xFD 0xD8 `i64x2.lt_s` (Simd)
                    0xd8 => {
                        Ok(Self::I64x2LtS)
                    },
                    // 0xFD 0xD9 `i64x2.gt_s` (Simd)
                    0xd9 => {
                        Ok(Self::I64x2GtS)
                    },
                    // 0xFD 0xDA `i64x2.le_s` (Simd)
                    0xda => {
                        Ok(Self::I64x2LeS)
                    },
                    // 0xFD 0xDB `i64x2.ge_s` (Simd)
                    0xdb => {
                        Ok(Self::I64x2GeS)
                    },
                    // 0xFD 0xDC `i64x2.extmul_low_i32x4_s` (Simd)
                    0xdc => {
                        Ok(Self::I64x2ExtmulLowI32x4S)
                    },
                    // 0xFD 0xDD `i64x2.extmul_high_i32x4_s` (Simd)
                    0xdd => {
                        Ok(Self::I64x2ExtmulHighI32x4S)
                    },
                    // 0xFD 0xDE `i64x2.extmul_low_i32x4_u` (Simd)
                    0xde => {
                        Ok(Self::I64x2ExtmulLowI32x4U)
                    },
                    // 0xFD 0xDF `i64x2.extmul_high_i32x4_u` (Simd)
                    0xdf => {
                        Ok(Self::I64x2ExtmulHighI32x4U)
                    },
                    // 0xFD 0xE0 `f32x4.abs` (Simd)
                    0xe0 => {
                        Ok(Self::F32x4Abs)
                    },
                    // 0xFD 0xE1 `f32x4.neg` (Simd)
                    0xe1 => {
                        Ok(Self::F32x4Neg)
                    },
                    // 0xFD 0xE3 `f32x4.sqrt` (Simd)
                    0xe3 => {
                        Ok(Self::F32x4Sqrt)
                    },
                    // 0xFD 0xE4 `f32x4.add` (Simd)
                    0xe4 => {
                        Ok(Self::F32x4Add)
                    },
                    // 0xFD 0xE5 `f32x4.sub` (Simd)
                    0xe5 => {
                        Ok(Self::F32x4Sub)
                    },
                    // 0xFD 0xE6 `f32x4.mul` (Simd)
                    0xe6 => {
                        Ok(Self::F32x4Mul)
                    },
                    // 0xFD 0xE7 `f32x4.div` (Simd)
                    0xe7 => {
                        Ok(Self::F32x4Div)
                    },
                    // 0xFD 0xE8 `f32x4.min` (Simd)
                    0xe8 => {
                        Ok(Self::F32x4Min)
                    },
                    // 0xFD 0xE9 `f32x4.max` (Simd)
                    0xe9 => {
                        Ok(Self::F32x4Max)
                    },
                    // 0xFD 0xEA `f32x4.pmin` (Simd)
                    0xea => {
                        Ok(Self::F32x4Pmin)
                    },
                    // 0xFD 0xEB `f32x4.pmax` (Simd)
                    0xeb => {
                        Ok(Self::F32x4Pmax)
                    },
                    // 0xFD 0xEC `f64x2.abs` (Simd)
                    0xec => {
                        Ok(Self::F64x2Abs)
                    },
                    // 0xFD 0xED `f64x2.neg` (Simd)
                    0xed => {
                        Ok(Self::F64x2Neg)
                    },
                    // 0xFD 0xEF `f64x2.sqrt` (Simd)
                    0xef => {
                        Ok(Self::F64x2Sqrt)
                    },
                    // 0xFD 0xF0 `f64x2.add` (Simd)
                    0xf0 => {
                        Ok(Self::F64x2Add)
                    },
                    // 0xFD 0xF1 `f64x2.sub` (Simd)
                    0xf1 => {
                        Ok(Self::F64x2Sub)
                    },
                    // 0xFD 0xF2 `f64x2.mul` (Simd)
                    0xf2 => {
                        Ok(Self::F64x2Mul)
                    },
                    // 0xFD 0xF3 `f64x2.div` (Simd)
                    0xf3 => {
                        Ok(Self::F64x2Div)
                    },
                    // 0xFD 0xF4 `f64x2.min` (Simd)
                    0xf4 => {
                        Ok(Self::F64x2Min)
                    },
                    // 0xFD 0xF5 `f64x2.max` (Simd)
                    0xf5 => {
                        Ok(Self::F64x2Max)
                    },
                    // 0xFD 0xF6 `f64x2.pmin` (Simd)
                    0xf6 => {
                        Ok(Self::F64x2Pmin)
                    },
                    // 0xFD 0xF7 `f64x2.pmax` (Simd)
                    0xf7 => {
                        Ok(Self::F64x2Pmax)
                    },
                    // 0xFD 0xF8 `i32x4.trunc_sat_f32x4_s` (Simd)
                    0xf8 => {
                        Ok(Self::I32x4TruncSatF32x4S)
                    },
                    // 0xFD 0xF9 `i32x4.trunc_sat_f32x4_u` (Simd)
                    0xf9 => {
                        Ok(Self::I32x4TruncSatF32x4U)
                    },
                    // 0xFD 0xFA `f32x4.convert_i32x4_s` (Simd)
                    0xfa => {
                        Ok(Self::F32x4ConvertI32x4S)
                    },
                    // 0xFD 0xFB `f32x4.convert_i32x4_u` (Simd)
                    0xfb => {
                        Ok(Self::F32x4ConvertI32x4U)
                    },
                    // 0xFD 0xFC `i32x4.trunc_sat_f64x2_s_zero` (Simd)
                    0xfc => {
                        Ok(Self::I32x4TruncSatF64x2SZero)
                    },
                    // 0xFD 0xFD `i32x4.trunc_sat_f64x2_u_zero` (Simd)
                    0xfd => {
                        Ok(Self::I32x4TruncSatF64x2UZero)
                    },
                    // 0xFD 0xFE `f64x2.convert_low_i32x4_s` (Simd)
                    0xfe => {
                        Ok(Self::F64x2ConvertLowI32x4S)
                    },
                    // 0xFD 0xFF `f64x2.convert_low_i32x4_u` (Simd)
                    0xff => {
                        Ok(Self::F64x2ConvertLowI32x4U)
                    },
                    // 0xFD 0x100 `Zi8x16.relaxed_swizzle` (RelaxedSimd)
                    0x100 => {
                        Ok(Self::Zi8x16RelaxedSwizzle)
                    },
                    // 0xFD 0x101 `Zi32x4.relaxed_trunc_f32x4_s` (RelaxedSimd)
                    0x101 => {
                        Ok(Self::Zi32x4RelaxedTruncF32x4S)
                    },
                    // 0xFD 0x102 `i32x4.relaxed_trunc_f32x4_u` (RelaxedSimd)
                    0x102 => {
                        Ok(Self::I32x4RelaxedTruncF32x4U)
                    },
                    // 0xFD 0x103 `i32x4.relaxed_trunc_f64x2_s_zero` (RelaxedSimd)
                    0x103 => {
                        Ok(Self::I32x4RelaxedTruncF64x2SZero)
                    },
                    // 0xFD 0x104 `i32x4.relaxed_trunc_f64x2_u_zero` (RelaxedSimd)
                    0x104 => {
                        Ok(Self::I32x4RelaxedTruncF64x2UZero)
                    },
                    // 0xFD 0x105 `f32x4.relaxed_madd` (RelaxedSimd)
                    0x105 => {
                        Ok(Self::F32x4RelaxedMadd)
                    },
                    // 0xFD 0x106 `f32x4.relaxed_nmadd` (RelaxedSimd)
                    0x106 => {
                        Ok(Self::F32x4RelaxedNmadd)
                    },
                    // 0xFD 0x107 `f64x2.relaxed_madd` (RelaxedSimd)
                    0x107 => {
                        Ok(Self::F64x2RelaxedMadd)
                    },
                    // 0xFD 0x108 `f64x2.relaxed_nmadd` (RelaxedSimd)
                    0x108 => {
                        Ok(Self::F64x2RelaxedNmadd)
                    },
                    // 0xFD 0x109 `i8x16.relaxed_laneselect` (RelaxedSimd)
                    0x109 => {
                        Ok(Self::I8x16RelaxedLaneselect)
                    },
                    // 0xFD 0x10A `i16x8.relaxed_laneselect` (RelaxedSimd)
                    0x10a => {
                        Ok(Self::I16x8RelaxedLaneselect)
                    },
                    // 0xFD 0x10B `i32x4.relaxed_laneselect` (RelaxedSimd)
                    0x10b => {
                        Ok(Self::I32x4RelaxedLaneselect)
                    },
                    // 0xFD 0x10C `i64x2.relaxed_laneselect` (RelaxedSimd)
                    0x10c => {
                        Ok(Self::I64x2RelaxedLaneselect)
                    },
                    // 0xFD 0x10D `f32x4.relaxed_min` (RelaxedSimd)
                    0x10d => {
                        Ok(Self::F32x4RelaxedMin)
                    },
                    // 0xFD 0x10E `f32x4.relaxed_max` (RelaxedSimd)
                    0x10e => {
                        Ok(Self::F32x4RelaxedMax)
                    },
                    // 0xFD 0x10F `f64x2.relaxed_min` (RelaxedSimd)
                    0x10f => {
                        Ok(Self::F64x2RelaxedMin)
                    },
                    // 0xFD 0x110 `f64x2.relaxed_max` (RelaxedSimd)
                    0x110 => {
                        Ok(Self::F64x2RelaxedMax)
                    },
                    // 0xFD 0x111 `i16x8.relaxed_q15mulr_s` (RelaxedSimd)
                    0x111 => {
                        Ok(Self::I16x8RelaxedQ15mulrS)
                    },
                    // 0xFD 0x112 `i16x8.relaxed_dot_i8x16_i7x16_s` (RelaxedSimd)
                    0x112 => {
                        Ok(Self::I16x8RelaxedDotI8x16I7x16S)
                    },
                    // 0xFD 0x113 `i32x4.relaxed_dot_i8x16_i7x16_add_s` (RelaxedSimd)
                    0x113 => {
                        Ok(Self::I32x4RelaxedDotI8x16I7x16AddS)
                    },
                    // 0xFD 0x114 `f32x4.relaxed_dot_bf16x8_add_f32x4` (RelaxedSimd)
                    0x114 => {
                        Ok(Self::F32x4RelaxedDotBf16x8AddF32x4)
                    },
                    _ => Err(WasmDecodeErrorKind::InvalidBytecode2(leading, trailing))
                }
            }
            0xFE => {
                let trailing: u32 = reader.read()?;
                match trailing {
                    // 0xFE 0x00 `memory.atomic.notify` (Threads)
                    0x00 => {
                        Ok(Self::MemoryAtomicNotify)
                    },
                    // 0xFE 0x01 `memory.atomic.wait32` (Threads)
                    0x01 => {
                        Ok(Self::MemoryAtomicWait32)
                    },
                    // 0xFE 0x02 `memory.atomic.wait64` (Threads)
                    0x02 => {
                        Ok(Self::MemoryAtomicWait64)
                    },
                    // 0xFE 0x03 `atomic.fence` (Threads)
                    0x03 => {
                        Ok(Self::AtomicFence)
                    },
                    // 0xFE 0x10 `i32.atomic.load` (Threads)
                    0x10 => {
                        Ok(Self::I32AtomicLoad)
                    },
                    // 0xFE 0x11 `i64.atomic.load` (Threads)
                    0x11 => {
                        Ok(Self::I64AtomicLoad)
                    },
                    // 0xFE 0x12 `i32.atomic.load8_u` (Threads)
                    0x12 => {
                        Ok(Self::I32AtomicLoad8U)
                    },
                    // 0xFE 0x13 `i32.atomic.load16_u` (Threads)
                    0x13 => {
                        Ok(Self::I32AtomicLoad16U)
                    },
                    // 0xFE 0x14 `i64.atomic.load8_u` (Threads)
                    0x14 => {
                        Ok(Self::I64AtomicLoad8U)
                    },
                    // 0xFE 0x15 `i64.atomic.load16_u` (Threads)
                    0x15 => {
                        Ok(Self::I64AtomicLoad16U)
                    },
                    // 0xFE 0x16 `i64.atomic.load32_u` (Threads)
                    0x16 => {
                        Ok(Self::I64AtomicLoad32U)
                    },
                    // 0xFE 0x17 `i32.atomic.store` (Threads)
                    0x17 => {
                        Ok(Self::I32AtomicStore)
                    },
                    // 0xFE 0x18 `i64.atomic.store` (Threads)
                    0x18 => {
                        Ok(Self::I64AtomicStore)
                    },
                    // 0xFE 0x19 `i32.atomic.store8` (Threads)
                    0x19 => {
                        Ok(Self::I32AtomicStore8)
                    },
                    // 0xFE 0x1A `i32.atomic.store16` (Threads)
                    0x1a => {
                        Ok(Self::I32AtomicStore16)
                    },
                    // 0xFE 0x1B `i64.atomic.store8` (Threads)
                    0x1b => {
                        Ok(Self::I64AtomicStore8)
                    },
                    // 0xFE 0x1C `i64.atomic.store16` (Threads)
                    0x1c => {
                        Ok(Self::I64AtomicStore16)
                    },
                    // 0xFE 0x1D `i64.atomic.store32` (Threads)
                    0x1d => {
                        Ok(Self::I64AtomicStore32)
                    },
                    // 0xFE 0x1E `i32.atomic.rmw.add` (Threads)
                    0x1e => {
                        Ok(Self::I32AtomicRmwAdd)
                    },
                    // 0xFE 0x1F `i64.atomic.rmw.add` (Threads)
                    0x1f => {
                        Ok(Self::I64AtomicRmwAdd)
                    },
                    // 0xFE 0x20 `i32.atomic.rmw8.add_u` (Threads)
                    0x20 => {
                        Ok(Self::I32AtomicRmw8AddU)
                    },
                    // 0xFE 0x21 `i32.atomic.rmw16.add_u` (Threads)
                    0x21 => {
                        Ok(Self::I32AtomicRmw16AddU)
                    },
                    // 0xFE 0x22 `i64.atomic.rmw8.add_u` (Threads)
                    0x22 => {
                        Ok(Self::I64AtomicRmw8AddU)
                    },
                    // 0xFE 0x23 `i64.atomic.rmw16.add_u` (Threads)
                    0x23 => {
                        Ok(Self::I64AtomicRmw16AddU)
                    },
                    // 0xFE 0x24 `i64.atomic.rmw32.add_u` (Threads)
                    0x24 => {
                        Ok(Self::I64AtomicRmw32AddU)
                    },
                    // 0xFE 0x25 `i32.atomic.rmw.sub` (Threads)
                    0x25 => {
                        Ok(Self::I32AtomicRmwSub)
                    },
                    // 0xFE 0x26 `i64.atomic.rmw.sub` (Threads)
                    0x26 => {
                        Ok(Self::I64AtomicRmwSub)
                    },
                    // 0xFE 0x27 `i32.atomic.rmw8.sub_u` (Threads)
                    0x27 => {
                        Ok(Self::I32AtomicRmw8SubU)
                    },
                    // 0xFE 0x28 `i32.atomic.rmw16.sub_u` (Threads)
                    0x28 => {
                        Ok(Self::I32AtomicRmw16SubU)
                    },
                    // 0xFE 0x29 `i64.atomic.rmw8.sub_u` (Threads)
                    0x29 => {
                        Ok(Self::I64AtomicRmw8SubU)
                    },
                    // 0xFE 0x2A `i64.atomic.rmw16.sub_u` (Threads)
                    0x2a => {
                        Ok(Self::I64AtomicRmw16SubU)
                    },
                    // 0xFE 0x2B `i64.atomic.rmw32.sub_u` (Threads)
                    0x2b => {
                        Ok(Self::I64AtomicRmw32SubU)
                    },
                    // 0xFE 0x2C `i32.atomic.rmw.and` (Threads)
                    0x2c => {
                        Ok(Self::I32AtomicRmwAnd)
                    },
                    // 0xFE 0x2D `i64.atomic.rmw.and` (Threads)
                    0x2d => {
                        Ok(Self::I64AtomicRmwAnd)
                    },
                    // 0xFE 0x2E `i32.atomic.rmw8.and_u` (Threads)
                    0x2e => {
                        Ok(Self::I32AtomicRmw8AndU)
                    },
                    // 0xFE 0x2F `i32.atomic.rmw16.and_u` (Threads)
                    0x2f => {
                        Ok(Self::I32AtomicRmw16AndU)
                    },
                    // 0xFE 0x30 `i64.atomic.rmw8.and_u` (Threads)
                    0x30 => {
                        Ok(Self::I64AtomicRmw8AndU)
                    },
                    // 0xFE 0x31 `i64.atomic.rmw16.and_u` (Threads)
                    0x31 => {
                        Ok(Self::I64AtomicRmw16AndU)
                    },
                    // 0xFE 0x32 `i64.atomic.rmw32.and_u` (Threads)
                    0x32 => {
                        Ok(Self::I64AtomicRmw32AndU)
                    },
                    // 0xFE 0x33 `i32.atomic.rmw.or` (Threads)
                    0x33 => {
                        Ok(Self::I32AtomicRmwOr)
                    },
                    // 0xFE 0x34 `i64.atomic.rmw.or` (Threads)
                    0x34 => {
                        Ok(Self::I64AtomicRmwOr)
                    },
                    // 0xFE 0x35 `i32.atomic.rmw8.or_u` (Threads)
                    0x35 => {
                        Ok(Self::I32AtomicRmw8OrU)
                    },
                    // 0xFE 0x36 `i32.atomic.rmw16.or_u` (Threads)
                    0x36 => {
                        Ok(Self::I32AtomicRmw16OrU)
                    },
                    // 0xFE 0x37 `i64.atomic.rmw8.or_u` (Threads)
                    0x37 => {
                        Ok(Self::I64AtomicRmw8OrU)
                    },
                    // 0xFE 0x38 `i64.atomic.rmw16.or_u` (Threads)
                    0x38 => {
                        Ok(Self::I64AtomicRmw16OrU)
                    },
                    // 0xFE 0x39 `i64.atomic.rmw32.or_u` (Threads)
                    0x39 => {
                        Ok(Self::I64AtomicRmw32OrU)
                    },
                    // 0xFE 0x3A `i32.atomic.rmw.xor` (Threads)
                    0x3a => {
                        Ok(Self::I32AtomicRmwXor)
                    },
                    // 0xFE 0x3B `i64.atomic.rmw.xor` (Threads)
                    0x3b => {
                        Ok(Self::I64AtomicRmwXor)
                    },
                    // 0xFE 0x3C `i32.atomic.rmw8.xor_u` (Threads)
                    0x3c => {
                        Ok(Self::I32AtomicRmw8XorU)
                    },
                    // 0xFE 0x3D `i32.atomic.rmw16.xor_u` (Threads)
                    0x3d => {
                        Ok(Self::I32AtomicRmw16XorU)
                    },
                    // 0xFE 0x3E `i64.atomic.rmw8.xor_u` (Threads)
                    0x3e => {
                        Ok(Self::I64AtomicRmw8XorU)
                    },
                    // 0xFE 0x3F `i64.atomic.rmw16.xor_u` (Threads)
                    0x3f => {
                        Ok(Self::I64AtomicRmw16XorU)
                    },
                    // 0xFE 0x40 `i64.atomic.rmw32.xor_u` (Threads)
                    0x40 => {
                        Ok(Self::I64AtomicRmw32XorU)
                    },
                    // 0xFE 0x41 `i32.atomic.rmw.xchg` (Threads)
                    0x41 => {
                        Ok(Self::I32AtomicRmwXchg)
                    },
                    // 0xFE 0x42 `i64.atomic.rmw.xchg` (Threads)
                    0x42 => {
                        Ok(Self::I64AtomicRmwXchg)
                    },
                    // 0xFE 0x43 `i32.atomic.rmw8.xchg_u` (Threads)
                    0x43 => {
                        Ok(Self::I32AtomicRmw8XchgU)
                    },
                    // 0xFE 0x44 `i32.atomic.rmw16.xchg_u` (Threads)
                    0x44 => {
                        Ok(Self::I32AtomicRmw16XchgU)
                    },
                    // 0xFE 0x45 `i64.atomic.rmw8.xchg_u` (Threads)
                    0x45 => {
                        Ok(Self::I64AtomicRmw8XchgU)
                    },
                    // 0xFE 0x46 `i64.atomic.rmw16.xchg_u` (Threads)
                    0x46 => {
                        Ok(Self::I64AtomicRmw16XchgU)
                    },
                    // 0xFE 0x47 `i64.atomic.rmw32.xchg_u` (Threads)
                    0x47 => {
                        Ok(Self::I64AtomicRmw32XchgU)
                    },
                    // 0xFE 0x48 `i32.atomic.rmw.cmpxchg` (Threads)
                    0x48 => {
                        Ok(Self::I32AtomicRmwCmpxchg)
                    },
                    // 0xFE 0x49 `i64.atomic.rmw.cmpxchg` (Threads)
                    0x49 => {
                        Ok(Self::I64AtomicRmwCmpxchg)
                    },
                    // 0xFE 0x4A `i32.atomic.rmw8.cmpxchg_u` (Threads)
                    0x4a => {
                        Ok(Self::I32AtomicRmw8CmpxchgU)
                    },
                    // 0xFE 0x4B `i32.atomic.rmw16.cmpxchg_u` (Threads)
                    0x4b => {
                        Ok(Self::I32AtomicRmw16CmpxchgU)
                    },
                    // 0xFE 0x4C `i64.atomic.rmw8.cmpxchg_u` (Threads)
                    0x4c => {
                        Ok(Self::I64AtomicRmw8CmpxchgU)
                    },
                    // 0xFE 0x4D `i64.atomic.rmw16.cmpxchg_u` (Threads)
                    0x4d => {
                        Ok(Self::I64AtomicRmw16CmpxchgU)
                    },
                    // 0xFE 0x4E `i64.atomic.rmw32.cmpxchg_u` (Threads)
                    0x4e => {
                        Ok(Self::I64AtomicRmw32CmpxchgU)
                    },
                    _ => Err(WasmDecodeErrorKind::InvalidBytecode2(leading, trailing))
                }
            }
            _ => Err(WasmDecodeErrorKind::InvalidBytecode(leading))
        }
    }

    #[inline]
    pub const fn as_str(&self) -> &'static str {
        self.mnemonic().as_str()
    }

    pub const fn mnemonic(&self) -> WasmMnemonic {
        match self {
            Self::AnyConvertExtern => WasmMnemonic::AnyConvertExtern,
            Self::ArrayCopy(_, _) => WasmMnemonic::ArrayCopy,
            Self::ArrayFill(_) => WasmMnemonic::ArrayFill,
            Self::ArrayGet(_) => WasmMnemonic::ArrayGet,
            Self::ArrayGetS(_) => WasmMnemonic::ArrayGetS,
            Self::ArrayGetU(_) => WasmMnemonic::ArrayGetU,
            Self::ArrayInitData(_, _) => WasmMnemonic::ArrayInitData,
            Self::ArrayInitElem(_, _) => WasmMnemonic::ArrayInitElem,
            Self::ArrayLen => WasmMnemonic::ArrayLen,
            Self::ArrayNew(_) => WasmMnemonic::ArrayNew,
            Self::ArrayNewData(_, _) => WasmMnemonic::ArrayNewData,
            Self::ArrayNewDefault(_) => WasmMnemonic::ArrayNewDefault,
            Self::ArrayNewElem(_, _) => WasmMnemonic::ArrayNewElem,
            Self::ArrayNewFixed(_, _) => WasmMnemonic::ArrayNewFixed,
            Self::ArraySet(_) => WasmMnemonic::ArraySet,
            Self::AtomicFence => WasmMnemonic::AtomicFence,
            Self::Block(_) => WasmMnemonic::Block,
            Self::Br(_) => WasmMnemonic::Br,
            Self::BrIf(_) => WasmMnemonic::BrIf,
            Self::BrOnCast(_, _) => WasmMnemonic::BrOnCast,
            Self::BrOnCastFail(_, _) => WasmMnemonic::BrOnCastFail,
            Self::BrOnNonNull(_) => WasmMnemonic::BrOnNonNull,
            Self::BrOnNull => WasmMnemonic::BrOnNull,
            Self::BrTable(_) => WasmMnemonic::BrTable,
            Self::Call(_) => WasmMnemonic::Call,
            Self::CallIndirect(_, _) => WasmMnemonic::CallIndirect,
            Self::CallRef => WasmMnemonic::CallRef,
            Self::DataDrop(_) => WasmMnemonic::DataDrop,
            Self::Drop => WasmMnemonic::Drop,
            Self::ElemDrop(_) => WasmMnemonic::ElemDrop,
            Self::Else => WasmMnemonic::Else,
            Self::End => WasmMnemonic::End,
            Self::ExternConvertAny => WasmMnemonic::ExternConvertAny,
            Self::F32Abs => WasmMnemonic::F32Abs,
            Self::F32Add => WasmMnemonic::F32Add,
            Self::F32Ceil => WasmMnemonic::F32Ceil,
            Self::F32Const(_) => WasmMnemonic::F32Const,
            Self::F32ConvertI32S => WasmMnemonic::F32ConvertI32S,
            Self::F32ConvertI32U => WasmMnemonic::F32ConvertI32U,
            Self::F32ConvertI64S => WasmMnemonic::F32ConvertI64S,
            Self::F32ConvertI64U => WasmMnemonic::F32ConvertI64U,
            Self::F32Copysign => WasmMnemonic::F32Copysign,
            Self::F32DemoteF64 => WasmMnemonic::F32DemoteF64,
            Self::F32Div => WasmMnemonic::F32Div,
            Self::F32Eq => WasmMnemonic::F32Eq,
            Self::F32Floor => WasmMnemonic::F32Floor,
            Self::F32Ge => WasmMnemonic::F32Ge,
            Self::F32Gt => WasmMnemonic::F32Gt,
            Self::F32Le => WasmMnemonic::F32Le,
            Self::F32Load(_) => WasmMnemonic::F32Load,
            Self::F32Lt => WasmMnemonic::F32Lt,
            Self::F32Max => WasmMnemonic::F32Max,
            Self::F32Min => WasmMnemonic::F32Min,
            Self::F32Mul => WasmMnemonic::F32Mul,
            Self::F32Ne => WasmMnemonic::F32Ne,
            Self::F32Nearest => WasmMnemonic::F32Nearest,
            Self::F32Neg => WasmMnemonic::F32Neg,
            Self::F32ReinterpretI32 => WasmMnemonic::F32ReinterpretI32,
            Self::F32Sqrt => WasmMnemonic::F32Sqrt,
            Self::F32Store(_) => WasmMnemonic::F32Store,
            Self::F32Sub => WasmMnemonic::F32Sub,
            Self::F32Trunc => WasmMnemonic::F32Trunc,
            Self::F32x4Abs => WasmMnemonic::F32x4Abs,
            Self::F32x4Add => WasmMnemonic::F32x4Add,
            Self::F32x4Ceil => WasmMnemonic::F32x4Ceil,
            Self::F32x4ConvertI32x4S => WasmMnemonic::F32x4ConvertI32x4S,
            Self::F32x4ConvertI32x4U => WasmMnemonic::F32x4ConvertI32x4U,
            Self::F32x4DemoteF64x2Zero => WasmMnemonic::F32x4DemoteF64x2Zero,
            Self::F32x4Div => WasmMnemonic::F32x4Div,
            Self::F32x4Eq => WasmMnemonic::F32x4Eq,
            Self::F32x4ExtractLane => WasmMnemonic::F32x4ExtractLane,
            Self::F32x4Floor => WasmMnemonic::F32x4Floor,
            Self::F32x4Ge => WasmMnemonic::F32x4Ge,
            Self::F32x4Gt => WasmMnemonic::F32x4Gt,
            Self::F32x4Le => WasmMnemonic::F32x4Le,
            Self::F32x4Lt => WasmMnemonic::F32x4Lt,
            Self::F32x4Max => WasmMnemonic::F32x4Max,
            Self::F32x4Min => WasmMnemonic::F32x4Min,
            Self::F32x4Mul => WasmMnemonic::F32x4Mul,
            Self::F32x4Ne => WasmMnemonic::F32x4Ne,
            Self::F32x4Nearest => WasmMnemonic::F32x4Nearest,
            Self::F32x4Neg => WasmMnemonic::F32x4Neg,
            Self::F32x4Pmax => WasmMnemonic::F32x4Pmax,
            Self::F32x4Pmin => WasmMnemonic::F32x4Pmin,
            Self::F32x4RelaxedDotBf16x8AddF32x4 => WasmMnemonic::F32x4RelaxedDotBf16x8AddF32x4,
            Self::F32x4RelaxedMadd => WasmMnemonic::F32x4RelaxedMadd,
            Self::F32x4RelaxedMax => WasmMnemonic::F32x4RelaxedMax,
            Self::F32x4RelaxedMin => WasmMnemonic::F32x4RelaxedMin,
            Self::F32x4RelaxedNmadd => WasmMnemonic::F32x4RelaxedNmadd,
            Self::F32x4ReplaceLane => WasmMnemonic::F32x4ReplaceLane,
            Self::F32x4Splat => WasmMnemonic::F32x4Splat,
            Self::F32x4Sqrt => WasmMnemonic::F32x4Sqrt,
            Self::F32x4Sub => WasmMnemonic::F32x4Sub,
            Self::F32x4Trunc => WasmMnemonic::F32x4Trunc,
            Self::F64Abs => WasmMnemonic::F64Abs,
            Self::F64Add => WasmMnemonic::F64Add,
            Self::F64Ceil => WasmMnemonic::F64Ceil,
            Self::F64Const(_) => WasmMnemonic::F64Const,
            Self::F64ConvertI32S => WasmMnemonic::F64ConvertI32S,
            Self::F64ConvertI32U => WasmMnemonic::F64ConvertI32U,
            Self::F64ConvertI64S => WasmMnemonic::F64ConvertI64S,
            Self::F64ConvertI64U => WasmMnemonic::F64ConvertI64U,
            Self::F64Copysign => WasmMnemonic::F64Copysign,
            Self::F64Div => WasmMnemonic::F64Div,
            Self::F64Eq => WasmMnemonic::F64Eq,
            Self::F64Floor => WasmMnemonic::F64Floor,
            Self::F64Ge => WasmMnemonic::F64Ge,
            Self::F64Gt => WasmMnemonic::F64Gt,
            Self::F64Le => WasmMnemonic::F64Le,
            Self::F64Load(_) => WasmMnemonic::F64Load,
            Self::F64Lt => WasmMnemonic::F64Lt,
            Self::F64Max => WasmMnemonic::F64Max,
            Self::F64Min => WasmMnemonic::F64Min,
            Self::F64Mul => WasmMnemonic::F64Mul,
            Self::F64Ne => WasmMnemonic::F64Ne,
            Self::F64Nearest => WasmMnemonic::F64Nearest,
            Self::F64Neg => WasmMnemonic::F64Neg,
            Self::F64PromoteF32 => WasmMnemonic::F64PromoteF32,
            Self::F64ReinterpretI64 => WasmMnemonic::F64ReinterpretI64,
            Self::F64Sqrt => WasmMnemonic::F64Sqrt,
            Self::F64Store(_) => WasmMnemonic::F64Store,
            Self::F64Sub => WasmMnemonic::F64Sub,
            Self::F64Trunc => WasmMnemonic::F64Trunc,
            Self::F64x2Abs => WasmMnemonic::F64x2Abs,
            Self::F64x2Add => WasmMnemonic::F64x2Add,
            Self::F64x2Ceil => WasmMnemonic::F64x2Ceil,
            Self::F64x2ConvertLowI32x4S => WasmMnemonic::F64x2ConvertLowI32x4S,
            Self::F64x2ConvertLowI32x4U => WasmMnemonic::F64x2ConvertLowI32x4U,
            Self::F64x2Div => WasmMnemonic::F64x2Div,
            Self::F64x2Eq => WasmMnemonic::F64x2Eq,
            Self::F64x2ExtractLane => WasmMnemonic::F64x2ExtractLane,
            Self::F64x2Floor => WasmMnemonic::F64x2Floor,
            Self::F64x2Ge => WasmMnemonic::F64x2Ge,
            Self::F64x2Gt => WasmMnemonic::F64x2Gt,
            Self::F64x2Le => WasmMnemonic::F64x2Le,
            Self::F64x2Lt => WasmMnemonic::F64x2Lt,
            Self::F64x2Max => WasmMnemonic::F64x2Max,
            Self::F64x2Min => WasmMnemonic::F64x2Min,
            Self::F64x2Mul => WasmMnemonic::F64x2Mul,
            Self::F64x2Ne => WasmMnemonic::F64x2Ne,
            Self::F64x2Nearest => WasmMnemonic::F64x2Nearest,
            Self::F64x2Neg => WasmMnemonic::F64x2Neg,
            Self::F64x2Pmax => WasmMnemonic::F64x2Pmax,
            Self::F64x2Pmin => WasmMnemonic::F64x2Pmin,
            Self::F64x2PromoteLowF32x4 => WasmMnemonic::F64x2PromoteLowF32x4,
            Self::F64x2RelaxedMadd => WasmMnemonic::F64x2RelaxedMadd,
            Self::F64x2RelaxedMax => WasmMnemonic::F64x2RelaxedMax,
            Self::F64x2RelaxedMin => WasmMnemonic::F64x2RelaxedMin,
            Self::F64x2RelaxedNmadd => WasmMnemonic::F64x2RelaxedNmadd,
            Self::F64x2ReplaceLane => WasmMnemonic::F64x2ReplaceLane,
            Self::F64x2Splat => WasmMnemonic::F64x2Splat,
            Self::F64x2Sqrt => WasmMnemonic::F64x2Sqrt,
            Self::F64x2Sub => WasmMnemonic::F64x2Sub,
            Self::F64x2Trunc => WasmMnemonic::F64x2Trunc,
            Self::GlobalGet(_) => WasmMnemonic::GlobalGet,
            Self::GlobalSet(_) => WasmMnemonic::GlobalSet,
            Self::I16x8Abs => WasmMnemonic::I16x8Abs,
            Self::I16x8Add => WasmMnemonic::I16x8Add,
            Self::I16x8AddSatS => WasmMnemonic::I16x8AddSatS,
            Self::I16x8AddSatU => WasmMnemonic::I16x8AddSatU,
            Self::I16x8AllTrue => WasmMnemonic::I16x8AllTrue,
            Self::I16x8AvgrU => WasmMnemonic::I16x8AvgrU,
            Self::I16x8Bitmask => WasmMnemonic::I16x8Bitmask,
            Self::I16x8Eq => WasmMnemonic::I16x8Eq,
            Self::I16x8ExtaddPairwiseI8x16S => WasmMnemonic::I16x8ExtaddPairwiseI8x16S,
            Self::I16x8ExtaddPairwiseI8x16U => WasmMnemonic::I16x8ExtaddPairwiseI8x16U,
            Self::I16x8ExtendHighI8x16S => WasmMnemonic::I16x8ExtendHighI8x16S,
            Self::I16x8ExtendHighI8x16U => WasmMnemonic::I16x8ExtendHighI8x16U,
            Self::I16x8ExtendLowI8x16S => WasmMnemonic::I16x8ExtendLowI8x16S,
            Self::I16x8ExtendLowI8x16U => WasmMnemonic::I16x8ExtendLowI8x16U,
            Self::I16x8ExtmulHighI8x16S => WasmMnemonic::I16x8ExtmulHighI8x16S,
            Self::I16x8ExtmulHighI8x16U => WasmMnemonic::I16x8ExtmulHighI8x16U,
            Self::I16x8ExtmulLowI8x16S => WasmMnemonic::I16x8ExtmulLowI8x16S,
            Self::I16x8ExtmulLowI8x16U => WasmMnemonic::I16x8ExtmulLowI8x16U,
            Self::I16x8ExtractLaneS => WasmMnemonic::I16x8ExtractLaneS,
            Self::I16x8ExtractLaneU => WasmMnemonic::I16x8ExtractLaneU,
            Self::I16x8GeS => WasmMnemonic::I16x8GeS,
            Self::I16x8GeU => WasmMnemonic::I16x8GeU,
            Self::I16x8GtS => WasmMnemonic::I16x8GtS,
            Self::I16x8GtU => WasmMnemonic::I16x8GtU,
            Self::I16x8LeS => WasmMnemonic::I16x8LeS,
            Self::I16x8LeU => WasmMnemonic::I16x8LeU,
            Self::I16x8LtS => WasmMnemonic::I16x8LtS,
            Self::I16x8LtU => WasmMnemonic::I16x8LtU,
            Self::I16x8MaxS => WasmMnemonic::I16x8MaxS,
            Self::I16x8MaxU => WasmMnemonic::I16x8MaxU,
            Self::I16x8MinS => WasmMnemonic::I16x8MinS,
            Self::I16x8MinU => WasmMnemonic::I16x8MinU,
            Self::I16x8Mul => WasmMnemonic::I16x8Mul,
            Self::I16x8NarrowI32x4S => WasmMnemonic::I16x8NarrowI32x4S,
            Self::I16x8NarrowI32x4U => WasmMnemonic::I16x8NarrowI32x4U,
            Self::I16x8Ne => WasmMnemonic::I16x8Ne,
            Self::I16x8Neg => WasmMnemonic::I16x8Neg,
            Self::I16x8Q15mulrSatS => WasmMnemonic::I16x8Q15mulrSatS,
            Self::I16x8RelaxedDotI8x16I7x16S => WasmMnemonic::I16x8RelaxedDotI8x16I7x16S,
            Self::I16x8RelaxedLaneselect => WasmMnemonic::I16x8RelaxedLaneselect,
            Self::I16x8RelaxedQ15mulrS => WasmMnemonic::I16x8RelaxedQ15mulrS,
            Self::I16x8ReplaceLane => WasmMnemonic::I16x8ReplaceLane,
            Self::I16x8Shl => WasmMnemonic::I16x8Shl,
            Self::I16x8ShrS => WasmMnemonic::I16x8ShrS,
            Self::I16x8ShrU => WasmMnemonic::I16x8ShrU,
            Self::I16x8Splat => WasmMnemonic::I16x8Splat,
            Self::I16x8Sub => WasmMnemonic::I16x8Sub,
            Self::I16x8SubSatS => WasmMnemonic::I16x8SubSatS,
            Self::I16x8SubSatU => WasmMnemonic::I16x8SubSatU,
            Self::I31GetS => WasmMnemonic::I31GetS,
            Self::I31GetU => WasmMnemonic::I31GetU,
            Self::I32Add => WasmMnemonic::I32Add,
            Self::I32And => WasmMnemonic::I32And,
            Self::I32AtomicLoad => WasmMnemonic::I32AtomicLoad,
            Self::I32AtomicLoad16U => WasmMnemonic::I32AtomicLoad16U,
            Self::I32AtomicLoad8U => WasmMnemonic::I32AtomicLoad8U,
            Self::I32AtomicRmw16AddU => WasmMnemonic::I32AtomicRmw16AddU,
            Self::I32AtomicRmw16AndU => WasmMnemonic::I32AtomicRmw16AndU,
            Self::I32AtomicRmw16CmpxchgU => WasmMnemonic::I32AtomicRmw16CmpxchgU,
            Self::I32AtomicRmw16OrU => WasmMnemonic::I32AtomicRmw16OrU,
            Self::I32AtomicRmw16SubU => WasmMnemonic::I32AtomicRmw16SubU,
            Self::I32AtomicRmw16XchgU => WasmMnemonic::I32AtomicRmw16XchgU,
            Self::I32AtomicRmw16XorU => WasmMnemonic::I32AtomicRmw16XorU,
            Self::I32AtomicRmw8AddU => WasmMnemonic::I32AtomicRmw8AddU,
            Self::I32AtomicRmw8AndU => WasmMnemonic::I32AtomicRmw8AndU,
            Self::I32AtomicRmw8CmpxchgU => WasmMnemonic::I32AtomicRmw8CmpxchgU,
            Self::I32AtomicRmw8OrU => WasmMnemonic::I32AtomicRmw8OrU,
            Self::I32AtomicRmw8SubU => WasmMnemonic::I32AtomicRmw8SubU,
            Self::I32AtomicRmw8XchgU => WasmMnemonic::I32AtomicRmw8XchgU,
            Self::I32AtomicRmw8XorU => WasmMnemonic::I32AtomicRmw8XorU,
            Self::I32AtomicRmwAdd => WasmMnemonic::I32AtomicRmwAdd,
            Self::I32AtomicRmwAnd => WasmMnemonic::I32AtomicRmwAnd,
            Self::I32AtomicRmwCmpxchg => WasmMnemonic::I32AtomicRmwCmpxchg,
            Self::I32AtomicRmwOr => WasmMnemonic::I32AtomicRmwOr,
            Self::I32AtomicRmwSub => WasmMnemonic::I32AtomicRmwSub,
            Self::I32AtomicRmwXchg => WasmMnemonic::I32AtomicRmwXchg,
            Self::I32AtomicRmwXor => WasmMnemonic::I32AtomicRmwXor,
            Self::I32AtomicStore => WasmMnemonic::I32AtomicStore,
            Self::I32AtomicStore16 => WasmMnemonic::I32AtomicStore16,
            Self::I32AtomicStore8 => WasmMnemonic::I32AtomicStore8,
            Self::I32Clz => WasmMnemonic::I32Clz,
            Self::I32Const(_) => WasmMnemonic::I32Const,
            Self::I32Ctz => WasmMnemonic::I32Ctz,
            Self::I32DivS => WasmMnemonic::I32DivS,
            Self::I32DivU => WasmMnemonic::I32DivU,
            Self::I32Eq => WasmMnemonic::I32Eq,
            Self::I32Eqz => WasmMnemonic::I32Eqz,
            Self::I32Extend16S => WasmMnemonic::I32Extend16S,
            Self::I32Extend8S => WasmMnemonic::I32Extend8S,
            Self::I32GeS => WasmMnemonic::I32GeS,
            Self::I32GeU => WasmMnemonic::I32GeU,
            Self::I32GtS => WasmMnemonic::I32GtS,
            Self::I32GtU => WasmMnemonic::I32GtU,
            Self::I32LeS => WasmMnemonic::I32LeS,
            Self::I32LeU => WasmMnemonic::I32LeU,
            Self::I32Load(_) => WasmMnemonic::I32Load,
            Self::I32Load16S(_) => WasmMnemonic::I32Load16S,
            Self::I32Load16U(_) => WasmMnemonic::I32Load16U,
            Self::I32Load8S(_) => WasmMnemonic::I32Load8S,
            Self::I32Load8U(_) => WasmMnemonic::I32Load8U,
            Self::I32LtS => WasmMnemonic::I32LtS,
            Self::I32LtU => WasmMnemonic::I32LtU,
            Self::I32Mul => WasmMnemonic::I32Mul,
            Self::I32Ne => WasmMnemonic::I32Ne,
            Self::I32Or => WasmMnemonic::I32Or,
            Self::I32Popcnt => WasmMnemonic::I32Popcnt,
            Self::I32ReinterpretF32 => WasmMnemonic::I32ReinterpretF32,
            Self::I32RemS => WasmMnemonic::I32RemS,
            Self::I32RemU => WasmMnemonic::I32RemU,
            Self::I32Rotl => WasmMnemonic::I32Rotl,
            Self::I32Rotr => WasmMnemonic::I32Rotr,
            Self::I32Shl => WasmMnemonic::I32Shl,
            Self::I32ShrS => WasmMnemonic::I32ShrS,
            Self::I32ShrU => WasmMnemonic::I32ShrU,
            Self::I32Store(_) => WasmMnemonic::I32Store,
            Self::I32Store16(_) => WasmMnemonic::I32Store16,
            Self::I32Store8(_) => WasmMnemonic::I32Store8,
            Self::I32Sub => WasmMnemonic::I32Sub,
            Self::I32TruncF32S => WasmMnemonic::I32TruncF32S,
            Self::I32TruncF32U => WasmMnemonic::I32TruncF32U,
            Self::I32TruncF64S => WasmMnemonic::I32TruncF64S,
            Self::I32TruncF64U => WasmMnemonic::I32TruncF64U,
            Self::I32TruncSatF32S => WasmMnemonic::I32TruncSatF32S,
            Self::I32TruncSatF32U => WasmMnemonic::I32TruncSatF32U,
            Self::I32TruncSatF64S => WasmMnemonic::I32TruncSatF64S,
            Self::I32TruncSatF64U => WasmMnemonic::I32TruncSatF64U,
            Self::I32WrapI64 => WasmMnemonic::I32WrapI64,
            Self::I32Xor => WasmMnemonic::I32Xor,
            Self::I32x4Abs => WasmMnemonic::I32x4Abs,
            Self::I32x4Add => WasmMnemonic::I32x4Add,
            Self::I32x4AllTrue => WasmMnemonic::I32x4AllTrue,
            Self::I32x4Bitmask => WasmMnemonic::I32x4Bitmask,
            Self::I32x4DotI16x8S => WasmMnemonic::I32x4DotI16x8S,
            Self::I32x4Eq => WasmMnemonic::I32x4Eq,
            Self::I32x4ExtaddPairwiseI16x8S => WasmMnemonic::I32x4ExtaddPairwiseI16x8S,
            Self::I32x4ExtaddPairwiseI16x8U => WasmMnemonic::I32x4ExtaddPairwiseI16x8U,
            Self::I32x4ExtendHighI16x8S => WasmMnemonic::I32x4ExtendHighI16x8S,
            Self::I32x4ExtendHighI16x8U => WasmMnemonic::I32x4ExtendHighI16x8U,
            Self::I32x4ExtendLowI16x8S => WasmMnemonic::I32x4ExtendLowI16x8S,
            Self::I32x4ExtendLowI16x8U => WasmMnemonic::I32x4ExtendLowI16x8U,
            Self::I32x4ExtmulHighI16x8S => WasmMnemonic::I32x4ExtmulHighI16x8S,
            Self::I32x4ExtmulHighI16x8U => WasmMnemonic::I32x4ExtmulHighI16x8U,
            Self::I32x4ExtmulLowI16x8S => WasmMnemonic::I32x4ExtmulLowI16x8S,
            Self::I32x4ExtmulLowI16x8U => WasmMnemonic::I32x4ExtmulLowI16x8U,
            Self::I32x4ExtractLane => WasmMnemonic::I32x4ExtractLane,
            Self::I32x4GeS => WasmMnemonic::I32x4GeS,
            Self::I32x4GeU => WasmMnemonic::I32x4GeU,
            Self::I32x4GtS => WasmMnemonic::I32x4GtS,
            Self::I32x4GtU => WasmMnemonic::I32x4GtU,
            Self::I32x4LeS => WasmMnemonic::I32x4LeS,
            Self::I32x4LeU => WasmMnemonic::I32x4LeU,
            Self::I32x4LtS => WasmMnemonic::I32x4LtS,
            Self::I32x4LtU => WasmMnemonic::I32x4LtU,
            Self::I32x4MaxS => WasmMnemonic::I32x4MaxS,
            Self::I32x4MaxU => WasmMnemonic::I32x4MaxU,
            Self::I32x4MinS => WasmMnemonic::I32x4MinS,
            Self::I32x4MinU => WasmMnemonic::I32x4MinU,
            Self::I32x4Mul => WasmMnemonic::I32x4Mul,
            Self::I32x4Ne => WasmMnemonic::I32x4Ne,
            Self::I32x4Neg => WasmMnemonic::I32x4Neg,
            Self::I32x4RelaxedDotI8x16I7x16AddS => WasmMnemonic::I32x4RelaxedDotI8x16I7x16AddS,
            Self::I32x4RelaxedLaneselect => WasmMnemonic::I32x4RelaxedLaneselect,
            Self::I32x4RelaxedTruncF32x4U => WasmMnemonic::I32x4RelaxedTruncF32x4U,
            Self::I32x4RelaxedTruncF64x2SZero => WasmMnemonic::I32x4RelaxedTruncF64x2SZero,
            Self::I32x4RelaxedTruncF64x2UZero => WasmMnemonic::I32x4RelaxedTruncF64x2UZero,
            Self::I32x4ReplaceLane => WasmMnemonic::I32x4ReplaceLane,
            Self::I32x4Shl => WasmMnemonic::I32x4Shl,
            Self::I32x4ShrS => WasmMnemonic::I32x4ShrS,
            Self::I32x4ShrU => WasmMnemonic::I32x4ShrU,
            Self::I32x4Splat => WasmMnemonic::I32x4Splat,
            Self::I32x4Sub => WasmMnemonic::I32x4Sub,
            Self::I32x4TruncSatF32x4S => WasmMnemonic::I32x4TruncSatF32x4S,
            Self::I32x4TruncSatF32x4U => WasmMnemonic::I32x4TruncSatF32x4U,
            Self::I32x4TruncSatF64x2SZero => WasmMnemonic::I32x4TruncSatF64x2SZero,
            Self::I32x4TruncSatF64x2UZero => WasmMnemonic::I32x4TruncSatF64x2UZero,
            Self::I64Add => WasmMnemonic::I64Add,
            Self::I64And => WasmMnemonic::I64And,
            Self::I64AtomicLoad => WasmMnemonic::I64AtomicLoad,
            Self::I64AtomicLoad16U => WasmMnemonic::I64AtomicLoad16U,
            Self::I64AtomicLoad32U => WasmMnemonic::I64AtomicLoad32U,
            Self::I64AtomicLoad8U => WasmMnemonic::I64AtomicLoad8U,
            Self::I64AtomicRmw16AddU => WasmMnemonic::I64AtomicRmw16AddU,
            Self::I64AtomicRmw16AndU => WasmMnemonic::I64AtomicRmw16AndU,
            Self::I64AtomicRmw16CmpxchgU => WasmMnemonic::I64AtomicRmw16CmpxchgU,
            Self::I64AtomicRmw16OrU => WasmMnemonic::I64AtomicRmw16OrU,
            Self::I64AtomicRmw16SubU => WasmMnemonic::I64AtomicRmw16SubU,
            Self::I64AtomicRmw16XchgU => WasmMnemonic::I64AtomicRmw16XchgU,
            Self::I64AtomicRmw16XorU => WasmMnemonic::I64AtomicRmw16XorU,
            Self::I64AtomicRmw32AddU => WasmMnemonic::I64AtomicRmw32AddU,
            Self::I64AtomicRmw32AndU => WasmMnemonic::I64AtomicRmw32AndU,
            Self::I64AtomicRmw32CmpxchgU => WasmMnemonic::I64AtomicRmw32CmpxchgU,
            Self::I64AtomicRmw32OrU => WasmMnemonic::I64AtomicRmw32OrU,
            Self::I64AtomicRmw32SubU => WasmMnemonic::I64AtomicRmw32SubU,
            Self::I64AtomicRmw32XchgU => WasmMnemonic::I64AtomicRmw32XchgU,
            Self::I64AtomicRmw32XorU => WasmMnemonic::I64AtomicRmw32XorU,
            Self::I64AtomicRmw8AddU => WasmMnemonic::I64AtomicRmw8AddU,
            Self::I64AtomicRmw8AndU => WasmMnemonic::I64AtomicRmw8AndU,
            Self::I64AtomicRmw8CmpxchgU => WasmMnemonic::I64AtomicRmw8CmpxchgU,
            Self::I64AtomicRmw8OrU => WasmMnemonic::I64AtomicRmw8OrU,
            Self::I64AtomicRmw8SubU => WasmMnemonic::I64AtomicRmw8SubU,
            Self::I64AtomicRmw8XchgU => WasmMnemonic::I64AtomicRmw8XchgU,
            Self::I64AtomicRmw8XorU => WasmMnemonic::I64AtomicRmw8XorU,
            Self::I64AtomicRmwAdd => WasmMnemonic::I64AtomicRmwAdd,
            Self::I64AtomicRmwAnd => WasmMnemonic::I64AtomicRmwAnd,
            Self::I64AtomicRmwCmpxchg => WasmMnemonic::I64AtomicRmwCmpxchg,
            Self::I64AtomicRmwOr => WasmMnemonic::I64AtomicRmwOr,
            Self::I64AtomicRmwSub => WasmMnemonic::I64AtomicRmwSub,
            Self::I64AtomicRmwXchg => WasmMnemonic::I64AtomicRmwXchg,
            Self::I64AtomicRmwXor => WasmMnemonic::I64AtomicRmwXor,
            Self::I64AtomicStore => WasmMnemonic::I64AtomicStore,
            Self::I64AtomicStore16 => WasmMnemonic::I64AtomicStore16,
            Self::I64AtomicStore32 => WasmMnemonic::I64AtomicStore32,
            Self::I64AtomicStore8 => WasmMnemonic::I64AtomicStore8,
            Self::I64Clz => WasmMnemonic::I64Clz,
            Self::I64Const(_) => WasmMnemonic::I64Const,
            Self::I64Ctz => WasmMnemonic::I64Ctz,
            Self::I64DivS => WasmMnemonic::I64DivS,
            Self::I64DivU => WasmMnemonic::I64DivU,
            Self::I64Eq => WasmMnemonic::I64Eq,
            Self::I64Eqz => WasmMnemonic::I64Eqz,
            Self::I64Extend16S => WasmMnemonic::I64Extend16S,
            Self::I64Extend32S => WasmMnemonic::I64Extend32S,
            Self::I64Extend8S => WasmMnemonic::I64Extend8S,
            Self::I64ExtendI32S => WasmMnemonic::I64ExtendI32S,
            Self::I64ExtendI32U => WasmMnemonic::I64ExtendI32U,
            Self::I64GeS => WasmMnemonic::I64GeS,
            Self::I64GeU => WasmMnemonic::I64GeU,
            Self::I64GtS => WasmMnemonic::I64GtS,
            Self::I64GtU => WasmMnemonic::I64GtU,
            Self::I64LeS => WasmMnemonic::I64LeS,
            Self::I64LeU => WasmMnemonic::I64LeU,
            Self::I64Load(_) => WasmMnemonic::I64Load,
            Self::I64Load16S(_) => WasmMnemonic::I64Load16S,
            Self::I64Load16U(_) => WasmMnemonic::I64Load16U,
            Self::I64Load32S(_) => WasmMnemonic::I64Load32S,
            Self::I64Load32U(_) => WasmMnemonic::I64Load32U,
            Self::I64Load8S(_) => WasmMnemonic::I64Load8S,
            Self::I64Load8U(_) => WasmMnemonic::I64Load8U,
            Self::I64LtS => WasmMnemonic::I64LtS,
            Self::I64LtU => WasmMnemonic::I64LtU,
            Self::I64Mul => WasmMnemonic::I64Mul,
            Self::I64Ne => WasmMnemonic::I64Ne,
            Self::I64Or => WasmMnemonic::I64Or,
            Self::I64Popcnt => WasmMnemonic::I64Popcnt,
            Self::I64ReinterpretF64 => WasmMnemonic::I64ReinterpretF64,
            Self::I64RemS => WasmMnemonic::I64RemS,
            Self::I64RemU => WasmMnemonic::I64RemU,
            Self::I64Rotl => WasmMnemonic::I64Rotl,
            Self::I64Rotr => WasmMnemonic::I64Rotr,
            Self::I64Shl => WasmMnemonic::I64Shl,
            Self::I64ShrS => WasmMnemonic::I64ShrS,
            Self::I64ShrU => WasmMnemonic::I64ShrU,
            Self::I64Store(_) => WasmMnemonic::I64Store,
            Self::I64Store16(_) => WasmMnemonic::I64Store16,
            Self::I64Store32(_) => WasmMnemonic::I64Store32,
            Self::I64Store8(_) => WasmMnemonic::I64Store8,
            Self::I64Sub => WasmMnemonic::I64Sub,
            Self::I64TruncF32S => WasmMnemonic::I64TruncF32S,
            Self::I64TruncF32U => WasmMnemonic::I64TruncF32U,
            Self::I64TruncF64S => WasmMnemonic::I64TruncF64S,
            Self::I64TruncF64U => WasmMnemonic::I64TruncF64U,
            Self::I64TruncSatF32S => WasmMnemonic::I64TruncSatF32S,
            Self::I64TruncSatF32U => WasmMnemonic::I64TruncSatF32U,
            Self::I64TruncSatF64S => WasmMnemonic::I64TruncSatF64S,
            Self::I64TruncSatF64U => WasmMnemonic::I64TruncSatF64U,
            Self::I64Xor => WasmMnemonic::I64Xor,
            Self::I64x2Abs => WasmMnemonic::I64x2Abs,
            Self::I64x2Add => WasmMnemonic::I64x2Add,
            Self::I64x2AllTrue => WasmMnemonic::I64x2AllTrue,
            Self::I64x2Bitmask => WasmMnemonic::I64x2Bitmask,
            Self::I64x2Eq => WasmMnemonic::I64x2Eq,
            Self::I64x2ExtendHighI32x4S => WasmMnemonic::I64x2ExtendHighI32x4S,
            Self::I64x2ExtendHighI32x4U => WasmMnemonic::I64x2ExtendHighI32x4U,
            Self::I64x2ExtendLowI32x4S => WasmMnemonic::I64x2ExtendLowI32x4S,
            Self::I64x2ExtendLowI32x4U => WasmMnemonic::I64x2ExtendLowI32x4U,
            Self::I64x2ExtmulHighI32x4S => WasmMnemonic::I64x2ExtmulHighI32x4S,
            Self::I64x2ExtmulHighI32x4U => WasmMnemonic::I64x2ExtmulHighI32x4U,
            Self::I64x2ExtmulLowI32x4S => WasmMnemonic::I64x2ExtmulLowI32x4S,
            Self::I64x2ExtmulLowI32x4U => WasmMnemonic::I64x2ExtmulLowI32x4U,
            Self::I64x2ExtractLane => WasmMnemonic::I64x2ExtractLane,
            Self::I64x2GeS => WasmMnemonic::I64x2GeS,
            Self::I64x2GtS => WasmMnemonic::I64x2GtS,
            Self::I64x2LeS => WasmMnemonic::I64x2LeS,
            Self::I64x2LtS => WasmMnemonic::I64x2LtS,
            Self::I64x2Mul => WasmMnemonic::I64x2Mul,
            Self::I64x2Ne => WasmMnemonic::I64x2Ne,
            Self::I64x2Neg => WasmMnemonic::I64x2Neg,
            Self::I64x2RelaxedLaneselect => WasmMnemonic::I64x2RelaxedLaneselect,
            Self::I64x2ReplaceLane => WasmMnemonic::I64x2ReplaceLane,
            Self::I64x2Shl => WasmMnemonic::I64x2Shl,
            Self::I64x2ShrS => WasmMnemonic::I64x2ShrS,
            Self::I64x2ShrU => WasmMnemonic::I64x2ShrU,
            Self::I64x2Splat => WasmMnemonic::I64x2Splat,
            Self::I64x2Sub => WasmMnemonic::I64x2Sub,
            Self::I8x16Abs => WasmMnemonic::I8x16Abs,
            Self::I8x16Add => WasmMnemonic::I8x16Add,
            Self::I8x16AddSatS => WasmMnemonic::I8x16AddSatS,
            Self::I8x16AddSatU => WasmMnemonic::I8x16AddSatU,
            Self::I8x16AllTrue => WasmMnemonic::I8x16AllTrue,
            Self::I8x16AvgrU => WasmMnemonic::I8x16AvgrU,
            Self::I8x16Bitmask => WasmMnemonic::I8x16Bitmask,
            Self::I8x16Eq => WasmMnemonic::I8x16Eq,
            Self::I8x16ExtractLaneS => WasmMnemonic::I8x16ExtractLaneS,
            Self::I8x16ExtractLaneU => WasmMnemonic::I8x16ExtractLaneU,
            Self::I8x16GeS => WasmMnemonic::I8x16GeS,
            Self::I8x16GeU => WasmMnemonic::I8x16GeU,
            Self::I8x16GtS => WasmMnemonic::I8x16GtS,
            Self::I8x16GtU => WasmMnemonic::I8x16GtU,
            Self::I8x16LeS => WasmMnemonic::I8x16LeS,
            Self::I8x16LeU => WasmMnemonic::I8x16LeU,
            Self::I8x16LtS => WasmMnemonic::I8x16LtS,
            Self::I8x16LtU => WasmMnemonic::I8x16LtU,
            Self::I8x16MaxS => WasmMnemonic::I8x16MaxS,
            Self::I8x16MaxU => WasmMnemonic::I8x16MaxU,
            Self::I8x16MinS => WasmMnemonic::I8x16MinS,
            Self::I8x16MinU => WasmMnemonic::I8x16MinU,
            Self::I8x16NarrowI16x8S => WasmMnemonic::I8x16NarrowI16x8S,
            Self::I8x16NarrowI16x8U => WasmMnemonic::I8x16NarrowI16x8U,
            Self::I8x16Ne => WasmMnemonic::I8x16Ne,
            Self::I8x16Neg => WasmMnemonic::I8x16Neg,
            Self::I8x16Popcnt => WasmMnemonic::I8x16Popcnt,
            Self::I8x16RelaxedLaneselect => WasmMnemonic::I8x16RelaxedLaneselect,
            Self::I8x16ReplaceLane => WasmMnemonic::I8x16ReplaceLane,
            Self::I8x16Shl => WasmMnemonic::I8x16Shl,
            Self::I8x16ShrS => WasmMnemonic::I8x16ShrS,
            Self::I8x16ShrU => WasmMnemonic::I8x16ShrU,
            Self::I8x16Shuffle => WasmMnemonic::I8x16Shuffle,
            Self::I8x16Splat => WasmMnemonic::I8x16Splat,
            Self::I8x16Sub => WasmMnemonic::I8x16Sub,
            Self::I8x16SubSatS => WasmMnemonic::I8x16SubSatS,
            Self::I8x16SubSatU => WasmMnemonic::I8x16SubSatU,
            Self::I8x16Swizzle => WasmMnemonic::I8x16Swizzle,
            Self::If(_) => WasmMnemonic::If,
            Self::LocalGet(_) => WasmMnemonic::LocalGet,
            Self::LocalSet(_) => WasmMnemonic::LocalSet,
            Self::LocalTee(_) => WasmMnemonic::LocalTee,
            Self::Loop(_) => WasmMnemonic::Loop,
            Self::MemoryAtomicNotify => WasmMnemonic::MemoryAtomicNotify,
            Self::MemoryAtomicWait32 => WasmMnemonic::MemoryAtomicWait32,
            Self::MemoryAtomicWait64 => WasmMnemonic::MemoryAtomicWait64,
            Self::MemoryCopy => WasmMnemonic::MemoryCopy,
            Self::MemoryFill => WasmMnemonic::MemoryFill,
            Self::MemoryGrow(_) => WasmMnemonic::MemoryGrow,
            Self::MemoryInit(_) => WasmMnemonic::MemoryInit,
            Self::MemorySize(_) => WasmMnemonic::MemorySize,
            Self::Nop => WasmMnemonic::Nop,
            Self::RefAsNonNull => WasmMnemonic::RefAsNonNull,
            Self::RefCastRefHt(_) => WasmMnemonic::RefCastRefHt,
            Self::RefCastRefNullHt(_) => WasmMnemonic::RefCastRefNullHt,
            Self::RefEq(_) => WasmMnemonic::RefEq,
            Self::RefFunc(_) => WasmMnemonic::RefFunc,
            Self::RefI31 => WasmMnemonic::RefI31,
            Self::RefIsNull => WasmMnemonic::RefIsNull,
            Self::RefNull(_) => WasmMnemonic::RefNull,
            Self::RefTestRefHt(_) => WasmMnemonic::RefTestRefHt,
            Self::RefTestRefNullHt(_) => WasmMnemonic::RefTestRefNullHt,
            Self::Return => WasmMnemonic::Return,
            Self::ReturnCall => WasmMnemonic::ReturnCall,
            Self::ReturnCallIndirect => WasmMnemonic::ReturnCallIndirect,
            Self::ReturnCallRef => WasmMnemonic::ReturnCallRef,
            Self::Select => WasmMnemonic::Select,
            Self::SelectT(_) => WasmMnemonic::SelectT,
            Self::StructGet(_, _) => WasmMnemonic::StructGet,
            Self::StructGetS(_, _) => WasmMnemonic::StructGetS,
            Self::StructGetU(_, _) => WasmMnemonic::StructGetU,
            Self::StructNew(_) => WasmMnemonic::StructNew,
            Self::StructNewDefault(_) => WasmMnemonic::StructNewDefault,
            Self::StructSet(_, _) => WasmMnemonic::StructSet,
            Self::TableCopy(_, _) => WasmMnemonic::TableCopy,
            Self::TableFill(_) => WasmMnemonic::TableFill,
            Self::TableGet(_) => WasmMnemonic::TableGet,
            Self::TableGrow(_) => WasmMnemonic::TableGrow,
            Self::TableInit(_, _) => WasmMnemonic::TableInit,
            Self::TableSet(_) => WasmMnemonic::TableSet,
            Self::TableSize(_) => WasmMnemonic::TableSize,
            Self::Unreachable => WasmMnemonic::Unreachable,
            Self::V128And => WasmMnemonic::V128And,
            Self::V128Andnot => WasmMnemonic::V128Andnot,
            Self::V128AnyTrue => WasmMnemonic::V128AnyTrue,
            Self::V128Bitselect => WasmMnemonic::V128Bitselect,
            Self::V128Const => WasmMnemonic::V128Const,
            Self::V128Load => WasmMnemonic::V128Load,
            Self::V128Load16Lane => WasmMnemonic::V128Load16Lane,
            Self::V128Load16Splat => WasmMnemonic::V128Load16Splat,
            Self::V128Load16x4S => WasmMnemonic::V128Load16x4S,
            Self::V128Load16x4U => WasmMnemonic::V128Load16x4U,
            Self::V128Load32Lane => WasmMnemonic::V128Load32Lane,
            Self::V128Load32Splat => WasmMnemonic::V128Load32Splat,
            Self::V128Load32Zero => WasmMnemonic::V128Load32Zero,
            Self::V128Load32x2S => WasmMnemonic::V128Load32x2S,
            Self::V128Load32x2U => WasmMnemonic::V128Load32x2U,
            Self::V128Load64Lane => WasmMnemonic::V128Load64Lane,
            Self::V128Load64Splat => WasmMnemonic::V128Load64Splat,
            Self::V128Load64Zero => WasmMnemonic::V128Load64Zero,
            Self::V128Load8Lane => WasmMnemonic::V128Load8Lane,
            Self::V128Load8Splat => WasmMnemonic::V128Load8Splat,
            Self::V128Load8x8S => WasmMnemonic::V128Load8x8S,
            Self::V128Load8x8U => WasmMnemonic::V128Load8x8U,
            Self::V128Not => WasmMnemonic::V128Not,
            Self::V128Or => WasmMnemonic::V128Or,
            Self::V128Store => WasmMnemonic::V128Store,
            Self::V128Store16Lane => WasmMnemonic::V128Store16Lane,
            Self::V128Store32Lane => WasmMnemonic::V128Store32Lane,
            Self::V128Store64Lane => WasmMnemonic::V128Store64Lane,
            Self::V128Store8Lane => WasmMnemonic::V128Store8Lane,
            Self::V128Xor => WasmMnemonic::V128Xor,
            Self::Zi32x4RelaxedTruncF32x4S => WasmMnemonic::Zi32x4RelaxedTruncF32x4S,
            Self::Zi8x16RelaxedSwizzle => WasmMnemonic::Zi8x16RelaxedSwizzle,

        }
    }

}

impl fmt::Display for WasmBytecode {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            _ => f.write_str(self.as_str())
        }
    }
}

impl fmt::Debug for WasmBytecode {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            _ => f.write_str(self.as_str())
        }
    }
}

#[non_exhaustive]
#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]
pub enum WasmMnemonic {
    /// 0x00 `unreachable` (MVP)
    Unreachable,
    /// 0x01 `nop` (MVP)
    Nop,
    /// 0x02 `block` bt (MVP)
    Block,
    /// 0x03 `loop` bt (MVP)
    Loop,
    /// 0x04 `if` bt (MVP)
    If,
    /// 0x05 `else` (MVP)
    Else,
    /// 0x0B `end` (MVP)
    End,
    /// 0x0C `br` u32 (MVP)
    Br,
    /// 0x0D `br_if` u32 (MVP)
    BrIf,
    /// 0x0E `br_table` br_table (MVP)
    BrTable,
    /// 0x0F `return` (MVP)
    Return,
    /// 0x10 `call` u32 (MVP)
    Call,
    /// 0x11 `call_indirect` u32 u32 (MVP)
    CallIndirect,
    /// 0x12 `return_call` (TailCall)
    ReturnCall,
    /// 0x13 `return_call_indirect` (TailCall)
    ReturnCallIndirect,
    /// 0x14 `call_ref` (TypedFunctionReferences)
    CallRef,
    /// 0x15 `return_call_ref` (TypedFunctionReferences)
    ReturnCallRef,
    /// 0x1A `drop` (MVP)
    Drop,
    /// 0x1B `select` (MVP)
    Select,
    /// 0x1C `select_t` u32 (ReferenceTypes)
    SelectT,
    /// 0x20 `local.get` u32 (MVP)
    LocalGet,
    /// 0x21 `local.set` u32 (MVP)
    LocalSet,
    /// 0x22 `local.tee` u32 (MVP)
    LocalTee,
    /// 0x23 `global.get` u32 (MVP)
    GlobalGet,
    /// 0x24 `global.set` u32 (MVP)
    GlobalSet,
    /// 0x25 `table.get` u32 (ReferenceTypes)
    TableGet,
    /// 0x26 `table.set` u32 (ReferenceTypes)
    TableSet,
    /// 0x28 `i32.load` memarg (MVP)
    I32Load,
    /// 0x29 `i64.load` memarg (MVP)
    I64Load,
    /// 0x2A `f32.load` memarg (MVP)
    F32Load,
    /// 0x2B `f64.load` memarg (MVP)
    F64Load,
    /// 0x2C `i32.load8_s` memarg (MVP)
    I32Load8S,
    /// 0x2D `i32.load8_u` memarg (MVP)
    I32Load8U,
    /// 0x2E `i32.load16_s` memarg (MVP)
    I32Load16S,
    /// 0x2F `i32.load16_u` memarg (MVP)
    I32Load16U,
    /// 0x30 `i64.load8_s` memarg (MVP)
    I64Load8S,
    /// 0x31 `i64.load8_u` memarg (MVP)
    I64Load8U,
    /// 0x32 `i64.load16_s` memarg (MVP)
    I64Load16S,
    /// 0x33 `i64.load16_u` memarg (MVP)
    I64Load16U,
    /// 0x34 `i64.load32_s` memarg (MVP)
    I64Load32S,
    /// 0x35 `i64.load32_u` memarg (MVP)
    I64Load32U,
    /// 0x36 `i32.store` memarg (MVP)
    I32Store,
    /// 0x37 `i64.store` memarg (MVP)
    I64Store,
    /// 0x38 `f32.store` memarg (MVP)
    F32Store,
    /// 0x39 `f64.store` memarg (MVP)
    F64Store,
    /// 0x3A `i32.store8` memarg (MVP)
    I32Store8,
    /// 0x3B `i32.store16` memarg (MVP)
    I32Store16,
    /// 0x3C `i64.store8` memarg (MVP)
    I64Store8,
    /// 0x3D `i64.store16` memarg (MVP)
    I64Store16,
    /// 0x3E `i64.store32` memarg (MVP)
    I64Store32,
    /// 0x3F `memory.size` u32 (MVP)
    MemorySize,
    /// 0x40 `memory.grow` u32 (MVP)
    MemoryGrow,
    /// 0x41 `i32.const` i32 (MVP)
    I32Const,
    /// 0x42 `i64.const` i64 (MVP)
    I64Const,
    /// 0x43 `f32.const` f32 (MVP)
    F32Const,
    /// 0x44 `f64.const` f64 (MVP)
    F64Const,
    /// 0x45 `i32.eqz` (MVP)
    I32Eqz,
    /// 0x46 `i32.eq` (MVP)
    I32Eq,
    /// 0x47 `i32.ne` (MVP)
    I32Ne,
    /// 0x48 `i32.lt_s` (MVP)
    I32LtS,
    /// 0x49 `i32.lt_u` (MVP)
    I32LtU,
    /// 0x4A `i32.gt_s` (MVP)
    I32GtS,
    /// 0x4B `i32.gt_u` (MVP)
    I32GtU,
    /// 0x4C `i32.le_s` (MVP)
    I32LeS,
    /// 0x4D `i32.le_u` (MVP)
    I32LeU,
    /// 0x4E `i32.ge_s` (MVP)
    I32GeS,
    /// 0x4F `i32.ge_u` (MVP)
    I32GeU,
    /// 0x50 `i64.eqz` (MVP)
    I64Eqz,
    /// 0x51 `i64.eq` (MVP)
    I64Eq,
    /// 0x52 `i64.ne` (MVP)
    I64Ne,
    /// 0x53 `i64.lt_s` (MVP)
    I64LtS,
    /// 0x54 `i64.lt_u` (MVP)
    I64LtU,
    /// 0x55 `i64.gt_s` (MVP)
    I64GtS,
    /// 0x56 `i64.gt_u` (MVP)
    I64GtU,
    /// 0x57 `i64.le_s` (MVP)
    I64LeS,
    /// 0x58 `i64.le_u` (MVP)
    I64LeU,
    /// 0x59 `i64.ge_s` (MVP)
    I64GeS,
    /// 0x5A `i64.ge_u` (MVP)
    I64GeU,
    /// 0x5B `f32.eq` (MVP)
    F32Eq,
    /// 0x5C `f32.ne` (MVP)
    F32Ne,
    /// 0x5D `f32.lt` (MVP)
    F32Lt,
    /// 0x5E `f32.gt` (MVP)
    F32Gt,
    /// 0x5F `f32.le` (MVP)
    F32Le,
    /// 0x60 `f32.ge` (MVP)
    F32Ge,
    /// 0x61 `f64.eq` (MVP)
    F64Eq,
    /// 0x62 `f64.ne` (MVP)
    F64Ne,
    /// 0x63 `f64.lt` (MVP)
    F64Lt,
    /// 0x64 `f64.gt` (MVP)
    F64Gt,
    /// 0x65 `f64.le` (MVP)
    F64Le,
    /// 0x66 `f64.ge` (MVP)
    F64Ge,
    /// 0x67 `i32.clz` (MVP)
    I32Clz,
    /// 0x68 `i32.ctz` (MVP)
    I32Ctz,
    /// 0x69 `i32.popcnt` (MVP)
    I32Popcnt,
    /// 0x6A `i32.add` (MVP)
    I32Add,
    /// 0x6B `i32.sub` (MVP)
    I32Sub,
    /// 0x6C `i32.mul` (MVP)
    I32Mul,
    /// 0x6D `i32.div_s` (MVP)
    I32DivS,
    /// 0x6E `i32.div_u` (MVP)
    I32DivU,
    /// 0x6F `i32.rem_s` (MVP)
    I32RemS,
    /// 0x70 `i32.rem_u` (MVP)
    I32RemU,
    /// 0x71 `i32.and` (MVP)
    I32And,
    /// 0x72 `i32.or` (MVP)
    I32Or,
    /// 0x73 `i32.xor` (MVP)
    I32Xor,
    /// 0x74 `i32.shl` (MVP)
    I32Shl,
    /// 0x75 `i32.shr_s` (MVP)
    I32ShrS,
    /// 0x76 `i32.shr_u` (MVP)
    I32ShrU,
    /// 0x77 `i32.rotl` (MVP)
    I32Rotl,
    /// 0x78 `i32.rotr` (MVP)
    I32Rotr,
    /// 0x79 `i64.clz` (MVP)
    I64Clz,
    /// 0x7A `i64.ctz` (MVP)
    I64Ctz,
    /// 0x7B `i64.popcnt` (MVP)
    I64Popcnt,
    /// 0x7C `i64.add` (MVP)
    I64Add,
    /// 0x7D `i64.sub` (MVP)
    I64Sub,
    /// 0x7E `i64.mul` (MVP)
    I64Mul,
    /// 0x7F `i64.div_s` (MVP)
    I64DivS,
    /// 0x80 `i64.div_u` (MVP)
    I64DivU,
    /// 0x81 `i64.rem_s` (MVP)
    I64RemS,
    /// 0x82 `i64.rem_u` (MVP)
    I64RemU,
    /// 0x83 `i64.and` (MVP)
    I64And,
    /// 0x84 `i64.or` (MVP)
    I64Or,
    /// 0x85 `i64.xor` (MVP)
    I64Xor,
    /// 0x86 `i64.shl` (MVP)
    I64Shl,
    /// 0x87 `i64.shr_s` (MVP)
    I64ShrS,
    /// 0x88 `i64.shr_u` (MVP)
    I64ShrU,
    /// 0x89 `i64.rotl` (MVP)
    I64Rotl,
    /// 0x8A `i64.rotr` (MVP)
    I64Rotr,
    /// 0x8B `f32.abs` (MVP)
    F32Abs,
    /// 0x8C `f32.neg` (MVP)
    F32Neg,
    /// 0x8D `f32.ceil` (MVP)
    F32Ceil,
    /// 0x8E `f32.floor` (MVP)
    F32Floor,
    /// 0x8F `f32.trunc` (MVP)
    F32Trunc,
    /// 0x90 `f32.nearest` (MVP)
    F32Nearest,
    /// 0x91 `f32.sqrt` (MVP)
    F32Sqrt,
    /// 0x92 `f32.add` (MVP)
    F32Add,
    /// 0x93 `f32.sub` (MVP)
    F32Sub,
    /// 0x94 `f32.mul` (MVP)
    F32Mul,
    /// 0x95 `f32.div` (MVP)
    F32Div,
    /// 0x96 `f32.min` (MVP)
    F32Min,
    /// 0x97 `f32.max` (MVP)
    F32Max,
    /// 0x98 `f32.copysign` (MVP)
    F32Copysign,
    /// 0x99 `f64.abs` (MVP)
    F64Abs,
    /// 0x9A `f64.neg` (MVP)
    F64Neg,
    /// 0x9B `f64.ceil` (MVP)
    F64Ceil,
    /// 0x9C `f64.floor` (MVP)
    F64Floor,
    /// 0x9D `f64.trunc` (MVP)
    F64Trunc,
    /// 0x9E `f64.nearest` (MVP)
    F64Nearest,
    /// 0x9F `f64.sqrt` (MVP)
    F64Sqrt,
    /// 0xA0 `f64.add` (MVP)
    F64Add,
    /// 0xA1 `f64.sub` (MVP)
    F64Sub,
    /// 0xA2 `f64.mul` (MVP)
    F64Mul,
    /// 0xA3 `f64.div` (MVP)
    F64Div,
    /// 0xA4 `f64.min` (MVP)
    F64Min,
    /// 0xA5 `f64.max` (MVP)
    F64Max,
    /// 0xA6 `f64.copysign` (MVP)
    F64Copysign,
    /// 0xA7 `i32.wrap_i64` (MVP)
    I32WrapI64,
    /// 0xA8 `i32.trunc_f32_s` (MVP)
    I32TruncF32S,
    /// 0xA9 `i32.trunc_f32_u` (MVP)
    I32TruncF32U,
    /// 0xAA `i32.trunc_f64_s` (MVP)
    I32TruncF64S,
    /// 0xAB `i32.trunc_f64_u` (MVP)
    I32TruncF64U,
    /// 0xAC `i64.extend_i32_s` (MVP)
    I64ExtendI32S,
    /// 0xAD `i64.extend_i32_u` (MVP)
    I64ExtendI32U,
    /// 0xAE `i64.trunc_f32_s` (MVP)
    I64TruncF32S,
    /// 0xAF `i64.trunc_f32_u` (MVP)
    I64TruncF32U,
    /// 0xB0 `i64.trunc_f64_s` (MVP)
    I64TruncF64S,
    /// 0xB1 `i64.trunc_f64_u` (MVP)
    I64TruncF64U,
    /// 0xB2 `f32.convert_i32_s` (MVP)
    F32ConvertI32S,
    /// 0xB3 `f32.convert_i32_u` (MVP)
    F32ConvertI32U,
    /// 0xB4 `f32.convert_i64_s` (MVP)
    F32ConvertI64S,
    /// 0xB5 `f32.convert_i64_u` (MVP)
    F32ConvertI64U,
    /// 0xB6 `f32.demote_f64` (MVP)
    F32DemoteF64,
    /// 0xB7 `f64.convert_i32_s` (MVP)
    F64ConvertI32S,
    /// 0xB8 `f64.convert_i32_u` (MVP)
    F64ConvertI32U,
    /// 0xB9 `f64.convert_i64_s` (MVP)
    F64ConvertI64S,
    /// 0xBA `f64.convert_i64_u` (MVP)
    F64ConvertI64U,
    /// 0xBB `f64.promote_f32` (MVP)
    F64PromoteF32,
    /// 0xBC `i32.reinterpret_f32` (MVP)
    I32ReinterpretF32,
    /// 0xBD `i64.reinterpret_f64` (MVP)
    I64ReinterpretF64,
    /// 0xBE `f32.reinterpret_i32` (MVP)
    F32ReinterpretI32,
    /// 0xBF `f64.reinterpret_i64` (MVP)
    F64ReinterpretI64,
    /// 0xC0 `i32.extend8_s` (SignExtension)
    I32Extend8S,
    /// 0xC1 `i32.extend16_s` (SignExtension)
    I32Extend16S,
    /// 0xC2 `i64.extend8_s` (SignExtension)
    I64Extend8S,
    /// 0xC3 `i64.extend16_s` (SignExtension)
    I64Extend16S,
    /// 0xC4 `i64.extend32_s` (SignExtension)
    I64Extend32S,
    /// 0xD0 `ref.null` u32 (ReferenceTypes)
    RefNull,
    /// 0xD1 `ref.is_null` (ReferenceTypes)
    RefIsNull,
    /// 0xD2 `ref.func` u32 (ReferenceTypes)
    RefFunc,
    /// 0xD3 `ref.as_non_null` (TypedFunctionReferences)
    RefAsNonNull,
    /// 0xD4 `br_on_null` (TypedFunctionReferences)
    BrOnNull,
    /// 0xD5 `ref.eq` u32 (TypedFunctionReferences)
    RefEq,
    /// 0xD6 `br_on_non_null` u32 (TypedFunctionReferences)
    BrOnNonNull,
    /// 0xFB 0x00 `struct.new` u32 (Gc)
    StructNew,
    /// 0xFB 0x01 `struct.new_default` u32 (Gc)
    StructNewDefault,
    /// 0xFB 0x02 `struct.get` u32 u32 (Gc)
    StructGet,
    /// 0xFB 0x03 `struct.get_s` u32 u32 (Gc)
    StructGetS,
    /// 0xFB 0x04 `struct.get_u` u32 u32 (Gc)
    StructGetU,
    /// 0xFB 0x05 `struct.set` u32 u32 (Gc)
    StructSet,
    /// 0xFB 0x06 `array.new` u32 (Gc)
    ArrayNew,
    /// 0xFB 0x07 `array.new_default` u32 (Gc)
    ArrayNewDefault,
    /// 0xFB 0x08 `array.new_fixed` u32 u32 (Gc)
    ArrayNewFixed,
    /// 0xFB 0x09 `array.new_data` u32 u32 (Gc)
    ArrayNewData,
    /// 0xFB 0x0A `array.new_elem` u32 u32 (Gc)
    ArrayNewElem,
    /// 0xFB 0x0B `array.get` u32 (Gc)
    ArrayGet,
    /// 0xFB 0x0C `array.get_s` u32 (Gc)
    ArrayGetS,
    /// 0xFB 0x0D `array.get_u` u32 (Gc)
    ArrayGetU,
    /// 0xFB 0x0E `array.set` u32 (Gc)
    ArraySet,
    /// 0xFB 0x0F `array.len` (Gc)
    ArrayLen,
    /// 0xFB 0x10 `array.fill` u32 (Gc)
    ArrayFill,
    /// 0xFB 0x11 `array.copy` u32 u32 (Gc)
    ArrayCopy,
    /// 0xFB 0x12 `array.init_data` u32 u32 (Gc)
    ArrayInitData,
    /// 0xFB 0x13 `array.init_elem` u32 u32 (Gc)
    ArrayInitElem,
    /// 0xFB 0x14 `ref.test (ref ht)` u32 (Gc)
    RefTestRefHt,
    /// 0xFB 0x15 `ref.test (ref null ht)` u32 (Gc)
    RefTestRefNullHt,
    /// 0xFB 0x16 `ref.cast (ref ht)` u32 (Gc)
    RefCastRefHt,
    /// 0xFB 0x17 `ref.cast (ref null ht)` u32 (Gc)
    RefCastRefNullHt,
    /// 0xFB 0x18 `br_on_cast` u8 u32 (Gc)
    BrOnCast,
    /// 0xFB 0x19 `br_on_cast_fail` u8 u32 (Gc)
    BrOnCastFail,
    /// 0xFB 0x1A `any.convert_extern` (Gc)
    AnyConvertExtern,
    /// 0xFB 0x1B `extern.convert_any` (Gc)
    ExternConvertAny,
    /// 0xFB 0x1C `ref.i31` (Gc)
    RefI31,
    /// 0xFB 0x1D `i31.get_s` (Gc)
    I31GetS,
    /// 0xFB 0x1E `i31.get_u` (Gc)
    I31GetU,
    /// 0xFC 0x00 `i32.trunc_sat_f32_s` (NonTrappingFloatToIntConversion)
    I32TruncSatF32S,
    /// 0xFC 0x01 `i32.trunc_sat_f32_u` (NonTrappingFloatToIntConversion)
    I32TruncSatF32U,
    /// 0xFC 0x02 `i32.trunc_sat_f64_s` (NonTrappingFloatToIntConversion)
    I32TruncSatF64S,
    /// 0xFC 0x03 `i32.trunc_sat_f64_u` (NonTrappingFloatToIntConversion)
    I32TruncSatF64U,
    /// 0xFC 0x04 `i64.trunc_sat_f32_s` (NonTrappingFloatToIntConversion)
    I64TruncSatF32S,
    /// 0xFC 0x05 `i64.trunc_sat_f32_u` (NonTrappingFloatToIntConversion)
    I64TruncSatF32U,
    /// 0xFC 0x06 `i64.trunc_sat_f64_s` (NonTrappingFloatToIntConversion)
    I64TruncSatF64S,
    /// 0xFC 0x07 `i64.trunc_sat_f64_u` (NonTrappingFloatToIntConversion)
    I64TruncSatF64U,
    /// 0xFC 0x08 `memory.init` u32 (BulkMemoryOperations)
    MemoryInit,
    /// 0xFC 0x09 `data.drop` u32 (BulkMemoryOperations)
    DataDrop,
    /// 0xFC 0x0A `memory.copy` (BulkMemoryOperations)
    MemoryCopy,
    /// 0xFC 0x0B `memory.fill` (BulkMemoryOperations)
    MemoryFill,
    /// 0xFC 0x0C `table.init` u32 u32 (BulkMemoryOperations)
    TableInit,
    /// 0xFC 0x0D `elem.drop` u32 (BulkMemoryOperations)
    ElemDrop,
    /// 0xFC 0x0E `table.copy` u32 u32 (BulkMemoryOperations)
    TableCopy,
    /// 0xFC 0x0F `table.grow` u32 (ReferenceTypes)
    TableGrow,
    /// 0xFC 0x10 `table.size` u32 (ReferenceTypes)
    TableSize,
    /// 0xFC 0x11 `table.fill` u32 (ReferenceTypes)
    TableFill,
    /// 0xFD 0x00 `v128.load` (Simd)
    V128Load,
    /// 0xFD 0x01 `v128.load8x8_s` (Simd)
    V128Load8x8S,
    /// 0xFD 0x02 `v128.load8x8_u` (Simd)
    V128Load8x8U,
    /// 0xFD 0x03 `v128.load16x4_s` (Simd)
    V128Load16x4S,
    /// 0xFD 0x04 `v128.load16x4_u` (Simd)
    V128Load16x4U,
    /// 0xFD 0x05 `v128.load32x2_s` (Simd)
    V128Load32x2S,
    /// 0xFD 0x06 `v128.load32x2_u` (Simd)
    V128Load32x2U,
    /// 0xFD 0x07 `v128.load8_splat` (Simd)
    V128Load8Splat,
    /// 0xFD 0x08 `v128.load16_splat` (Simd)
    V128Load16Splat,
    /// 0xFD 0x09 `v128.load32_splat` (Simd)
    V128Load32Splat,
    /// 0xFD 0x0A `v128.load64_splat` (Simd)
    V128Load64Splat,
    /// 0xFD 0x0B `v128.store` (Simd)
    V128Store,
    /// 0xFD 0x0C `v128.const` (Simd)
    V128Const,
    /// 0xFD 0x0D `i8x16.shuffle` (Simd)
    I8x16Shuffle,
    /// 0xFD 0x0E `i8x16.swizzle` (Simd)
    I8x16Swizzle,
    /// 0xFD 0x0F `i8x16.splat` (Simd)
    I8x16Splat,
    /// 0xFD 0x10 `i16x8.splat` (Simd)
    I16x8Splat,
    /// 0xFD 0x11 `i32x4.splat` (Simd)
    I32x4Splat,
    /// 0xFD 0x12 `i64x2.splat` (Simd)
    I64x2Splat,
    /// 0xFD 0x13 `f32x4.splat` (Simd)
    F32x4Splat,
    /// 0xFD 0x14 `f64x2.splat` (Simd)
    F64x2Splat,
    /// 0xFD 0x15 `i8x16.extract_lane_s` (Simd)
    I8x16ExtractLaneS,
    /// 0xFD 0x16 `i8x16.extract_lane_u` (Simd)
    I8x16ExtractLaneU,
    /// 0xFD 0x17 `i8x16.replace_lane` (Simd)
    I8x16ReplaceLane,
    /// 0xFD 0x18 `i16x8.extract_lane_s` (Simd)
    I16x8ExtractLaneS,
    /// 0xFD 0x19 `i16x8.extract_lane_u` (Simd)
    I16x8ExtractLaneU,
    /// 0xFD 0x1A `i16x8.replace_lane` (Simd)
    I16x8ReplaceLane,
    /// 0xFD 0x1B `i32x4.extract_lane` (Simd)
    I32x4ExtractLane,
    /// 0xFD 0x1C `i32x4.replace_lane` (Simd)
    I32x4ReplaceLane,
    /// 0xFD 0x1D `i64x2.extract_lane` (Simd)
    I64x2ExtractLane,
    /// 0xFD 0x1E `i64x2.replace_lane` (Simd)
    I64x2ReplaceLane,
    /// 0xFD 0x1F `f32x4.extract_lane` (Simd)
    F32x4ExtractLane,
    /// 0xFD 0x20 `f32x4.replace_lane` (Simd)
    F32x4ReplaceLane,
    /// 0xFD 0x21 `f64x2.extract_lane` (Simd)
    F64x2ExtractLane,
    /// 0xFD 0x22 `f64x2.replace_lane` (Simd)
    F64x2ReplaceLane,
    /// 0xFD 0x23 `i8x16.eq` (Simd)
    I8x16Eq,
    /// 0xFD 0x24 `i8x16.ne` (Simd)
    I8x16Ne,
    /// 0xFD 0x25 `i8x16.lt_s` (Simd)
    I8x16LtS,
    /// 0xFD 0x26 `i8x16.lt_u` (Simd)
    I8x16LtU,
    /// 0xFD 0x27 `i8x16.gt_s` (Simd)
    I8x16GtS,
    /// 0xFD 0x28 `i8x16.gt_u` (Simd)
    I8x16GtU,
    /// 0xFD 0x29 `i8x16.le_s` (Simd)
    I8x16LeS,
    /// 0xFD 0x2A `i8x16.le_u` (Simd)
    I8x16LeU,
    /// 0xFD 0x2B `i8x16.ge_s` (Simd)
    I8x16GeS,
    /// 0xFD 0x2C `i8x16.ge_u` (Simd)
    I8x16GeU,
    /// 0xFD 0x2D `i16x8.eq` (Simd)
    I16x8Eq,
    /// 0xFD 0x2E `i16x8.ne` (Simd)
    I16x8Ne,
    /// 0xFD 0x2F `i16x8.lt_s` (Simd)
    I16x8LtS,
    /// 0xFD 0x30 `i16x8.lt_u` (Simd)
    I16x8LtU,
    /// 0xFD 0x31 `i16x8.gt_s` (Simd)
    I16x8GtS,
    /// 0xFD 0x32 `i16x8.gt_u` (Simd)
    I16x8GtU,
    /// 0xFD 0x33 `i16x8.le_s` (Simd)
    I16x8LeS,
    /// 0xFD 0x34 `i16x8.le_u` (Simd)
    I16x8LeU,
    /// 0xFD 0x35 `i16x8.ge_s` (Simd)
    I16x8GeS,
    /// 0xFD 0x36 `i16x8.ge_u` (Simd)
    I16x8GeU,
    /// 0xFD 0x37 `i32x4.eq` (Simd)
    I32x4Eq,
    /// 0xFD 0x38 `i32x4.ne` (Simd)
    I32x4Ne,
    /// 0xFD 0x39 `i32x4.lt_s` (Simd)
    I32x4LtS,
    /// 0xFD 0x3A `i32x4.lt_u` (Simd)
    I32x4LtU,
    /// 0xFD 0x3B `i32x4.gt_s` (Simd)
    I32x4GtS,
    /// 0xFD 0x3C `i32x4.gt_u` (Simd)
    I32x4GtU,
    /// 0xFD 0x3D `i32x4.le_s` (Simd)
    I32x4LeS,
    /// 0xFD 0x3E `i32x4.le_u` (Simd)
    I32x4LeU,
    /// 0xFD 0x3F `i32x4.ge_s` (Simd)
    I32x4GeS,
    /// 0xFD 0x40 `i32x4.ge_u` (Simd)
    I32x4GeU,
    /// 0xFD 0x41 `f32x4.eq` (Simd)
    F32x4Eq,
    /// 0xFD 0x42 `f32x4.ne` (Simd)
    F32x4Ne,
    /// 0xFD 0x43 `f32x4.lt` (Simd)
    F32x4Lt,
    /// 0xFD 0x44 `f32x4.gt` (Simd)
    F32x4Gt,
    /// 0xFD 0x45 `f32x4.le` (Simd)
    F32x4Le,
    /// 0xFD 0x46 `f32x4.ge` (Simd)
    F32x4Ge,
    /// 0xFD 0x47 `f64x2.eq` (Simd)
    F64x2Eq,
    /// 0xFD 0x48 `f64x2.ne` (Simd)
    F64x2Ne,
    /// 0xFD 0x49 `f64x2.lt` (Simd)
    F64x2Lt,
    /// 0xFD 0x4A `f64x2.gt` (Simd)
    F64x2Gt,
    /// 0xFD 0x4B `f64x2.le` (Simd)
    F64x2Le,
    /// 0xFD 0x4C `f64x2.ge` (Simd)
    F64x2Ge,
    /// 0xFD 0x4D `v128.not` (Simd)
    V128Not,
    /// 0xFD 0x4E `v128.and` (Simd)
    V128And,
    /// 0xFD 0x4F `v128.andnot` (Simd)
    V128Andnot,
    /// 0xFD 0x50 `v128.or` (Simd)
    V128Or,
    /// 0xFD 0x51 `v128.xor` (Simd)
    V128Xor,
    /// 0xFD 0x52 `v128.bitselect` (Simd)
    V128Bitselect,
    /// 0xFD 0x53 `v128.any_true` (Simd)
    V128AnyTrue,
    /// 0xFD 0x54 `v128.load8_lane` (Simd)
    V128Load8Lane,
    /// 0xFD 0x55 `v128.load16_lane` (Simd)
    V128Load16Lane,
    /// 0xFD 0x56 `v128.load32_lane` (Simd)
    V128Load32Lane,
    /// 0xFD 0x57 `v128.load64_lane` (Simd)
    V128Load64Lane,
    /// 0xFD 0x58 `v128.store8_lane` (Simd)
    V128Store8Lane,
    /// 0xFD 0x59 `v128.store16_lane` (Simd)
    V128Store16Lane,
    /// 0xFD 0x5A `v128.store32_lane` (Simd)
    V128Store32Lane,
    /// 0xFD 0x5B `v128.store64_lane` (Simd)
    V128Store64Lane,
    /// 0xFD 0x5C `v128.load32_zero` (Simd)
    V128Load32Zero,
    /// 0xFD 0x5D `v128.load64_zero` (Simd)
    V128Load64Zero,
    /// 0xFD 0x5E `f32x4.demote_f64x2_zero` (Simd)
    F32x4DemoteF64x2Zero,
    /// 0xFD 0x5F `f64x2.promote_low_f32x4` (Simd)
    F64x2PromoteLowF32x4,
    /// 0xFD 0x60 `i8x16.abs` (Simd)
    I8x16Abs,
    /// 0xFD 0x61 `i8x16.neg` (Simd)
    I8x16Neg,
    /// 0xFD 0x62 `i8x16.popcnt` (Simd)
    I8x16Popcnt,
    /// 0xFD 0x63 `i8x16.all_true` (Simd)
    I8x16AllTrue,
    /// 0xFD 0x64 `i8x16.bitmask` (Simd)
    I8x16Bitmask,
    /// 0xFD 0x65 `i8x16.narrow_i16x8_s` (Simd)
    I8x16NarrowI16x8S,
    /// 0xFD 0x66 `i8x16.narrow_i16x8_u` (Simd)
    I8x16NarrowI16x8U,
    /// 0xFD 0x67 `f32x4.ceil` (Simd)
    F32x4Ceil,
    /// 0xFD 0x68 `f32x4.floor` (Simd)
    F32x4Floor,
    /// 0xFD 0x69 `f32x4.trunc` (Simd)
    F32x4Trunc,
    /// 0xFD 0x6A `f32x4.nearest` (Simd)
    F32x4Nearest,
    /// 0xFD 0x6B `i8x16.shl` (Simd)
    I8x16Shl,
    /// 0xFD 0x6C `i8x16.shr_s` (Simd)
    I8x16ShrS,
    /// 0xFD 0x6D `i8x16.shr_u` (Simd)
    I8x16ShrU,
    /// 0xFD 0x6E `i8x16.add` (Simd)
    I8x16Add,
    /// 0xFD 0x6F `i8x16.add_sat_s` (Simd)
    I8x16AddSatS,
    /// 0xFD 0x70 `i8x16.add_sat_u` (Simd)
    I8x16AddSatU,
    /// 0xFD 0x71 `i8x16.sub` (Simd)
    I8x16Sub,
    /// 0xFD 0x72 `i8x16.sub_sat_s` (Simd)
    I8x16SubSatS,
    /// 0xFD 0x73 `i8x16.sub_sat_u` (Simd)
    I8x16SubSatU,
    /// 0xFD 0x74 `f64x2.ceil` (Simd)
    F64x2Ceil,
    /// 0xFD 0x75 `f64x2.floor` (Simd)
    F64x2Floor,
    /// 0xFD 0x76 `i8x16.min_s` (Simd)
    I8x16MinS,
    /// 0xFD 0x77 `i8x16.min_u` (Simd)
    I8x16MinU,
    /// 0xFD 0x78 `i8x16.max_s` (Simd)
    I8x16MaxS,
    /// 0xFD 0x79 `i8x16.max_u` (Simd)
    I8x16MaxU,
    /// 0xFD 0x7A `f64x2.trunc` (Simd)
    F64x2Trunc,
    /// 0xFD 0x7B `i8x16.avgr_u` (Simd)
    I8x16AvgrU,
    /// 0xFD 0x7C `i16x8.extadd_pairwise_i8x16_s` (Simd)
    I16x8ExtaddPairwiseI8x16S,
    /// 0xFD 0x7D `i16x8.extadd_pairwise_i8x16_u` (Simd)
    I16x8ExtaddPairwiseI8x16U,
    /// 0xFD 0x7E `i32x4.extadd_pairwise_i16x8_s` (Simd)
    I32x4ExtaddPairwiseI16x8S,
    /// 0xFD 0x7F `i32x4.extadd_pairwise_i16x8_u` (Simd)
    I32x4ExtaddPairwiseI16x8U,
    /// 0xFD 0x80 `i16x8.abs` (Simd)
    I16x8Abs,
    /// 0xFD 0x81 `i16x8.neg` (Simd)
    I16x8Neg,
    /// 0xFD 0x82 `i16x8.q15mulr_sat_s` (Simd)
    I16x8Q15mulrSatS,
    /// 0xFD 0x83 `i16x8.all_true` (Simd)
    I16x8AllTrue,
    /// 0xFD 0x84 `i16x8.bitmask` (Simd)
    I16x8Bitmask,
    /// 0xFD 0x85 `i16x8.narrow_i32x4_s` (Simd)
    I16x8NarrowI32x4S,
    /// 0xFD 0x86 `i16x8.narrow_i32x4_u` (Simd)
    I16x8NarrowI32x4U,
    /// 0xFD 0x87 `i16x8.extend_low_i8x16_s` (Simd)
    I16x8ExtendLowI8x16S,
    /// 0xFD 0x88 `i16x8.extend_high_i8x16_s` (Simd)
    I16x8ExtendHighI8x16S,
    /// 0xFD 0x89 `i16x8.extend_low_i8x16_u` (Simd)
    I16x8ExtendLowI8x16U,
    /// 0xFD 0x8A `i16x8.extend_high_i8x16_u` (Simd)
    I16x8ExtendHighI8x16U,
    /// 0xFD 0x8B `i16x8.shl` (Simd)
    I16x8Shl,
    /// 0xFD 0x8C `i16x8.shr_s` (Simd)
    I16x8ShrS,
    /// 0xFD 0x8D `i16x8.shr_u` (Simd)
    I16x8ShrU,
    /// 0xFD 0x8E `i16x8.add` (Simd)
    I16x8Add,
    /// 0xFD 0x8F `i16x8.add_sat_s` (Simd)
    I16x8AddSatS,
    /// 0xFD 0x90 `i16x8.add_sat_u` (Simd)
    I16x8AddSatU,
    /// 0xFD 0x91 `i16x8.sub` (Simd)
    I16x8Sub,
    /// 0xFD 0x92 `i16x8.sub_sat_s` (Simd)
    I16x8SubSatS,
    /// 0xFD 0x93 `i16x8.sub_sat_u` (Simd)
    I16x8SubSatU,
    /// 0xFD 0x94 `f64x2.nearest` (Simd)
    F64x2Nearest,
    /// 0xFD 0x95 `i16x8.mul` (Simd)
    I16x8Mul,
    /// 0xFD 0x96 `i16x8.min_s` (Simd)
    I16x8MinS,
    /// 0xFD 0x97 `i16x8.min_u` (Simd)
    I16x8MinU,
    /// 0xFD 0x98 `i16x8.max_s` (Simd)
    I16x8MaxS,
    /// 0xFD 0x99 `i16x8.max_u` (Simd)
    I16x8MaxU,
    /// 0xFD 0x9B `i16x8.avgr_u` (Simd)
    I16x8AvgrU,
    /// 0xFD 0x9C `i16x8.extmul_low_i8x16_s` (Simd)
    I16x8ExtmulLowI8x16S,
    /// 0xFD 0x9D `i16x8.extmul_high_i8x16_s` (Simd)
    I16x8ExtmulHighI8x16S,
    /// 0xFD 0x9E `i16x8.extmul_low_i8x16_u` (Simd)
    I16x8ExtmulLowI8x16U,
    /// 0xFD 0x9F `i16x8.extmul_high_i8x16_u` (Simd)
    I16x8ExtmulHighI8x16U,
    /// 0xFD 0xA0 `i32x4.abs` (Simd)
    I32x4Abs,
    /// 0xFD 0xA1 `i32x4.neg` (Simd)
    I32x4Neg,
    /// 0xFD 0xA3 `i32x4.all_true` (Simd)
    I32x4AllTrue,
    /// 0xFD 0xA4 `i32x4.bitmask` (Simd)
    I32x4Bitmask,
    /// 0xFD 0xA7 `i32x4.extend_low_i16x8_s` (Simd)
    I32x4ExtendLowI16x8S,
    /// 0xFD 0xA8 `i32x4.extend_high_i16x8_s` (Simd)
    I32x4ExtendHighI16x8S,
    /// 0xFD 0xA9 `i32x4.extend_low_i16x8_u` (Simd)
    I32x4ExtendLowI16x8U,
    /// 0xFD 0xAA `i32x4.extend_high_i16x8_u` (Simd)
    I32x4ExtendHighI16x8U,
    /// 0xFD 0xAB `i32x4.shl` (Simd)
    I32x4Shl,
    /// 0xFD 0xAC `i32x4.shr_s` (Simd)
    I32x4ShrS,
    /// 0xFD 0xAD `i32x4.shr_u` (Simd)
    I32x4ShrU,
    /// 0xFD 0xAE `i32x4.add` (Simd)
    I32x4Add,
    /// 0xFD 0xB1 `i32x4.sub` (Simd)
    I32x4Sub,
    /// 0xFD 0xB5 `i32x4.mul` (Simd)
    I32x4Mul,
    /// 0xFD 0xB6 `i32x4.min_s` (Simd)
    I32x4MinS,
    /// 0xFD 0xB7 `i32x4.min_u` (Simd)
    I32x4MinU,
    /// 0xFD 0xB8 `i32x4.max_s` (Simd)
    I32x4MaxS,
    /// 0xFD 0xB9 `i32x4.max_u` (Simd)
    I32x4MaxU,
    /// 0xFD 0xBA `i32x4.dot_i16x8_s` (Simd)
    I32x4DotI16x8S,
    /// 0xFD 0xBC `i32x4.extmul_low_i16x8_s` (Simd)
    I32x4ExtmulLowI16x8S,
    /// 0xFD 0xBD `i32x4.extmul_high_i16x8_s` (Simd)
    I32x4ExtmulHighI16x8S,
    /// 0xFD 0xBE `i32x4.extmul_low_i16x8_u` (Simd)
    I32x4ExtmulLowI16x8U,
    /// 0xFD 0xBF `i32x4.extmul_high_i16x8_u` (Simd)
    I32x4ExtmulHighI16x8U,
    /// 0xFD 0xC0 `i64x2.abs` (Simd)
    I64x2Abs,
    /// 0xFD 0xC1 `i64x2.neg` (Simd)
    I64x2Neg,
    /// 0xFD 0xC3 `i64x2.all_true` (Simd)
    I64x2AllTrue,
    /// 0xFD 0xC4 `i64x2.bitmask` (Simd)
    I64x2Bitmask,
    /// 0xFD 0xC7 `i64x2.extend_low_i32x4_s` (Simd)
    I64x2ExtendLowI32x4S,
    /// 0xFD 0xC8 `i64x2.extend_high_i32x4_s` (Simd)
    I64x2ExtendHighI32x4S,
    /// 0xFD 0xC9 `i64x2.extend_low_i32x4_u` (Simd)
    I64x2ExtendLowI32x4U,
    /// 0xFD 0xCA `i64x2.extend_high_i32x4_u` (Simd)
    I64x2ExtendHighI32x4U,
    /// 0xFD 0xCB `i64x2.shl` (Simd)
    I64x2Shl,
    /// 0xFD 0xCC `i64x2.shr_s` (Simd)
    I64x2ShrS,
    /// 0xFD 0xCD `i64x2.shr_u` (Simd)
    I64x2ShrU,
    /// 0xFD 0xCE `i64x2.add` (Simd)
    I64x2Add,
    /// 0xFD 0xD1 `i64x2.sub` (Simd)
    I64x2Sub,
    /// 0xFD 0xD5 `i64x2.mul` (Simd)
    I64x2Mul,
    /// 0xFD 0xD6 `i64x2.eq` (Simd)
    I64x2Eq,
    /// 0xFD 0xD7 `i64x2.ne` (Simd)
    I64x2Ne,
    /// 0xFD 0xD8 `i64x2.lt_s` (Simd)
    I64x2LtS,
    /// 0xFD 0xD9 `i64x2.gt_s` (Simd)
    I64x2GtS,
    /// 0xFD 0xDA `i64x2.le_s` (Simd)
    I64x2LeS,
    /// 0xFD 0xDB `i64x2.ge_s` (Simd)
    I64x2GeS,
    /// 0xFD 0xDC `i64x2.extmul_low_i32x4_s` (Simd)
    I64x2ExtmulLowI32x4S,
    /// 0xFD 0xDD `i64x2.extmul_high_i32x4_s` (Simd)
    I64x2ExtmulHighI32x4S,
    /// 0xFD 0xDE `i64x2.extmul_low_i32x4_u` (Simd)
    I64x2ExtmulLowI32x4U,
    /// 0xFD 0xDF `i64x2.extmul_high_i32x4_u` (Simd)
    I64x2ExtmulHighI32x4U,
    /// 0xFD 0xE0 `f32x4.abs` (Simd)
    F32x4Abs,
    /// 0xFD 0xE1 `f32x4.neg` (Simd)
    F32x4Neg,
    /// 0xFD 0xE3 `f32x4.sqrt` (Simd)
    F32x4Sqrt,
    /// 0xFD 0xE4 `f32x4.add` (Simd)
    F32x4Add,
    /// 0xFD 0xE5 `f32x4.sub` (Simd)
    F32x4Sub,
    /// 0xFD 0xE6 `f32x4.mul` (Simd)
    F32x4Mul,
    /// 0xFD 0xE7 `f32x4.div` (Simd)
    F32x4Div,
    /// 0xFD 0xE8 `f32x4.min` (Simd)
    F32x4Min,
    /// 0xFD 0xE9 `f32x4.max` (Simd)
    F32x4Max,
    /// 0xFD 0xEA `f32x4.pmin` (Simd)
    F32x4Pmin,
    /// 0xFD 0xEB `f32x4.pmax` (Simd)
    F32x4Pmax,
    /// 0xFD 0xEC `f64x2.abs` (Simd)
    F64x2Abs,
    /// 0xFD 0xED `f64x2.neg` (Simd)
    F64x2Neg,
    /// 0xFD 0xEF `f64x2.sqrt` (Simd)
    F64x2Sqrt,
    /// 0xFD 0xF0 `f64x2.add` (Simd)
    F64x2Add,
    /// 0xFD 0xF1 `f64x2.sub` (Simd)
    F64x2Sub,
    /// 0xFD 0xF2 `f64x2.mul` (Simd)
    F64x2Mul,
    /// 0xFD 0xF3 `f64x2.div` (Simd)
    F64x2Div,
    /// 0xFD 0xF4 `f64x2.min` (Simd)
    F64x2Min,
    /// 0xFD 0xF5 `f64x2.max` (Simd)
    F64x2Max,
    /// 0xFD 0xF6 `f64x2.pmin` (Simd)
    F64x2Pmin,
    /// 0xFD 0xF7 `f64x2.pmax` (Simd)
    F64x2Pmax,
    /// 0xFD 0xF8 `i32x4.trunc_sat_f32x4_s` (Simd)
    I32x4TruncSatF32x4S,
    /// 0xFD 0xF9 `i32x4.trunc_sat_f32x4_u` (Simd)
    I32x4TruncSatF32x4U,
    /// 0xFD 0xFA `f32x4.convert_i32x4_s` (Simd)
    F32x4ConvertI32x4S,
    /// 0xFD 0xFB `f32x4.convert_i32x4_u` (Simd)
    F32x4ConvertI32x4U,
    /// 0xFD 0xFC `i32x4.trunc_sat_f64x2_s_zero` (Simd)
    I32x4TruncSatF64x2SZero,
    /// 0xFD 0xFD `i32x4.trunc_sat_f64x2_u_zero` (Simd)
    I32x4TruncSatF64x2UZero,
    /// 0xFD 0xFE `f64x2.convert_low_i32x4_s` (Simd)
    F64x2ConvertLowI32x4S,
    /// 0xFD 0xFF `f64x2.convert_low_i32x4_u` (Simd)
    F64x2ConvertLowI32x4U,
    /// 0xFD 0x100 `Zi8x16.relaxed_swizzle` (RelaxedSimd)
    Zi8x16RelaxedSwizzle,
    /// 0xFD 0x101 `Zi32x4.relaxed_trunc_f32x4_s` (RelaxedSimd)
    Zi32x4RelaxedTruncF32x4S,
    /// 0xFD 0x102 `i32x4.relaxed_trunc_f32x4_u` (RelaxedSimd)
    I32x4RelaxedTruncF32x4U,
    /// 0xFD 0x103 `i32x4.relaxed_trunc_f64x2_s_zero` (RelaxedSimd)
    I32x4RelaxedTruncF64x2SZero,
    /// 0xFD 0x104 `i32x4.relaxed_trunc_f64x2_u_zero` (RelaxedSimd)
    I32x4RelaxedTruncF64x2UZero,
    /// 0xFD 0x105 `f32x4.relaxed_madd` (RelaxedSimd)
    F32x4RelaxedMadd,
    /// 0xFD 0x106 `f32x4.relaxed_nmadd` (RelaxedSimd)
    F32x4RelaxedNmadd,
    /// 0xFD 0x107 `f64x2.relaxed_madd` (RelaxedSimd)
    F64x2RelaxedMadd,
    /// 0xFD 0x108 `f64x2.relaxed_nmadd` (RelaxedSimd)
    F64x2RelaxedNmadd,
    /// 0xFD 0x109 `i8x16.relaxed_laneselect` (RelaxedSimd)
    I8x16RelaxedLaneselect,
    /// 0xFD 0x10A `i16x8.relaxed_laneselect` (RelaxedSimd)
    I16x8RelaxedLaneselect,
    /// 0xFD 0x10B `i32x4.relaxed_laneselect` (RelaxedSimd)
    I32x4RelaxedLaneselect,
    /// 0xFD 0x10C `i64x2.relaxed_laneselect` (RelaxedSimd)
    I64x2RelaxedLaneselect,
    /// 0xFD 0x10D `f32x4.relaxed_min` (RelaxedSimd)
    F32x4RelaxedMin,
    /// 0xFD 0x10E `f32x4.relaxed_max` (RelaxedSimd)
    F32x4RelaxedMax,
    /// 0xFD 0x10F `f64x2.relaxed_min` (RelaxedSimd)
    F64x2RelaxedMin,
    /// 0xFD 0x110 `f64x2.relaxed_max` (RelaxedSimd)
    F64x2RelaxedMax,
    /// 0xFD 0x111 `i16x8.relaxed_q15mulr_s` (RelaxedSimd)
    I16x8RelaxedQ15mulrS,
    /// 0xFD 0x112 `i16x8.relaxed_dot_i8x16_i7x16_s` (RelaxedSimd)
    I16x8RelaxedDotI8x16I7x16S,
    /// 0xFD 0x113 `i32x4.relaxed_dot_i8x16_i7x16_add_s` (RelaxedSimd)
    I32x4RelaxedDotI8x16I7x16AddS,
    /// 0xFD 0x114 `f32x4.relaxed_dot_bf16x8_add_f32x4` (RelaxedSimd)
    F32x4RelaxedDotBf16x8AddF32x4,
    /// 0xFE 0x00 `memory.atomic.notify` (Threads)
    MemoryAtomicNotify,
    /// 0xFE 0x01 `memory.atomic.wait32` (Threads)
    MemoryAtomicWait32,
    /// 0xFE 0x02 `memory.atomic.wait64` (Threads)
    MemoryAtomicWait64,
    /// 0xFE 0x03 `atomic.fence` (Threads)
    AtomicFence,
    /// 0xFE 0x10 `i32.atomic.load` (Threads)
    I32AtomicLoad,
    /// 0xFE 0x11 `i64.atomic.load` (Threads)
    I64AtomicLoad,
    /// 0xFE 0x12 `i32.atomic.load8_u` (Threads)
    I32AtomicLoad8U,
    /// 0xFE 0x13 `i32.atomic.load16_u` (Threads)
    I32AtomicLoad16U,
    /// 0xFE 0x14 `i64.atomic.load8_u` (Threads)
    I64AtomicLoad8U,
    /// 0xFE 0x15 `i64.atomic.load16_u` (Threads)
    I64AtomicLoad16U,
    /// 0xFE 0x16 `i64.atomic.load32_u` (Threads)
    I64AtomicLoad32U,
    /// 0xFE 0x17 `i32.atomic.store` (Threads)
    I32AtomicStore,
    /// 0xFE 0x18 `i64.atomic.store` (Threads)
    I64AtomicStore,
    /// 0xFE 0x19 `i32.atomic.store8` (Threads)
    I32AtomicStore8,
    /// 0xFE 0x1A `i32.atomic.store16` (Threads)
    I32AtomicStore16,
    /// 0xFE 0x1B `i64.atomic.store8` (Threads)
    I64AtomicStore8,
    /// 0xFE 0x1C `i64.atomic.store16` (Threads)
    I64AtomicStore16,
    /// 0xFE 0x1D `i64.atomic.store32` (Threads)
    I64AtomicStore32,
    /// 0xFE 0x1E `i32.atomic.rmw.add` (Threads)
    I32AtomicRmwAdd,
    /// 0xFE 0x1F `i64.atomic.rmw.add` (Threads)
    I64AtomicRmwAdd,
    /// 0xFE 0x20 `i32.atomic.rmw8.add_u` (Threads)
    I32AtomicRmw8AddU,
    /// 0xFE 0x21 `i32.atomic.rmw16.add_u` (Threads)
    I32AtomicRmw16AddU,
    /// 0xFE 0x22 `i64.atomic.rmw8.add_u` (Threads)
    I64AtomicRmw8AddU,
    /// 0xFE 0x23 `i64.atomic.rmw16.add_u` (Threads)
    I64AtomicRmw16AddU,
    /// 0xFE 0x24 `i64.atomic.rmw32.add_u` (Threads)
    I64AtomicRmw32AddU,
    /// 0xFE 0x25 `i32.atomic.rmw.sub` (Threads)
    I32AtomicRmwSub,
    /// 0xFE 0x26 `i64.atomic.rmw.sub` (Threads)
    I64AtomicRmwSub,
    /// 0xFE 0x27 `i32.atomic.rmw8.sub_u` (Threads)
    I32AtomicRmw8SubU,
    /// 0xFE 0x28 `i32.atomic.rmw16.sub_u` (Threads)
    I32AtomicRmw16SubU,
    /// 0xFE 0x29 `i64.atomic.rmw8.sub_u` (Threads)
    I64AtomicRmw8SubU,
    /// 0xFE 0x2A `i64.atomic.rmw16.sub_u` (Threads)
    I64AtomicRmw16SubU,
    /// 0xFE 0x2B `i64.atomic.rmw32.sub_u` (Threads)
    I64AtomicRmw32SubU,
    /// 0xFE 0x2C `i32.atomic.rmw.and` (Threads)
    I32AtomicRmwAnd,
    /// 0xFE 0x2D `i64.atomic.rmw.and` (Threads)
    I64AtomicRmwAnd,
    /// 0xFE 0x2E `i32.atomic.rmw8.and_u` (Threads)
    I32AtomicRmw8AndU,
    /// 0xFE 0x2F `i32.atomic.rmw16.and_u` (Threads)
    I32AtomicRmw16AndU,
    /// 0xFE 0x30 `i64.atomic.rmw8.and_u` (Threads)
    I64AtomicRmw8AndU,
    /// 0xFE 0x31 `i64.atomic.rmw16.and_u` (Threads)
    I64AtomicRmw16AndU,
    /// 0xFE 0x32 `i64.atomic.rmw32.and_u` (Threads)
    I64AtomicRmw32AndU,
    /// 0xFE 0x33 `i32.atomic.rmw.or` (Threads)
    I32AtomicRmwOr,
    /// 0xFE 0x34 `i64.atomic.rmw.or` (Threads)
    I64AtomicRmwOr,
    /// 0xFE 0x35 `i32.atomic.rmw8.or_u` (Threads)
    I32AtomicRmw8OrU,
    /// 0xFE 0x36 `i32.atomic.rmw16.or_u` (Threads)
    I32AtomicRmw16OrU,
    /// 0xFE 0x37 `i64.atomic.rmw8.or_u` (Threads)
    I64AtomicRmw8OrU,
    /// 0xFE 0x38 `i64.atomic.rmw16.or_u` (Threads)
    I64AtomicRmw16OrU,
    /// 0xFE 0x39 `i64.atomic.rmw32.or_u` (Threads)
    I64AtomicRmw32OrU,
    /// 0xFE 0x3A `i32.atomic.rmw.xor` (Threads)
    I32AtomicRmwXor,
    /// 0xFE 0x3B `i64.atomic.rmw.xor` (Threads)
    I64AtomicRmwXor,
    /// 0xFE 0x3C `i32.atomic.rmw8.xor_u` (Threads)
    I32AtomicRmw8XorU,
    /// 0xFE 0x3D `i32.atomic.rmw16.xor_u` (Threads)
    I32AtomicRmw16XorU,
    /// 0xFE 0x3E `i64.atomic.rmw8.xor_u` (Threads)
    I64AtomicRmw8XorU,
    /// 0xFE 0x3F `i64.atomic.rmw16.xor_u` (Threads)
    I64AtomicRmw16XorU,
    /// 0xFE 0x40 `i64.atomic.rmw32.xor_u` (Threads)
    I64AtomicRmw32XorU,
    /// 0xFE 0x41 `i32.atomic.rmw.xchg` (Threads)
    I32AtomicRmwXchg,
    /// 0xFE 0x42 `i64.atomic.rmw.xchg` (Threads)
    I64AtomicRmwXchg,
    /// 0xFE 0x43 `i32.atomic.rmw8.xchg_u` (Threads)
    I32AtomicRmw8XchgU,
    /// 0xFE 0x44 `i32.atomic.rmw16.xchg_u` (Threads)
    I32AtomicRmw16XchgU,
    /// 0xFE 0x45 `i64.atomic.rmw8.xchg_u` (Threads)
    I64AtomicRmw8XchgU,
    /// 0xFE 0x46 `i64.atomic.rmw16.xchg_u` (Threads)
    I64AtomicRmw16XchgU,
    /// 0xFE 0x47 `i64.atomic.rmw32.xchg_u` (Threads)
    I64AtomicRmw32XchgU,
    /// 0xFE 0x48 `i32.atomic.rmw.cmpxchg` (Threads)
    I32AtomicRmwCmpxchg,
    /// 0xFE 0x49 `i64.atomic.rmw.cmpxchg` (Threads)
    I64AtomicRmwCmpxchg,
    /// 0xFE 0x4A `i32.atomic.rmw8.cmpxchg_u` (Threads)
    I32AtomicRmw8CmpxchgU,
    /// 0xFE 0x4B `i32.atomic.rmw16.cmpxchg_u` (Threads)
    I32AtomicRmw16CmpxchgU,
    /// 0xFE 0x4C `i64.atomic.rmw8.cmpxchg_u` (Threads)
    I64AtomicRmw8CmpxchgU,
    /// 0xFE 0x4D `i64.atomic.rmw16.cmpxchg_u` (Threads)
    I64AtomicRmw16CmpxchgU,
    /// 0xFE 0x4E `i64.atomic.rmw32.cmpxchg_u` (Threads)
    I64AtomicRmw32CmpxchgU,
}

impl WasmMnemonic {
    pub const fn as_str(&self) -> &'static str {
        match self {
            Self::AnyConvertExtern => "any.convert_extern",
            Self::ArrayCopy => "array.copy",
            Self::ArrayFill => "array.fill",
            Self::ArrayGet => "array.get",
            Self::ArrayGetS => "array.get_s",
            Self::ArrayGetU => "array.get_u",
            Self::ArrayInitData => "array.init_data",
            Self::ArrayInitElem => "array.init_elem",
            Self::ArrayLen => "array.len",
            Self::ArrayNew => "array.new",
            Self::ArrayNewData => "array.new_data",
            Self::ArrayNewDefault => "array.new_default",
            Self::ArrayNewElem => "array.new_elem",
            Self::ArrayNewFixed => "array.new_fixed",
            Self::ArraySet => "array.set",
            Self::AtomicFence => "atomic.fence",
            Self::Block => "block",
            Self::Br => "br",
            Self::BrIf => "br_if",
            Self::BrOnCast => "br_on_cast",
            Self::BrOnCastFail => "br_on_cast_fail",
            Self::BrOnNonNull => "br_on_non_null",
            Self::BrOnNull => "br_on_null",
            Self::BrTable => "br_table",
            Self::Call => "call",
            Self::CallIndirect => "call_indirect",
            Self::CallRef => "call_ref",
            Self::DataDrop => "data.drop",
            Self::Drop => "drop",
            Self::ElemDrop => "elem.drop",
            Self::Else => "else",
            Self::End => "end",
            Self::ExternConvertAny => "extern.convert_any",
            Self::F32Abs => "f32.abs",
            Self::F32Add => "f32.add",
            Self::F32Ceil => "f32.ceil",
            Self::F32Const => "f32.const",
            Self::F32ConvertI32S => "f32.convert_i32_s",
            Self::F32ConvertI32U => "f32.convert_i32_u",
            Self::F32ConvertI64S => "f32.convert_i64_s",
            Self::F32ConvertI64U => "f32.convert_i64_u",
            Self::F32Copysign => "f32.copysign",
            Self::F32DemoteF64 => "f32.demote_f64",
            Self::F32Div => "f32.div",
            Self::F32Eq => "f32.eq",
            Self::F32Floor => "f32.floor",
            Self::F32Ge => "f32.ge",
            Self::F32Gt => "f32.gt",
            Self::F32Le => "f32.le",
            Self::F32Load => "f32.load",
            Self::F32Lt => "f32.lt",
            Self::F32Max => "f32.max",
            Self::F32Min => "f32.min",
            Self::F32Mul => "f32.mul",
            Self::F32Ne => "f32.ne",
            Self::F32Nearest => "f32.nearest",
            Self::F32Neg => "f32.neg",
            Self::F32ReinterpretI32 => "f32.reinterpret_i32",
            Self::F32Sqrt => "f32.sqrt",
            Self::F32Store => "f32.store",
            Self::F32Sub => "f32.sub",
            Self::F32Trunc => "f32.trunc",
            Self::F32x4Abs => "f32x4.abs",
            Self::F32x4Add => "f32x4.add",
            Self::F32x4Ceil => "f32x4.ceil",
            Self::F32x4ConvertI32x4S => "f32x4.convert_i32x4_s",
            Self::F32x4ConvertI32x4U => "f32x4.convert_i32x4_u",
            Self::F32x4DemoteF64x2Zero => "f32x4.demote_f64x2_zero",
            Self::F32x4Div => "f32x4.div",
            Self::F32x4Eq => "f32x4.eq",
            Self::F32x4ExtractLane => "f32x4.extract_lane",
            Self::F32x4Floor => "f32x4.floor",
            Self::F32x4Ge => "f32x4.ge",
            Self::F32x4Gt => "f32x4.gt",
            Self::F32x4Le => "f32x4.le",
            Self::F32x4Lt => "f32x4.lt",
            Self::F32x4Max => "f32x4.max",
            Self::F32x4Min => "f32x4.min",
            Self::F32x4Mul => "f32x4.mul",
            Self::F32x4Ne => "f32x4.ne",
            Self::F32x4Nearest => "f32x4.nearest",
            Self::F32x4Neg => "f32x4.neg",
            Self::F32x4Pmax => "f32x4.pmax",
            Self::F32x4Pmin => "f32x4.pmin",
            Self::F32x4RelaxedDotBf16x8AddF32x4 => "f32x4.relaxed_dot_bf16x8_add_f32x4",
            Self::F32x4RelaxedMadd => "f32x4.relaxed_madd",
            Self::F32x4RelaxedMax => "f32x4.relaxed_max",
            Self::F32x4RelaxedMin => "f32x4.relaxed_min",
            Self::F32x4RelaxedNmadd => "f32x4.relaxed_nmadd",
            Self::F32x4ReplaceLane => "f32x4.replace_lane",
            Self::F32x4Splat => "f32x4.splat",
            Self::F32x4Sqrt => "f32x4.sqrt",
            Self::F32x4Sub => "f32x4.sub",
            Self::F32x4Trunc => "f32x4.trunc",
            Self::F64Abs => "f64.abs",
            Self::F64Add => "f64.add",
            Self::F64Ceil => "f64.ceil",
            Self::F64Const => "f64.const",
            Self::F64ConvertI32S => "f64.convert_i32_s",
            Self::F64ConvertI32U => "f64.convert_i32_u",
            Self::F64ConvertI64S => "f64.convert_i64_s",
            Self::F64ConvertI64U => "f64.convert_i64_u",
            Self::F64Copysign => "f64.copysign",
            Self::F64Div => "f64.div",
            Self::F64Eq => "f64.eq",
            Self::F64Floor => "f64.floor",
            Self::F64Ge => "f64.ge",
            Self::F64Gt => "f64.gt",
            Self::F64Le => "f64.le",
            Self::F64Load => "f64.load",
            Self::F64Lt => "f64.lt",
            Self::F64Max => "f64.max",
            Self::F64Min => "f64.min",
            Self::F64Mul => "f64.mul",
            Self::F64Ne => "f64.ne",
            Self::F64Nearest => "f64.nearest",
            Self::F64Neg => "f64.neg",
            Self::F64PromoteF32 => "f64.promote_f32",
            Self::F64ReinterpretI64 => "f64.reinterpret_i64",
            Self::F64Sqrt => "f64.sqrt",
            Self::F64Store => "f64.store",
            Self::F64Sub => "f64.sub",
            Self::F64Trunc => "f64.trunc",
            Self::F64x2Abs => "f64x2.abs",
            Self::F64x2Add => "f64x2.add",
            Self::F64x2Ceil => "f64x2.ceil",
            Self::F64x2ConvertLowI32x4S => "f64x2.convert_low_i32x4_s",
            Self::F64x2ConvertLowI32x4U => "f64x2.convert_low_i32x4_u",
            Self::F64x2Div => "f64x2.div",
            Self::F64x2Eq => "f64x2.eq",
            Self::F64x2ExtractLane => "f64x2.extract_lane",
            Self::F64x2Floor => "f64x2.floor",
            Self::F64x2Ge => "f64x2.ge",
            Self::F64x2Gt => "f64x2.gt",
            Self::F64x2Le => "f64x2.le",
            Self::F64x2Lt => "f64x2.lt",
            Self::F64x2Max => "f64x2.max",
            Self::F64x2Min => "f64x2.min",
            Self::F64x2Mul => "f64x2.mul",
            Self::F64x2Ne => "f64x2.ne",
            Self::F64x2Nearest => "f64x2.nearest",
            Self::F64x2Neg => "f64x2.neg",
            Self::F64x2Pmax => "f64x2.pmax",
            Self::F64x2Pmin => "f64x2.pmin",
            Self::F64x2PromoteLowF32x4 => "f64x2.promote_low_f32x4",
            Self::F64x2RelaxedMadd => "f64x2.relaxed_madd",
            Self::F64x2RelaxedMax => "f64x2.relaxed_max",
            Self::F64x2RelaxedMin => "f64x2.relaxed_min",
            Self::F64x2RelaxedNmadd => "f64x2.relaxed_nmadd",
            Self::F64x2ReplaceLane => "f64x2.replace_lane",
            Self::F64x2Splat => "f64x2.splat",
            Self::F64x2Sqrt => "f64x2.sqrt",
            Self::F64x2Sub => "f64x2.sub",
            Self::F64x2Trunc => "f64x2.trunc",
            Self::GlobalGet => "global.get",
            Self::GlobalSet => "global.set",
            Self::I16x8Abs => "i16x8.abs",
            Self::I16x8Add => "i16x8.add",
            Self::I16x8AddSatS => "i16x8.add_sat_s",
            Self::I16x8AddSatU => "i16x8.add_sat_u",
            Self::I16x8AllTrue => "i16x8.all_true",
            Self::I16x8AvgrU => "i16x8.avgr_u",
            Self::I16x8Bitmask => "i16x8.bitmask",
            Self::I16x8Eq => "i16x8.eq",
            Self::I16x8ExtaddPairwiseI8x16S => "i16x8.extadd_pairwise_i8x16_s",
            Self::I16x8ExtaddPairwiseI8x16U => "i16x8.extadd_pairwise_i8x16_u",
            Self::I16x8ExtendHighI8x16S => "i16x8.extend_high_i8x16_s",
            Self::I16x8ExtendHighI8x16U => "i16x8.extend_high_i8x16_u",
            Self::I16x8ExtendLowI8x16S => "i16x8.extend_low_i8x16_s",
            Self::I16x8ExtendLowI8x16U => "i16x8.extend_low_i8x16_u",
            Self::I16x8ExtmulHighI8x16S => "i16x8.extmul_high_i8x16_s",
            Self::I16x8ExtmulHighI8x16U => "i16x8.extmul_high_i8x16_u",
            Self::I16x8ExtmulLowI8x16S => "i16x8.extmul_low_i8x16_s",
            Self::I16x8ExtmulLowI8x16U => "i16x8.extmul_low_i8x16_u",
            Self::I16x8ExtractLaneS => "i16x8.extract_lane_s",
            Self::I16x8ExtractLaneU => "i16x8.extract_lane_u",
            Self::I16x8GeS => "i16x8.ge_s",
            Self::I16x8GeU => "i16x8.ge_u",
            Self::I16x8GtS => "i16x8.gt_s",
            Self::I16x8GtU => "i16x8.gt_u",
            Self::I16x8LeS => "i16x8.le_s",
            Self::I16x8LeU => "i16x8.le_u",
            Self::I16x8LtS => "i16x8.lt_s",
            Self::I16x8LtU => "i16x8.lt_u",
            Self::I16x8MaxS => "i16x8.max_s",
            Self::I16x8MaxU => "i16x8.max_u",
            Self::I16x8MinS => "i16x8.min_s",
            Self::I16x8MinU => "i16x8.min_u",
            Self::I16x8Mul => "i16x8.mul",
            Self::I16x8NarrowI32x4S => "i16x8.narrow_i32x4_s",
            Self::I16x8NarrowI32x4U => "i16x8.narrow_i32x4_u",
            Self::I16x8Ne => "i16x8.ne",
            Self::I16x8Neg => "i16x8.neg",
            Self::I16x8Q15mulrSatS => "i16x8.q15mulr_sat_s",
            Self::I16x8RelaxedDotI8x16I7x16S => "i16x8.relaxed_dot_i8x16_i7x16_s",
            Self::I16x8RelaxedLaneselect => "i16x8.relaxed_laneselect",
            Self::I16x8RelaxedQ15mulrS => "i16x8.relaxed_q15mulr_s",
            Self::I16x8ReplaceLane => "i16x8.replace_lane",
            Self::I16x8Shl => "i16x8.shl",
            Self::I16x8ShrS => "i16x8.shr_s",
            Self::I16x8ShrU => "i16x8.shr_u",
            Self::I16x8Splat => "i16x8.splat",
            Self::I16x8Sub => "i16x8.sub",
            Self::I16x8SubSatS => "i16x8.sub_sat_s",
            Self::I16x8SubSatU => "i16x8.sub_sat_u",
            Self::I31GetS => "i31.get_s",
            Self::I31GetU => "i31.get_u",
            Self::I32Add => "i32.add",
            Self::I32And => "i32.and",
            Self::I32AtomicLoad => "i32.atomic.load",
            Self::I32AtomicLoad16U => "i32.atomic.load16_u",
            Self::I32AtomicLoad8U => "i32.atomic.load8_u",
            Self::I32AtomicRmw16AddU => "i32.atomic.rmw16.add_u",
            Self::I32AtomicRmw16AndU => "i32.atomic.rmw16.and_u",
            Self::I32AtomicRmw16CmpxchgU => "i32.atomic.rmw16.cmpxchg_u",
            Self::I32AtomicRmw16OrU => "i32.atomic.rmw16.or_u",
            Self::I32AtomicRmw16SubU => "i32.atomic.rmw16.sub_u",
            Self::I32AtomicRmw16XchgU => "i32.atomic.rmw16.xchg_u",
            Self::I32AtomicRmw16XorU => "i32.atomic.rmw16.xor_u",
            Self::I32AtomicRmw8AddU => "i32.atomic.rmw8.add_u",
            Self::I32AtomicRmw8AndU => "i32.atomic.rmw8.and_u",
            Self::I32AtomicRmw8CmpxchgU => "i32.atomic.rmw8.cmpxchg_u",
            Self::I32AtomicRmw8OrU => "i32.atomic.rmw8.or_u",
            Self::I32AtomicRmw8SubU => "i32.atomic.rmw8.sub_u",
            Self::I32AtomicRmw8XchgU => "i32.atomic.rmw8.xchg_u",
            Self::I32AtomicRmw8XorU => "i32.atomic.rmw8.xor_u",
            Self::I32AtomicRmwAdd => "i32.atomic.rmw.add",
            Self::I32AtomicRmwAnd => "i32.atomic.rmw.and",
            Self::I32AtomicRmwCmpxchg => "i32.atomic.rmw.cmpxchg",
            Self::I32AtomicRmwOr => "i32.atomic.rmw.or",
            Self::I32AtomicRmwSub => "i32.atomic.rmw.sub",
            Self::I32AtomicRmwXchg => "i32.atomic.rmw.xchg",
            Self::I32AtomicRmwXor => "i32.atomic.rmw.xor",
            Self::I32AtomicStore => "i32.atomic.store",
            Self::I32AtomicStore16 => "i32.atomic.store16",
            Self::I32AtomicStore8 => "i32.atomic.store8",
            Self::I32Clz => "i32.clz",
            Self::I32Const => "i32.const",
            Self::I32Ctz => "i32.ctz",
            Self::I32DivS => "i32.div_s",
            Self::I32DivU => "i32.div_u",
            Self::I32Eq => "i32.eq",
            Self::I32Eqz => "i32.eqz",
            Self::I32Extend16S => "i32.extend16_s",
            Self::I32Extend8S => "i32.extend8_s",
            Self::I32GeS => "i32.ge_s",
            Self::I32GeU => "i32.ge_u",
            Self::I32GtS => "i32.gt_s",
            Self::I32GtU => "i32.gt_u",
            Self::I32LeS => "i32.le_s",
            Self::I32LeU => "i32.le_u",
            Self::I32Load => "i32.load",
            Self::I32Load16S => "i32.load16_s",
            Self::I32Load16U => "i32.load16_u",
            Self::I32Load8S => "i32.load8_s",
            Self::I32Load8U => "i32.load8_u",
            Self::I32LtS => "i32.lt_s",
            Self::I32LtU => "i32.lt_u",
            Self::I32Mul => "i32.mul",
            Self::I32Ne => "i32.ne",
            Self::I32Or => "i32.or",
            Self::I32Popcnt => "i32.popcnt",
            Self::I32ReinterpretF32 => "i32.reinterpret_f32",
            Self::I32RemS => "i32.rem_s",
            Self::I32RemU => "i32.rem_u",
            Self::I32Rotl => "i32.rotl",
            Self::I32Rotr => "i32.rotr",
            Self::I32Shl => "i32.shl",
            Self::I32ShrS => "i32.shr_s",
            Self::I32ShrU => "i32.shr_u",
            Self::I32Store => "i32.store",
            Self::I32Store16 => "i32.store16",
            Self::I32Store8 => "i32.store8",
            Self::I32Sub => "i32.sub",
            Self::I32TruncF32S => "i32.trunc_f32_s",
            Self::I32TruncF32U => "i32.trunc_f32_u",
            Self::I32TruncF64S => "i32.trunc_f64_s",
            Self::I32TruncF64U => "i32.trunc_f64_u",
            Self::I32TruncSatF32S => "i32.trunc_sat_f32_s",
            Self::I32TruncSatF32U => "i32.trunc_sat_f32_u",
            Self::I32TruncSatF64S => "i32.trunc_sat_f64_s",
            Self::I32TruncSatF64U => "i32.trunc_sat_f64_u",
            Self::I32WrapI64 => "i32.wrap_i64",
            Self::I32Xor => "i32.xor",
            Self::I32x4Abs => "i32x4.abs",
            Self::I32x4Add => "i32x4.add",
            Self::I32x4AllTrue => "i32x4.all_true",
            Self::I32x4Bitmask => "i32x4.bitmask",
            Self::I32x4DotI16x8S => "i32x4.dot_i16x8_s",
            Self::I32x4Eq => "i32x4.eq",
            Self::I32x4ExtaddPairwiseI16x8S => "i32x4.extadd_pairwise_i16x8_s",
            Self::I32x4ExtaddPairwiseI16x8U => "i32x4.extadd_pairwise_i16x8_u",
            Self::I32x4ExtendHighI16x8S => "i32x4.extend_high_i16x8_s",
            Self::I32x4ExtendHighI16x8U => "i32x4.extend_high_i16x8_u",
            Self::I32x4ExtendLowI16x8S => "i32x4.extend_low_i16x8_s",
            Self::I32x4ExtendLowI16x8U => "i32x4.extend_low_i16x8_u",
            Self::I32x4ExtmulHighI16x8S => "i32x4.extmul_high_i16x8_s",
            Self::I32x4ExtmulHighI16x8U => "i32x4.extmul_high_i16x8_u",
            Self::I32x4ExtmulLowI16x8S => "i32x4.extmul_low_i16x8_s",
            Self::I32x4ExtmulLowI16x8U => "i32x4.extmul_low_i16x8_u",
            Self::I32x4ExtractLane => "i32x4.extract_lane",
            Self::I32x4GeS => "i32x4.ge_s",
            Self::I32x4GeU => "i32x4.ge_u",
            Self::I32x4GtS => "i32x4.gt_s",
            Self::I32x4GtU => "i32x4.gt_u",
            Self::I32x4LeS => "i32x4.le_s",
            Self::I32x4LeU => "i32x4.le_u",
            Self::I32x4LtS => "i32x4.lt_s",
            Self::I32x4LtU => "i32x4.lt_u",
            Self::I32x4MaxS => "i32x4.max_s",
            Self::I32x4MaxU => "i32x4.max_u",
            Self::I32x4MinS => "i32x4.min_s",
            Self::I32x4MinU => "i32x4.min_u",
            Self::I32x4Mul => "i32x4.mul",
            Self::I32x4Ne => "i32x4.ne",
            Self::I32x4Neg => "i32x4.neg",
            Self::I32x4RelaxedDotI8x16I7x16AddS => "i32x4.relaxed_dot_i8x16_i7x16_add_s",
            Self::I32x4RelaxedLaneselect => "i32x4.relaxed_laneselect",
            Self::I32x4RelaxedTruncF32x4U => "i32x4.relaxed_trunc_f32x4_u",
            Self::I32x4RelaxedTruncF64x2SZero => "i32x4.relaxed_trunc_f64x2_s_zero",
            Self::I32x4RelaxedTruncF64x2UZero => "i32x4.relaxed_trunc_f64x2_u_zero",
            Self::I32x4ReplaceLane => "i32x4.replace_lane",
            Self::I32x4Shl => "i32x4.shl",
            Self::I32x4ShrS => "i32x4.shr_s",
            Self::I32x4ShrU => "i32x4.shr_u",
            Self::I32x4Splat => "i32x4.splat",
            Self::I32x4Sub => "i32x4.sub",
            Self::I32x4TruncSatF32x4S => "i32x4.trunc_sat_f32x4_s",
            Self::I32x4TruncSatF32x4U => "i32x4.trunc_sat_f32x4_u",
            Self::I32x4TruncSatF64x2SZero => "i32x4.trunc_sat_f64x2_s_zero",
            Self::I32x4TruncSatF64x2UZero => "i32x4.trunc_sat_f64x2_u_zero",
            Self::I64Add => "i64.add",
            Self::I64And => "i64.and",
            Self::I64AtomicLoad => "i64.atomic.load",
            Self::I64AtomicLoad16U => "i64.atomic.load16_u",
            Self::I64AtomicLoad32U => "i64.atomic.load32_u",
            Self::I64AtomicLoad8U => "i64.atomic.load8_u",
            Self::I64AtomicRmw16AddU => "i64.atomic.rmw16.add_u",
            Self::I64AtomicRmw16AndU => "i64.atomic.rmw16.and_u",
            Self::I64AtomicRmw16CmpxchgU => "i64.atomic.rmw16.cmpxchg_u",
            Self::I64AtomicRmw16OrU => "i64.atomic.rmw16.or_u",
            Self::I64AtomicRmw16SubU => "i64.atomic.rmw16.sub_u",
            Self::I64AtomicRmw16XchgU => "i64.atomic.rmw16.xchg_u",
            Self::I64AtomicRmw16XorU => "i64.atomic.rmw16.xor_u",
            Self::I64AtomicRmw32AddU => "i64.atomic.rmw32.add_u",
            Self::I64AtomicRmw32AndU => "i64.atomic.rmw32.and_u",
            Self::I64AtomicRmw32CmpxchgU => "i64.atomic.rmw32.cmpxchg_u",
            Self::I64AtomicRmw32OrU => "i64.atomic.rmw32.or_u",
            Self::I64AtomicRmw32SubU => "i64.atomic.rmw32.sub_u",
            Self::I64AtomicRmw32XchgU => "i64.atomic.rmw32.xchg_u",
            Self::I64AtomicRmw32XorU => "i64.atomic.rmw32.xor_u",
            Self::I64AtomicRmw8AddU => "i64.atomic.rmw8.add_u",
            Self::I64AtomicRmw8AndU => "i64.atomic.rmw8.and_u",
            Self::I64AtomicRmw8CmpxchgU => "i64.atomic.rmw8.cmpxchg_u",
            Self::I64AtomicRmw8OrU => "i64.atomic.rmw8.or_u",
            Self::I64AtomicRmw8SubU => "i64.atomic.rmw8.sub_u",
            Self::I64AtomicRmw8XchgU => "i64.atomic.rmw8.xchg_u",
            Self::I64AtomicRmw8XorU => "i64.atomic.rmw8.xor_u",
            Self::I64AtomicRmwAdd => "i64.atomic.rmw.add",
            Self::I64AtomicRmwAnd => "i64.atomic.rmw.and",
            Self::I64AtomicRmwCmpxchg => "i64.atomic.rmw.cmpxchg",
            Self::I64AtomicRmwOr => "i64.atomic.rmw.or",
            Self::I64AtomicRmwSub => "i64.atomic.rmw.sub",
            Self::I64AtomicRmwXchg => "i64.atomic.rmw.xchg",
            Self::I64AtomicRmwXor => "i64.atomic.rmw.xor",
            Self::I64AtomicStore => "i64.atomic.store",
            Self::I64AtomicStore16 => "i64.atomic.store16",
            Self::I64AtomicStore32 => "i64.atomic.store32",
            Self::I64AtomicStore8 => "i64.atomic.store8",
            Self::I64Clz => "i64.clz",
            Self::I64Const => "i64.const",
            Self::I64Ctz => "i64.ctz",
            Self::I64DivS => "i64.div_s",
            Self::I64DivU => "i64.div_u",
            Self::I64Eq => "i64.eq",
            Self::I64Eqz => "i64.eqz",
            Self::I64Extend16S => "i64.extend16_s",
            Self::I64Extend32S => "i64.extend32_s",
            Self::I64Extend8S => "i64.extend8_s",
            Self::I64ExtendI32S => "i64.extend_i32_s",
            Self::I64ExtendI32U => "i64.extend_i32_u",
            Self::I64GeS => "i64.ge_s",
            Self::I64GeU => "i64.ge_u",
            Self::I64GtS => "i64.gt_s",
            Self::I64GtU => "i64.gt_u",
            Self::I64LeS => "i64.le_s",
            Self::I64LeU => "i64.le_u",
            Self::I64Load => "i64.load",
            Self::I64Load16S => "i64.load16_s",
            Self::I64Load16U => "i64.load16_u",
            Self::I64Load32S => "i64.load32_s",
            Self::I64Load32U => "i64.load32_u",
            Self::I64Load8S => "i64.load8_s",
            Self::I64Load8U => "i64.load8_u",
            Self::I64LtS => "i64.lt_s",
            Self::I64LtU => "i64.lt_u",
            Self::I64Mul => "i64.mul",
            Self::I64Ne => "i64.ne",
            Self::I64Or => "i64.or",
            Self::I64Popcnt => "i64.popcnt",
            Self::I64ReinterpretF64 => "i64.reinterpret_f64",
            Self::I64RemS => "i64.rem_s",
            Self::I64RemU => "i64.rem_u",
            Self::I64Rotl => "i64.rotl",
            Self::I64Rotr => "i64.rotr",
            Self::I64Shl => "i64.shl",
            Self::I64ShrS => "i64.shr_s",
            Self::I64ShrU => "i64.shr_u",
            Self::I64Store => "i64.store",
            Self::I64Store16 => "i64.store16",
            Self::I64Store32 => "i64.store32",
            Self::I64Store8 => "i64.store8",
            Self::I64Sub => "i64.sub",
            Self::I64TruncF32S => "i64.trunc_f32_s",
            Self::I64TruncF32U => "i64.trunc_f32_u",
            Self::I64TruncF64S => "i64.trunc_f64_s",
            Self::I64TruncF64U => "i64.trunc_f64_u",
            Self::I64TruncSatF32S => "i64.trunc_sat_f32_s",
            Self::I64TruncSatF32U => "i64.trunc_sat_f32_u",
            Self::I64TruncSatF64S => "i64.trunc_sat_f64_s",
            Self::I64TruncSatF64U => "i64.trunc_sat_f64_u",
            Self::I64Xor => "i64.xor",
            Self::I64x2Abs => "i64x2.abs",
            Self::I64x2Add => "i64x2.add",
            Self::I64x2AllTrue => "i64x2.all_true",
            Self::I64x2Bitmask => "i64x2.bitmask",
            Self::I64x2Eq => "i64x2.eq",
            Self::I64x2ExtendHighI32x4S => "i64x2.extend_high_i32x4_s",
            Self::I64x2ExtendHighI32x4U => "i64x2.extend_high_i32x4_u",
            Self::I64x2ExtendLowI32x4S => "i64x2.extend_low_i32x4_s",
            Self::I64x2ExtendLowI32x4U => "i64x2.extend_low_i32x4_u",
            Self::I64x2ExtmulHighI32x4S => "i64x2.extmul_high_i32x4_s",
            Self::I64x2ExtmulHighI32x4U => "i64x2.extmul_high_i32x4_u",
            Self::I64x2ExtmulLowI32x4S => "i64x2.extmul_low_i32x4_s",
            Self::I64x2ExtmulLowI32x4U => "i64x2.extmul_low_i32x4_u",
            Self::I64x2ExtractLane => "i64x2.extract_lane",
            Self::I64x2GeS => "i64x2.ge_s",
            Self::I64x2GtS => "i64x2.gt_s",
            Self::I64x2LeS => "i64x2.le_s",
            Self::I64x2LtS => "i64x2.lt_s",
            Self::I64x2Mul => "i64x2.mul",
            Self::I64x2Ne => "i64x2.ne",
            Self::I64x2Neg => "i64x2.neg",
            Self::I64x2RelaxedLaneselect => "i64x2.relaxed_laneselect",
            Self::I64x2ReplaceLane => "i64x2.replace_lane",
            Self::I64x2Shl => "i64x2.shl",
            Self::I64x2ShrS => "i64x2.shr_s",
            Self::I64x2ShrU => "i64x2.shr_u",
            Self::I64x2Splat => "i64x2.splat",
            Self::I64x2Sub => "i64x2.sub",
            Self::I8x16Abs => "i8x16.abs",
            Self::I8x16Add => "i8x16.add",
            Self::I8x16AddSatS => "i8x16.add_sat_s",
            Self::I8x16AddSatU => "i8x16.add_sat_u",
            Self::I8x16AllTrue => "i8x16.all_true",
            Self::I8x16AvgrU => "i8x16.avgr_u",
            Self::I8x16Bitmask => "i8x16.bitmask",
            Self::I8x16Eq => "i8x16.eq",
            Self::I8x16ExtractLaneS => "i8x16.extract_lane_s",
            Self::I8x16ExtractLaneU => "i8x16.extract_lane_u",
            Self::I8x16GeS => "i8x16.ge_s",
            Self::I8x16GeU => "i8x16.ge_u",
            Self::I8x16GtS => "i8x16.gt_s",
            Self::I8x16GtU => "i8x16.gt_u",
            Self::I8x16LeS => "i8x16.le_s",
            Self::I8x16LeU => "i8x16.le_u",
            Self::I8x16LtS => "i8x16.lt_s",
            Self::I8x16LtU => "i8x16.lt_u",
            Self::I8x16MaxS => "i8x16.max_s",
            Self::I8x16MaxU => "i8x16.max_u",
            Self::I8x16MinS => "i8x16.min_s",
            Self::I8x16MinU => "i8x16.min_u",
            Self::I8x16NarrowI16x8S => "i8x16.narrow_i16x8_s",
            Self::I8x16NarrowI16x8U => "i8x16.narrow_i16x8_u",
            Self::I8x16Ne => "i8x16.ne",
            Self::I8x16Neg => "i8x16.neg",
            Self::I8x16Popcnt => "i8x16.popcnt",
            Self::I8x16RelaxedLaneselect => "i8x16.relaxed_laneselect",
            Self::I8x16ReplaceLane => "i8x16.replace_lane",
            Self::I8x16Shl => "i8x16.shl",
            Self::I8x16ShrS => "i8x16.shr_s",
            Self::I8x16ShrU => "i8x16.shr_u",
            Self::I8x16Shuffle => "i8x16.shuffle",
            Self::I8x16Splat => "i8x16.splat",
            Self::I8x16Sub => "i8x16.sub",
            Self::I8x16SubSatS => "i8x16.sub_sat_s",
            Self::I8x16SubSatU => "i8x16.sub_sat_u",
            Self::I8x16Swizzle => "i8x16.swizzle",
            Self::If => "if",
            Self::LocalGet => "local.get",
            Self::LocalSet => "local.set",
            Self::LocalTee => "local.tee",
            Self::Loop => "loop",
            Self::MemoryAtomicNotify => "memory.atomic.notify",
            Self::MemoryAtomicWait32 => "memory.atomic.wait32",
            Self::MemoryAtomicWait64 => "memory.atomic.wait64",
            Self::MemoryCopy => "memory.copy",
            Self::MemoryFill => "memory.fill",
            Self::MemoryGrow => "memory.grow",
            Self::MemoryInit => "memory.init",
            Self::MemorySize => "memory.size",
            Self::Nop => "nop",
            Self::RefAsNonNull => "ref.as_non_null",
            Self::RefCastRefHt => "ref.cast (ref ht)",
            Self::RefCastRefNullHt => "ref.cast (ref null ht)",
            Self::RefEq => "ref.eq",
            Self::RefFunc => "ref.func",
            Self::RefI31 => "ref.i31",
            Self::RefIsNull => "ref.is_null",
            Self::RefNull => "ref.null",
            Self::RefTestRefHt => "ref.test (ref ht)",
            Self::RefTestRefNullHt => "ref.test (ref null ht)",
            Self::Return => "return",
            Self::ReturnCall => "return_call",
            Self::ReturnCallIndirect => "return_call_indirect",
            Self::ReturnCallRef => "return_call_ref",
            Self::Select => "select",
            Self::SelectT => "select_t",
            Self::StructGet => "struct.get",
            Self::StructGetS => "struct.get_s",
            Self::StructGetU => "struct.get_u",
            Self::StructNew => "struct.new",
            Self::StructNewDefault => "struct.new_default",
            Self::StructSet => "struct.set",
            Self::TableCopy => "table.copy",
            Self::TableFill => "table.fill",
            Self::TableGet => "table.get",
            Self::TableGrow => "table.grow",
            Self::TableInit => "table.init",
            Self::TableSet => "table.set",
            Self::TableSize => "table.size",
            Self::Unreachable => "unreachable",
            Self::V128And => "v128.and",
            Self::V128Andnot => "v128.andnot",
            Self::V128AnyTrue => "v128.any_true",
            Self::V128Bitselect => "v128.bitselect",
            Self::V128Const => "v128.const",
            Self::V128Load => "v128.load",
            Self::V128Load16Lane => "v128.load16_lane",
            Self::V128Load16Splat => "v128.load16_splat",
            Self::V128Load16x4S => "v128.load16x4_s",
            Self::V128Load16x4U => "v128.load16x4_u",
            Self::V128Load32Lane => "v128.load32_lane",
            Self::V128Load32Splat => "v128.load32_splat",
            Self::V128Load32Zero => "v128.load32_zero",
            Self::V128Load32x2S => "v128.load32x2_s",
            Self::V128Load32x2U => "v128.load32x2_u",
            Self::V128Load64Lane => "v128.load64_lane",
            Self::V128Load64Splat => "v128.load64_splat",
            Self::V128Load64Zero => "v128.load64_zero",
            Self::V128Load8Lane => "v128.load8_lane",
            Self::V128Load8Splat => "v128.load8_splat",
            Self::V128Load8x8S => "v128.load8x8_s",
            Self::V128Load8x8U => "v128.load8x8_u",
            Self::V128Not => "v128.not",
            Self::V128Or => "v128.or",
            Self::V128Store => "v128.store",
            Self::V128Store16Lane => "v128.store16_lane",
            Self::V128Store32Lane => "v128.store32_lane",
            Self::V128Store64Lane => "v128.store64_lane",
            Self::V128Store8Lane => "v128.store8_lane",
            Self::V128Xor => "v128.xor",
            Self::Zi32x4RelaxedTruncF32x4S => "Zi32x4.relaxed_trunc_f32x4_s",
            Self::Zi8x16RelaxedSwizzle => "Zi8x16.relaxed_swizzle",
        }
    }
    
    pub const fn proposal(&self) -> WasmProposal {
        match self {
            Self::AnyConvertExtern => WasmProposal::Gc,
            Self::ArrayCopy => WasmProposal::Gc,
            Self::ArrayFill => WasmProposal::Gc,
            Self::ArrayGet => WasmProposal::Gc,
            Self::ArrayGetS => WasmProposal::Gc,
            Self::ArrayGetU => WasmProposal::Gc,
            Self::ArrayInitData => WasmProposal::Gc,
            Self::ArrayInitElem => WasmProposal::Gc,
            Self::ArrayLen => WasmProposal::Gc,
            Self::ArrayNew => WasmProposal::Gc,
            Self::ArrayNewData => WasmProposal::Gc,
            Self::ArrayNewDefault => WasmProposal::Gc,
            Self::ArrayNewElem => WasmProposal::Gc,
            Self::ArrayNewFixed => WasmProposal::Gc,
            Self::ArraySet => WasmProposal::Gc,
            Self::AtomicFence => WasmProposal::Threads,
            Self::BrOnCast => WasmProposal::Gc,
            Self::BrOnCastFail => WasmProposal::Gc,
            Self::BrOnNonNull => WasmProposal::TypedFunctionReferences,
            Self::BrOnNull => WasmProposal::TypedFunctionReferences,
            Self::CallRef => WasmProposal::TypedFunctionReferences,
            Self::DataDrop => WasmProposal::BulkMemoryOperations,
            Self::ElemDrop => WasmProposal::BulkMemoryOperations,
            Self::ExternConvertAny => WasmProposal::Gc,
            Self::F32x4Abs => WasmProposal::Simd,
            Self::F32x4Add => WasmProposal::Simd,
            Self::F32x4Ceil => WasmProposal::Simd,
            Self::F32x4ConvertI32x4S => WasmProposal::Simd,
            Self::F32x4ConvertI32x4U => WasmProposal::Simd,
            Self::F32x4DemoteF64x2Zero => WasmProposal::Simd,
            Self::F32x4Div => WasmProposal::Simd,
            Self::F32x4Eq => WasmProposal::Simd,
            Self::F32x4ExtractLane => WasmProposal::Simd,
            Self::F32x4Floor => WasmProposal::Simd,
            Self::F32x4Ge => WasmProposal::Simd,
            Self::F32x4Gt => WasmProposal::Simd,
            Self::F32x4Le => WasmProposal::Simd,
            Self::F32x4Lt => WasmProposal::Simd,
            Self::F32x4Max => WasmProposal::Simd,
            Self::F32x4Min => WasmProposal::Simd,
            Self::F32x4Mul => WasmProposal::Simd,
            Self::F32x4Ne => WasmProposal::Simd,
            Self::F32x4Nearest => WasmProposal::Simd,
            Self::F32x4Neg => WasmProposal::Simd,
            Self::F32x4Pmax => WasmProposal::Simd,
            Self::F32x4Pmin => WasmProposal::Simd,
            Self::F32x4RelaxedDotBf16x8AddF32x4 => WasmProposal::RelaxedSimd,
            Self::F32x4RelaxedMadd => WasmProposal::RelaxedSimd,
            Self::F32x4RelaxedMax => WasmProposal::RelaxedSimd,
            Self::F32x4RelaxedMin => WasmProposal::RelaxedSimd,
            Self::F32x4RelaxedNmadd => WasmProposal::RelaxedSimd,
            Self::F32x4ReplaceLane => WasmProposal::Simd,
            Self::F32x4Splat => WasmProposal::Simd,
            Self::F32x4Sqrt => WasmProposal::Simd,
            Self::F32x4Sub => WasmProposal::Simd,
            Self::F32x4Trunc => WasmProposal::Simd,
            Self::F64x2Abs => WasmProposal::Simd,
            Self::F64x2Add => WasmProposal::Simd,
            Self::F64x2Ceil => WasmProposal::Simd,
            Self::F64x2ConvertLowI32x4S => WasmProposal::Simd,
            Self::F64x2ConvertLowI32x4U => WasmProposal::Simd,
            Self::F64x2Div => WasmProposal::Simd,
            Self::F64x2Eq => WasmProposal::Simd,
            Self::F64x2ExtractLane => WasmProposal::Simd,
            Self::F64x2Floor => WasmProposal::Simd,
            Self::F64x2Ge => WasmProposal::Simd,
            Self::F64x2Gt => WasmProposal::Simd,
            Self::F64x2Le => WasmProposal::Simd,
            Self::F64x2Lt => WasmProposal::Simd,
            Self::F64x2Max => WasmProposal::Simd,
            Self::F64x2Min => WasmProposal::Simd,
            Self::F64x2Mul => WasmProposal::Simd,
            Self::F64x2Ne => WasmProposal::Simd,
            Self::F64x2Nearest => WasmProposal::Simd,
            Self::F64x2Neg => WasmProposal::Simd,
            Self::F64x2Pmax => WasmProposal::Simd,
            Self::F64x2Pmin => WasmProposal::Simd,
            Self::F64x2PromoteLowF32x4 => WasmProposal::Simd,
            Self::F64x2RelaxedMadd => WasmProposal::RelaxedSimd,
            Self::F64x2RelaxedMax => WasmProposal::RelaxedSimd,
            Self::F64x2RelaxedMin => WasmProposal::RelaxedSimd,
            Self::F64x2RelaxedNmadd => WasmProposal::RelaxedSimd,
            Self::F64x2ReplaceLane => WasmProposal::Simd,
            Self::F64x2Splat => WasmProposal::Simd,
            Self::F64x2Sqrt => WasmProposal::Simd,
            Self::F64x2Sub => WasmProposal::Simd,
            Self::F64x2Trunc => WasmProposal::Simd,
            Self::I16x8Abs => WasmProposal::Simd,
            Self::I16x8Add => WasmProposal::Simd,
            Self::I16x8AddSatS => WasmProposal::Simd,
            Self::I16x8AddSatU => WasmProposal::Simd,
            Self::I16x8AllTrue => WasmProposal::Simd,
            Self::I16x8AvgrU => WasmProposal::Simd,
            Self::I16x8Bitmask => WasmProposal::Simd,
            Self::I16x8Eq => WasmProposal::Simd,
            Self::I16x8ExtaddPairwiseI8x16S => WasmProposal::Simd,
            Self::I16x8ExtaddPairwiseI8x16U => WasmProposal::Simd,
            Self::I16x8ExtendHighI8x16S => WasmProposal::Simd,
            Self::I16x8ExtendHighI8x16U => WasmProposal::Simd,
            Self::I16x8ExtendLowI8x16S => WasmProposal::Simd,
            Self::I16x8ExtendLowI8x16U => WasmProposal::Simd,
            Self::I16x8ExtmulHighI8x16S => WasmProposal::Simd,
            Self::I16x8ExtmulHighI8x16U => WasmProposal::Simd,
            Self::I16x8ExtmulLowI8x16S => WasmProposal::Simd,
            Self::I16x8ExtmulLowI8x16U => WasmProposal::Simd,
            Self::I16x8ExtractLaneS => WasmProposal::Simd,
            Self::I16x8ExtractLaneU => WasmProposal::Simd,
            Self::I16x8GeS => WasmProposal::Simd,
            Self::I16x8GeU => WasmProposal::Simd,
            Self::I16x8GtS => WasmProposal::Simd,
            Self::I16x8GtU => WasmProposal::Simd,
            Self::I16x8LeS => WasmProposal::Simd,
            Self::I16x8LeU => WasmProposal::Simd,
            Self::I16x8LtS => WasmProposal::Simd,
            Self::I16x8LtU => WasmProposal::Simd,
            Self::I16x8MaxS => WasmProposal::Simd,
            Self::I16x8MaxU => WasmProposal::Simd,
            Self::I16x8MinS => WasmProposal::Simd,
            Self::I16x8MinU => WasmProposal::Simd,
            Self::I16x8Mul => WasmProposal::Simd,
            Self::I16x8NarrowI32x4S => WasmProposal::Simd,
            Self::I16x8NarrowI32x4U => WasmProposal::Simd,
            Self::I16x8Ne => WasmProposal::Simd,
            Self::I16x8Neg => WasmProposal::Simd,
            Self::I16x8Q15mulrSatS => WasmProposal::Simd,
            Self::I16x8RelaxedDotI8x16I7x16S => WasmProposal::RelaxedSimd,
            Self::I16x8RelaxedLaneselect => WasmProposal::RelaxedSimd,
            Self::I16x8RelaxedQ15mulrS => WasmProposal::RelaxedSimd,
            Self::I16x8ReplaceLane => WasmProposal::Simd,
            Self::I16x8Shl => WasmProposal::Simd,
            Self::I16x8ShrS => WasmProposal::Simd,
            Self::I16x8ShrU => WasmProposal::Simd,
            Self::I16x8Splat => WasmProposal::Simd,
            Self::I16x8Sub => WasmProposal::Simd,
            Self::I16x8SubSatS => WasmProposal::Simd,
            Self::I16x8SubSatU => WasmProposal::Simd,
            Self::I31GetS => WasmProposal::Gc,
            Self::I31GetU => WasmProposal::Gc,
            Self::I32AtomicLoad => WasmProposal::Threads,
            Self::I32AtomicLoad16U => WasmProposal::Threads,
            Self::I32AtomicLoad8U => WasmProposal::Threads,
            Self::I32AtomicRmw16AddU => WasmProposal::Threads,
            Self::I32AtomicRmw16AndU => WasmProposal::Threads,
            Self::I32AtomicRmw16CmpxchgU => WasmProposal::Threads,
            Self::I32AtomicRmw16OrU => WasmProposal::Threads,
            Self::I32AtomicRmw16SubU => WasmProposal::Threads,
            Self::I32AtomicRmw16XchgU => WasmProposal::Threads,
            Self::I32AtomicRmw16XorU => WasmProposal::Threads,
            Self::I32AtomicRmw8AddU => WasmProposal::Threads,
            Self::I32AtomicRmw8AndU => WasmProposal::Threads,
            Self::I32AtomicRmw8CmpxchgU => WasmProposal::Threads,
            Self::I32AtomicRmw8OrU => WasmProposal::Threads,
            Self::I32AtomicRmw8SubU => WasmProposal::Threads,
            Self::I32AtomicRmw8XchgU => WasmProposal::Threads,
            Self::I32AtomicRmw8XorU => WasmProposal::Threads,
            Self::I32AtomicRmwAdd => WasmProposal::Threads,
            Self::I32AtomicRmwAnd => WasmProposal::Threads,
            Self::I32AtomicRmwCmpxchg => WasmProposal::Threads,
            Self::I32AtomicRmwOr => WasmProposal::Threads,
            Self::I32AtomicRmwSub => WasmProposal::Threads,
            Self::I32AtomicRmwXchg => WasmProposal::Threads,
            Self::I32AtomicRmwXor => WasmProposal::Threads,
            Self::I32AtomicStore => WasmProposal::Threads,
            Self::I32AtomicStore16 => WasmProposal::Threads,
            Self::I32AtomicStore8 => WasmProposal::Threads,
            Self::I32Extend16S => WasmProposal::SignExtension,
            Self::I32Extend8S => WasmProposal::SignExtension,
            Self::I32TruncSatF32S => WasmProposal::NonTrappingFloatToIntConversion,
            Self::I32TruncSatF32U => WasmProposal::NonTrappingFloatToIntConversion,
            Self::I32TruncSatF64S => WasmProposal::NonTrappingFloatToIntConversion,
            Self::I32TruncSatF64U => WasmProposal::NonTrappingFloatToIntConversion,
            Self::I32x4Abs => WasmProposal::Simd,
            Self::I32x4Add => WasmProposal::Simd,
            Self::I32x4AllTrue => WasmProposal::Simd,
            Self::I32x4Bitmask => WasmProposal::Simd,
            Self::I32x4DotI16x8S => WasmProposal::Simd,
            Self::I32x4Eq => WasmProposal::Simd,
            Self::I32x4ExtaddPairwiseI16x8S => WasmProposal::Simd,
            Self::I32x4ExtaddPairwiseI16x8U => WasmProposal::Simd,
            Self::I32x4ExtendHighI16x8S => WasmProposal::Simd,
            Self::I32x4ExtendHighI16x8U => WasmProposal::Simd,
            Self::I32x4ExtendLowI16x8S => WasmProposal::Simd,
            Self::I32x4ExtendLowI16x8U => WasmProposal::Simd,
            Self::I32x4ExtmulHighI16x8S => WasmProposal::Simd,
            Self::I32x4ExtmulHighI16x8U => WasmProposal::Simd,
            Self::I32x4ExtmulLowI16x8S => WasmProposal::Simd,
            Self::I32x4ExtmulLowI16x8U => WasmProposal::Simd,
            Self::I32x4ExtractLane => WasmProposal::Simd,
            Self::I32x4GeS => WasmProposal::Simd,
            Self::I32x4GeU => WasmProposal::Simd,
            Self::I32x4GtS => WasmProposal::Simd,
            Self::I32x4GtU => WasmProposal::Simd,
            Self::I32x4LeS => WasmProposal::Simd,
            Self::I32x4LeU => WasmProposal::Simd,
            Self::I32x4LtS => WasmProposal::Simd,
            Self::I32x4LtU => WasmProposal::Simd,
            Self::I32x4MaxS => WasmProposal::Simd,
            Self::I32x4MaxU => WasmProposal::Simd,
            Self::I32x4MinS => WasmProposal::Simd,
            Self::I32x4MinU => WasmProposal::Simd,
            Self::I32x4Mul => WasmProposal::Simd,
            Self::I32x4Ne => WasmProposal::Simd,
            Self::I32x4Neg => WasmProposal::Simd,
            Self::I32x4RelaxedDotI8x16I7x16AddS => WasmProposal::RelaxedSimd,
            Self::I32x4RelaxedLaneselect => WasmProposal::RelaxedSimd,
            Self::I32x4RelaxedTruncF32x4U => WasmProposal::RelaxedSimd,
            Self::I32x4RelaxedTruncF64x2SZero => WasmProposal::RelaxedSimd,
            Self::I32x4RelaxedTruncF64x2UZero => WasmProposal::RelaxedSimd,
            Self::I32x4ReplaceLane => WasmProposal::Simd,
            Self::I32x4Shl => WasmProposal::Simd,
            Self::I32x4ShrS => WasmProposal::Simd,
            Self::I32x4ShrU => WasmProposal::Simd,
            Self::I32x4Splat => WasmProposal::Simd,
            Self::I32x4Sub => WasmProposal::Simd,
            Self::I32x4TruncSatF32x4S => WasmProposal::Simd,
            Self::I32x4TruncSatF32x4U => WasmProposal::Simd,
            Self::I32x4TruncSatF64x2SZero => WasmProposal::Simd,
            Self::I32x4TruncSatF64x2UZero => WasmProposal::Simd,
            Self::I64AtomicLoad => WasmProposal::Threads,
            Self::I64AtomicLoad16U => WasmProposal::Threads,
            Self::I64AtomicLoad32U => WasmProposal::Threads,
            Self::I64AtomicLoad8U => WasmProposal::Threads,
            Self::I64AtomicRmw16AddU => WasmProposal::Threads,
            Self::I64AtomicRmw16AndU => WasmProposal::Threads,
            Self::I64AtomicRmw16CmpxchgU => WasmProposal::Threads,
            Self::I64AtomicRmw16OrU => WasmProposal::Threads,
            Self::I64AtomicRmw16SubU => WasmProposal::Threads,
            Self::I64AtomicRmw16XchgU => WasmProposal::Threads,
            Self::I64AtomicRmw16XorU => WasmProposal::Threads,
            Self::I64AtomicRmw32AddU => WasmProposal::Threads,
            Self::I64AtomicRmw32AndU => WasmProposal::Threads,
            Self::I64AtomicRmw32CmpxchgU => WasmProposal::Threads,
            Self::I64AtomicRmw32OrU => WasmProposal::Threads,
            Self::I64AtomicRmw32SubU => WasmProposal::Threads,
            Self::I64AtomicRmw32XchgU => WasmProposal::Threads,
            Self::I64AtomicRmw32XorU => WasmProposal::Threads,
            Self::I64AtomicRmw8AddU => WasmProposal::Threads,
            Self::I64AtomicRmw8AndU => WasmProposal::Threads,
            Self::I64AtomicRmw8CmpxchgU => WasmProposal::Threads,
            Self::I64AtomicRmw8OrU => WasmProposal::Threads,
            Self::I64AtomicRmw8SubU => WasmProposal::Threads,
            Self::I64AtomicRmw8XchgU => WasmProposal::Threads,
            Self::I64AtomicRmw8XorU => WasmProposal::Threads,
            Self::I64AtomicRmwAdd => WasmProposal::Threads,
            Self::I64AtomicRmwAnd => WasmProposal::Threads,
            Self::I64AtomicRmwCmpxchg => WasmProposal::Threads,
            Self::I64AtomicRmwOr => WasmProposal::Threads,
            Self::I64AtomicRmwSub => WasmProposal::Threads,
            Self::I64AtomicRmwXchg => WasmProposal::Threads,
            Self::I64AtomicRmwXor => WasmProposal::Threads,
            Self::I64AtomicStore => WasmProposal::Threads,
            Self::I64AtomicStore16 => WasmProposal::Threads,
            Self::I64AtomicStore32 => WasmProposal::Threads,
            Self::I64AtomicStore8 => WasmProposal::Threads,
            Self::I64Extend16S => WasmProposal::SignExtension,
            Self::I64Extend32S => WasmProposal::SignExtension,
            Self::I64Extend8S => WasmProposal::SignExtension,
            Self::I64TruncSatF32S => WasmProposal::NonTrappingFloatToIntConversion,
            Self::I64TruncSatF32U => WasmProposal::NonTrappingFloatToIntConversion,
            Self::I64TruncSatF64S => WasmProposal::NonTrappingFloatToIntConversion,
            Self::I64TruncSatF64U => WasmProposal::NonTrappingFloatToIntConversion,
            Self::I64x2Abs => WasmProposal::Simd,
            Self::I64x2Add => WasmProposal::Simd,
            Self::I64x2AllTrue => WasmProposal::Simd,
            Self::I64x2Bitmask => WasmProposal::Simd,
            Self::I64x2Eq => WasmProposal::Simd,
            Self::I64x2ExtendHighI32x4S => WasmProposal::Simd,
            Self::I64x2ExtendHighI32x4U => WasmProposal::Simd,
            Self::I64x2ExtendLowI32x4S => WasmProposal::Simd,
            Self::I64x2ExtendLowI32x4U => WasmProposal::Simd,
            Self::I64x2ExtmulHighI32x4S => WasmProposal::Simd,
            Self::I64x2ExtmulHighI32x4U => WasmProposal::Simd,
            Self::I64x2ExtmulLowI32x4S => WasmProposal::Simd,
            Self::I64x2ExtmulLowI32x4U => WasmProposal::Simd,
            Self::I64x2ExtractLane => WasmProposal::Simd,
            Self::I64x2GeS => WasmProposal::Simd,
            Self::I64x2GtS => WasmProposal::Simd,
            Self::I64x2LeS => WasmProposal::Simd,
            Self::I64x2LtS => WasmProposal::Simd,
            Self::I64x2Mul => WasmProposal::Simd,
            Self::I64x2Ne => WasmProposal::Simd,
            Self::I64x2Neg => WasmProposal::Simd,
            Self::I64x2RelaxedLaneselect => WasmProposal::RelaxedSimd,
            Self::I64x2ReplaceLane => WasmProposal::Simd,
            Self::I64x2Shl => WasmProposal::Simd,
            Self::I64x2ShrS => WasmProposal::Simd,
            Self::I64x2ShrU => WasmProposal::Simd,
            Self::I64x2Splat => WasmProposal::Simd,
            Self::I64x2Sub => WasmProposal::Simd,
            Self::I8x16Abs => WasmProposal::Simd,
            Self::I8x16Add => WasmProposal::Simd,
            Self::I8x16AddSatS => WasmProposal::Simd,
            Self::I8x16AddSatU => WasmProposal::Simd,
            Self::I8x16AllTrue => WasmProposal::Simd,
            Self::I8x16AvgrU => WasmProposal::Simd,
            Self::I8x16Bitmask => WasmProposal::Simd,
            Self::I8x16Eq => WasmProposal::Simd,
            Self::I8x16ExtractLaneS => WasmProposal::Simd,
            Self::I8x16ExtractLaneU => WasmProposal::Simd,
            Self::I8x16GeS => WasmProposal::Simd,
            Self::I8x16GeU => WasmProposal::Simd,
            Self::I8x16GtS => WasmProposal::Simd,
            Self::I8x16GtU => WasmProposal::Simd,
            Self::I8x16LeS => WasmProposal::Simd,
            Self::I8x16LeU => WasmProposal::Simd,
            Self::I8x16LtS => WasmProposal::Simd,
            Self::I8x16LtU => WasmProposal::Simd,
            Self::I8x16MaxS => WasmProposal::Simd,
            Self::I8x16MaxU => WasmProposal::Simd,
            Self::I8x16MinS => WasmProposal::Simd,
            Self::I8x16MinU => WasmProposal::Simd,
            Self::I8x16NarrowI16x8S => WasmProposal::Simd,
            Self::I8x16NarrowI16x8U => WasmProposal::Simd,
            Self::I8x16Ne => WasmProposal::Simd,
            Self::I8x16Neg => WasmProposal::Simd,
            Self::I8x16Popcnt => WasmProposal::Simd,
            Self::I8x16RelaxedLaneselect => WasmProposal::RelaxedSimd,
            Self::I8x16ReplaceLane => WasmProposal::Simd,
            Self::I8x16Shl => WasmProposal::Simd,
            Self::I8x16ShrS => WasmProposal::Simd,
            Self::I8x16ShrU => WasmProposal::Simd,
            Self::I8x16Shuffle => WasmProposal::Simd,
            Self::I8x16Splat => WasmProposal::Simd,
            Self::I8x16Sub => WasmProposal::Simd,
            Self::I8x16SubSatS => WasmProposal::Simd,
            Self::I8x16SubSatU => WasmProposal::Simd,
            Self::I8x16Swizzle => WasmProposal::Simd,
            Self::MemoryAtomicNotify => WasmProposal::Threads,
            Self::MemoryAtomicWait32 => WasmProposal::Threads,
            Self::MemoryAtomicWait64 => WasmProposal::Threads,
            Self::MemoryCopy => WasmProposal::BulkMemoryOperations,
            Self::MemoryFill => WasmProposal::BulkMemoryOperations,
            Self::MemoryInit => WasmProposal::BulkMemoryOperations,
            Self::RefAsNonNull => WasmProposal::TypedFunctionReferences,
            Self::RefCastRefHt => WasmProposal::Gc,
            Self::RefCastRefNullHt => WasmProposal::Gc,
            Self::RefEq => WasmProposal::TypedFunctionReferences,
            Self::RefFunc => WasmProposal::ReferenceTypes,
            Self::RefI31 => WasmProposal::Gc,
            Self::RefIsNull => WasmProposal::ReferenceTypes,
            Self::RefNull => WasmProposal::ReferenceTypes,
            Self::RefTestRefHt => WasmProposal::Gc,
            Self::RefTestRefNullHt => WasmProposal::Gc,
            Self::ReturnCall => WasmProposal::TailCall,
            Self::ReturnCallIndirect => WasmProposal::TailCall,
            Self::ReturnCallRef => WasmProposal::TypedFunctionReferences,
            Self::SelectT => WasmProposal::ReferenceTypes,
            Self::StructGet => WasmProposal::Gc,
            Self::StructGetS => WasmProposal::Gc,
            Self::StructGetU => WasmProposal::Gc,
            Self::StructNew => WasmProposal::Gc,
            Self::StructNewDefault => WasmProposal::Gc,
            Self::StructSet => WasmProposal::Gc,
            Self::TableCopy => WasmProposal::BulkMemoryOperations,
            Self::TableFill => WasmProposal::ReferenceTypes,
            Self::TableGet => WasmProposal::ReferenceTypes,
            Self::TableGrow => WasmProposal::ReferenceTypes,
            Self::TableInit => WasmProposal::BulkMemoryOperations,
            Self::TableSet => WasmProposal::ReferenceTypes,
            Self::TableSize => WasmProposal::ReferenceTypes,
            Self::V128And => WasmProposal::Simd,
            Self::V128Andnot => WasmProposal::Simd,
            Self::V128AnyTrue => WasmProposal::Simd,
            Self::V128Bitselect => WasmProposal::Simd,
            Self::V128Const => WasmProposal::Simd,
            Self::V128Load => WasmProposal::Simd,
            Self::V128Load16Lane => WasmProposal::Simd,
            Self::V128Load16Splat => WasmProposal::Simd,
            Self::V128Load16x4S => WasmProposal::Simd,
            Self::V128Load16x4U => WasmProposal::Simd,
            Self::V128Load32Lane => WasmProposal::Simd,
            Self::V128Load32Splat => WasmProposal::Simd,
            Self::V128Load32Zero => WasmProposal::Simd,
            Self::V128Load32x2S => WasmProposal::Simd,
            Self::V128Load32x2U => WasmProposal::Simd,
            Self::V128Load64Lane => WasmProposal::Simd,
            Self::V128Load64Splat => WasmProposal::Simd,
            Self::V128Load64Zero => WasmProposal::Simd,
            Self::V128Load8Lane => WasmProposal::Simd,
            Self::V128Load8Splat => WasmProposal::Simd,
            Self::V128Load8x8S => WasmProposal::Simd,
            Self::V128Load8x8U => WasmProposal::Simd,
            Self::V128Not => WasmProposal::Simd,
            Self::V128Or => WasmProposal::Simd,
            Self::V128Store => WasmProposal::Simd,
            Self::V128Store16Lane => WasmProposal::Simd,
            Self::V128Store32Lane => WasmProposal::Simd,
            Self::V128Store64Lane => WasmProposal::Simd,
            Self::V128Store8Lane => WasmProposal::Simd,
            Self::V128Xor => WasmProposal::Simd,
            Self::Zi32x4RelaxedTruncF32x4S => WasmProposal::RelaxedSimd,
            Self::Zi8x16RelaxedSwizzle => WasmProposal::RelaxedSimd,
            _ => WasmProposal::Mvp,
        }
    }
}

impl fmt::Display for WasmMnemonic {
    #[inline]
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(self.as_str())
    }
}

impl fmt::Debug for WasmMnemonic {
    #[inline]
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(self.as_str())
    }
}

impl From<WasmBytecode> for WasmMnemonic {
    #[inline]
    fn from(val: WasmBytecode) -> WasmMnemonic {
        val.mnemonic()
    }
}

#[non_exhaustive]
#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]
pub enum WasmProposal {
    Mvp,
    BulkMemoryOperations,
    NonTrappingFloatToIntConversion,
    ReferenceTypes,
    SignExtension,
    Simd,
    Gc,
    RelaxedSimd,
    TailCall,
    Threads,
    TypedFunctionReferences,
}
